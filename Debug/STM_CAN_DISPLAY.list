
STM_CAN_DISPLAY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e40  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005ae8  08005ae8  00015ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005aec  08005aec  00015aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08005af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000030c  20000070  08005b60  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00001200  2000037c  08005b60  0002037c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0008342f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000045f0  00000000  00000000  000a34c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002f2ba  00000000  00000000  000a7ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002938  00000000  00000000  000d6d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002c58  00000000  00000000  000d96b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000bd78  00000000  00000000  000dc308  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000159a5  00000000  00000000  000e8080  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000fda25  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009224  00000000  00000000  000fdaa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c90 	.word	0x08003c90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003c90 	.word	0x08003c90

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fb42 	bl	80007ec <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 faf6 	bl	8000768 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 facf 	bl	8000744 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fd66 	bl	8001c7c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200001a8 	.word	0x200001a8
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200001a8 	.word	0x200001a8

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000200:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000202:	4604      	mov	r4, r0
 8000204:	2800      	cmp	r0, #0
 8000206:	d06e      	beq.n	80002e6 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000208:	f890 3020 	ldrb.w	r3, [r0, #32]
 800020c:	b90b      	cbnz	r3, 8000212 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800020e:	f001 fd57 	bl	8001cc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000212:	6822      	ldr	r2, [r4, #0]
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f023 0302 	bic.w	r3, r3, #2
 800021a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800021c:	f7ff ffd8 	bl	80001d0 <HAL_GetTick>
 8000220:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000222:	6823      	ldr	r3, [r4, #0]
 8000224:	685a      	ldr	r2, [r3, #4]
 8000226:	0791      	lsls	r1, r2, #30
 8000228:	d451      	bmi.n	80002ce <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	f042 0201 	orr.w	r2, r2, #1
 8000230:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000232:	f7ff ffcd 	bl	80001d0 <HAL_GetTick>
 8000236:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000238:	6823      	ldr	r3, [r4, #0]
 800023a:	685a      	ldr	r2, [r3, #4]
 800023c:	07d2      	lsls	r2, r2, #31
 800023e:	d554      	bpl.n	80002ea <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000240:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000242:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000244:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	bf0c      	ite	eq
 800024a:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800024e:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000252:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000254:	7e62      	ldrb	r2, [r4, #25]
 8000256:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	bf0c      	ite	eq
 800025c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000260:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000264:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000266:	7ea2      	ldrb	r2, [r4, #26]
 8000268:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	bf0c      	ite	eq
 800026e:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000272:	f022 0220 	bicne.w	r2, r2, #32
 8000276:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000278:	7ee2      	ldrb	r2, [r4, #27]
 800027a:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	bf0c      	ite	eq
 8000280:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000284:	f042 0210 	orrne.w	r2, r2, #16
 8000288:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800028a:	7f22      	ldrb	r2, [r4, #28]
 800028c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	bf0c      	ite	eq
 8000292:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000296:	f022 0208 	bicne.w	r2, r2, #8
 800029a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800029c:	7f62      	ldrb	r2, [r4, #29]
 800029e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	bf0c      	ite	eq
 80002a4:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002a8:	f022 0204 	bicne.w	r2, r2, #4
 80002ac:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80002ae:	68e1      	ldr	r1, [r4, #12]
 80002b0:	68a2      	ldr	r2, [r4, #8]
 80002b2:	430a      	orrs	r2, r1
 80002b4:	6921      	ldr	r1, [r4, #16]
 80002b6:	430a      	orrs	r2, r1
 80002b8:	6961      	ldr	r1, [r4, #20]
 80002ba:	430a      	orrs	r2, r1
 80002bc:	6861      	ldr	r1, [r4, #4]
 80002be:	3901      	subs	r1, #1
 80002c0:	430a      	orrs	r2, r1
 80002c2:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80002c4:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80002c6:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80002c8:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 80002cc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002ce:	f7ff ff7f 	bl	80001d0 <HAL_GetTick>
 80002d2:	1b40      	subs	r0, r0, r5
 80002d4:	280a      	cmp	r0, #10
 80002d6:	d9a4      	bls.n	8000222 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80002da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002de:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80002e0:	2305      	movs	r3, #5
 80002e2:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80002e6:	2001      	movs	r0, #1
}
 80002e8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002ea:	f7ff ff71 	bl	80001d0 <HAL_GetTick>
 80002ee:	1b40      	subs	r0, r0, r5
 80002f0:	280a      	cmp	r0, #10
 80002f2:	d9a1      	bls.n	8000238 <HAL_CAN_Init+0x38>
 80002f4:	e7f0      	b.n	80002d8 <HAL_CAN_Init+0xd8>

080002f6 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80002f6:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80002fa:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 80002fc:	3b01      	subs	r3, #1
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d85f      	bhi.n	80003c2 <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000302:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8000304:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000306:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000308:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800030c:	f042 0201 	orr.w	r2, r2, #1
 8000310:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000314:	f000 021f 	and.w	r2, r0, #31
 8000318:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800031c:	43d4      	mvns	r4, r2
 800031e:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 8000322:	4025      	ands	r5, r4
 8000324:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000328:	69cd      	ldr	r5, [r1, #28]
 800032a:	bb85      	cbnz	r5, 800038e <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800032c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000330:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000332:	4025      	ands	r5, r4
 8000334:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000338:	888d      	ldrh	r5, [r1, #4]
 800033a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800033e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000342:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000346:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000348:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800034a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800034e:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000352:	6988      	ldr	r0, [r1, #24]
 8000354:	bb68      	cbnz	r0, 80003b2 <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000356:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800035a:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800035c:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000360:	6908      	ldr	r0, [r1, #16]
 8000362:	bb50      	cbnz	r0, 80003ba <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000364:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8000368:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800036a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800036e:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8000370:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000372:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000374:	bf02      	ittt	eq
 8000376:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 800037a:	430a      	orreq	r2, r1
 800037c:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000380:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000384:	f022 0201 	bic.w	r2, r2, #1
 8000388:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 800038c:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800038e:	2d01      	cmp	r5, #1
 8000390:	d1df      	bne.n	8000352 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000392:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000396:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000398:	4315      	orrs	r5, r2
 800039a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800039e:	888d      	ldrh	r5, [r1, #4]
 80003a0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80003a4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80003a8:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003ac:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80003ae:	898d      	ldrh	r5, [r1, #12]
 80003b0:	e7cb      	b.n	800034a <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80003b2:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80003b6:	4310      	orrs	r0, r2
 80003b8:	e7d0      	b.n	800035c <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80003ba:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80003be:	4310      	orrs	r0, r2
 80003c0:	e7d3      	b.n	800036a <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80003c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80003c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003c8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80003ca:	2001      	movs	r0, #1
  }
}
 80003cc:	bd70      	pop	{r4, r5, r6, pc}

080003ce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80003ce:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80003d0:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80003d4:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d11f      	bne.n	800041a <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80003da:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80003dc:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80003de:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80003e2:	6813      	ldr	r3, [r2, #0]
 80003e4:	f023 0301 	bic.w	r3, r3, #1
 80003e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80003ea:	f7ff fef1 	bl	80001d0 <HAL_GetTick>
 80003ee:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80003f0:	6823      	ldr	r3, [r4, #0]
 80003f2:	6858      	ldr	r0, [r3, #4]
 80003f4:	f010 0001 	ands.w	r0, r0, #1
 80003f8:	d101      	bne.n	80003fe <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80003fa:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80003fc:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80003fe:	f7ff fee7 	bl	80001d0 <HAL_GetTick>
 8000402:	1b40      	subs	r0, r0, r5
 8000404:	280a      	cmp	r0, #10
 8000406:	d9f3      	bls.n	80003f0 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800040a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800040e:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000410:	2305      	movs	r3, #5
 8000412:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8000416:	2001      	movs	r0, #1
  }
}
 8000418:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800041a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800041c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000420:	6243      	str	r3, [r0, #36]	; 0x24
 8000422:	e7f8      	b.n	8000416 <HAL_CAN_Start+0x48>

08000424 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000426:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800042a:	3c01      	subs	r4, #1
 800042c:	2c01      	cmp	r4, #1
 800042e:	d86b      	bhi.n	8000508 <HAL_CAN_GetRxMessage+0xe4>
 8000430:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000432:	b941      	cbnz	r1, 8000446 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000434:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000436:	07a4      	lsls	r4, r4, #30
 8000438:	d107      	bne.n	800044a <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800043a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800043c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000440:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000442:	2001      	movs	r0, #1
  }
}
 8000444:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000446:	6934      	ldr	r4, [r6, #16]
 8000448:	e7f5      	b.n	8000436 <HAL_CAN_GetRxMessage+0x12>
 800044a:	010c      	lsls	r4, r1, #4
 800044c:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800044e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000452:	f007 0704 	and.w	r7, r7, #4
 8000456:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000458:	2f00      	cmp	r7, #0
 800045a:	d14b      	bne.n	80004f4 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800045c:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000460:	0d7f      	lsrs	r7, r7, #21
 8000462:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000464:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000468:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800046a:	f007 0702 	and.w	r7, r7, #2
 800046e:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000470:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000474:	f007 070f 	and.w	r7, r7, #15
 8000478:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800047a:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800047e:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000482:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000486:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000488:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800048a:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800048c:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000490:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000492:	6802      	ldr	r2, [r0, #0]
 8000494:	4422      	add	r2, r4
 8000496:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800049a:	0a12      	lsrs	r2, r2, #8
 800049c:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800049e:	6802      	ldr	r2, [r0, #0]
 80004a0:	4422      	add	r2, r4
 80004a2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80004a6:	0c12      	lsrs	r2, r2, #16
 80004a8:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80004aa:	6802      	ldr	r2, [r0, #0]
 80004ac:	4422      	add	r2, r4
 80004ae:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80004b2:	0e12      	lsrs	r2, r2, #24
 80004b4:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80004b6:	6802      	ldr	r2, [r0, #0]
 80004b8:	4422      	add	r2, r4
 80004ba:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80004be:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80004c0:	6802      	ldr	r2, [r0, #0]
 80004c2:	4422      	add	r2, r4
 80004c4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80004c8:	0a12      	lsrs	r2, r2, #8
 80004ca:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80004cc:	6802      	ldr	r2, [r0, #0]
 80004ce:	4422      	add	r2, r4
 80004d0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80004d4:	0c12      	lsrs	r2, r2, #16
 80004d6:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80004d8:	6802      	ldr	r2, [r0, #0]
 80004da:	4414      	add	r4, r2
 80004dc:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 80004e0:	0e12      	lsrs	r2, r2, #24
 80004e2:	71da      	strb	r2, [r3, #7]
 80004e4:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80004e6:	b951      	cbnz	r1, 80004fe <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80004e8:	68da      	ldr	r2, [r3, #12]
 80004ea:	f042 0220 	orr.w	r2, r2, #32
 80004ee:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 80004f0:	2000      	movs	r0, #0
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80004f4:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80004f8:	08ff      	lsrs	r7, r7, #3
 80004fa:	6057      	str	r7, [r2, #4]
 80004fc:	e7b2      	b.n	8000464 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80004fe:	691a      	ldr	r2, [r3, #16]
 8000500:	f042 0220 	orr.w	r2, r2, #32
 8000504:	611a      	str	r2, [r3, #16]
 8000506:	e7f3      	b.n	80004f0 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000508:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800050a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800050e:	e797      	b.n	8000440 <HAL_CAN_GetRxMessage+0x1c>

08000510 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000510:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000514:	3b01      	subs	r3, #1
 8000516:	2b01      	cmp	r3, #1
 8000518:	d805      	bhi.n	8000526 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800051a:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 800051c:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800051e:	6953      	ldr	r3, [r2, #20]
 8000520:	4319      	orrs	r1, r3
 8000522:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000524:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000526:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800052c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800052e:	2001      	movs	r0, #1
  }
}
 8000530:	4770      	bx	lr

08000532 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000532:	4770      	bx	lr

08000534 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000534:	4770      	bx	lr

08000536 <HAL_CAN_TxMailbox0AbortCallback>:
 8000536:	4770      	bx	lr

08000538 <HAL_CAN_TxMailbox1AbortCallback>:
 8000538:	4770      	bx	lr

0800053a <HAL_CAN_TxMailbox2AbortCallback>:
 800053a:	4770      	bx	lr

0800053c <HAL_CAN_RxFifo0FullCallback>:
 800053c:	4770      	bx	lr

0800053e <HAL_CAN_RxFifo1MsgPendingCallback>:
 800053e:	4770      	bx	lr

08000540 <HAL_CAN_RxFifo1FullCallback>:
 8000540:	4770      	bx	lr

08000542 <HAL_CAN_SleepCallback>:
 8000542:	4770      	bx	lr

08000544 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000544:	4770      	bx	lr

08000546 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000546:	4770      	bx	lr

08000548 <HAL_CAN_IRQHandler>:
{
 8000548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800054c:	6803      	ldr	r3, [r0, #0]
{
 800054e:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000550:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000552:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000556:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800055a:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800055c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000560:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000564:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000568:	d022      	beq.n	80005b0 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800056a:	f017 0401 	ands.w	r4, r7, #1
 800056e:	d007      	beq.n	8000580 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000570:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000572:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000574:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000576:	f140 80a3 	bpl.w	80006c0 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800057a:	f001 fadb 	bl	8001b34 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800057e:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000580:	05fb      	lsls	r3, r7, #23
 8000582:	d509      	bpl.n	8000598 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000588:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800058a:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800058c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800058e:	f140 80a5 	bpl.w	80006dc <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000592:	4628      	mov	r0, r5
 8000594:	f7ff ffcd 	bl	8000532 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000598:	03fb      	lsls	r3, r7, #15
 800059a:	d509      	bpl.n	80005b0 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800059c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a0:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80005a2:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80005a4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80005a6:	f140 80a7 	bpl.w	80006f8 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80005aa:	4628      	mov	r0, r5
 80005ac:	f7ff ffc2 	bl	8000534 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80005b0:	0733      	lsls	r3, r6, #28
 80005b2:	d507      	bpl.n	80005c4 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80005b4:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80005b8:	bf1f      	itttt	ne
 80005ba:	2210      	movne	r2, #16
 80005bc:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80005be:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80005c2:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80005c4:	0777      	lsls	r7, r6, #29
 80005c6:	d508      	bpl.n	80005da <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80005c8:	f01b 0f08 	tst.w	fp, #8
 80005cc:	d005      	beq.n	80005da <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80005ce:	2208      	movs	r2, #8
 80005d0:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80005d2:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80005d4:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80005d6:	f7ff ffb1 	bl	800053c <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80005da:	07b0      	lsls	r0, r6, #30
 80005dc:	d506      	bpl.n	80005ec <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80005de:	682b      	ldr	r3, [r5, #0]
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	0799      	lsls	r1, r3, #30
 80005e4:	d002      	beq.n	80005ec <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80005e6:	4628      	mov	r0, r5
 80005e8:	f001 faa6 	bl	8001b38 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80005ec:	0672      	lsls	r2, r6, #25
 80005ee:	d507      	bpl.n	8000600 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80005f0:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80005f4:	bf1f      	itttt	ne
 80005f6:	2210      	movne	r2, #16
 80005f8:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80005fa:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80005fe:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000600:	06b3      	lsls	r3, r6, #26
 8000602:	d508      	bpl.n	8000616 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000604:	f01a 0f08 	tst.w	sl, #8
 8000608:	d005      	beq.n	8000616 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800060a:	2208      	movs	r2, #8
 800060c:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800060e:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000610:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000612:	f7ff ff95 	bl	8000540 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000616:	06f7      	lsls	r7, r6, #27
 8000618:	d506      	bpl.n	8000628 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800061a:	682b      	ldr	r3, [r5, #0]
 800061c:	691b      	ldr	r3, [r3, #16]
 800061e:	0798      	lsls	r0, r3, #30
 8000620:	d002      	beq.n	8000628 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000622:	4628      	mov	r0, r5
 8000624:	f7ff ff8b 	bl	800053e <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000628:	03b1      	lsls	r1, r6, #14
 800062a:	d508      	bpl.n	800063e <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800062c:	f019 0f10 	tst.w	r9, #16
 8000630:	d005      	beq.n	800063e <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000632:	2210      	movs	r2, #16
 8000634:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 8000636:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000638:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800063a:	f7ff ff82 	bl	8000542 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800063e:	03f2      	lsls	r2, r6, #15
 8000640:	d508      	bpl.n	8000654 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000642:	f019 0f08 	tst.w	r9, #8
 8000646:	d005      	beq.n	8000654 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000648:	2208      	movs	r2, #8
 800064a:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800064c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800064e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000650:	f7ff ff78 	bl	8000544 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000654:	0433      	lsls	r3, r6, #16
 8000656:	d52a      	bpl.n	80006ae <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000658:	f019 0f04 	tst.w	r9, #4
 800065c:	682a      	ldr	r2, [r5, #0]
 800065e:	d024      	beq.n	80006aa <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000660:	05f7      	lsls	r7, r6, #23
 8000662:	d504      	bpl.n	800066e <HAL_CAN_IRQHandler+0x126>
 8000664:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000668:	bf18      	it	ne
 800066a:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800066e:	05b0      	lsls	r0, r6, #22
 8000670:	d504      	bpl.n	800067c <HAL_CAN_IRQHandler+0x134>
 8000672:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000676:	bf18      	it	ne
 8000678:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800067c:	0571      	lsls	r1, r6, #21
 800067e:	d504      	bpl.n	800068a <HAL_CAN_IRQHandler+0x142>
 8000680:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8000684:	bf18      	it	ne
 8000686:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800068a:	0533      	lsls	r3, r6, #20
 800068c:	d50d      	bpl.n	80006aa <HAL_CAN_IRQHandler+0x162>
 800068e:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000692:	d00a      	beq.n	80006aa <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8000694:	2b30      	cmp	r3, #48	; 0x30
 8000696:	d04c      	beq.n	8000732 <HAL_CAN_IRQHandler+0x1ea>
 8000698:	d83c      	bhi.n	8000714 <HAL_CAN_IRQHandler+0x1cc>
 800069a:	2b10      	cmp	r3, #16
 800069c:	d043      	beq.n	8000726 <HAL_CAN_IRQHandler+0x1de>
 800069e:	2b20      	cmp	r3, #32
 80006a0:	d044      	beq.n	800072c <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80006a2:	6993      	ldr	r3, [r2, #24]
 80006a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006a8:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80006aa:	2304      	movs	r3, #4
 80006ac:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80006ae:	b12c      	cbz	r4, 80006bc <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 80006b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80006b2:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 80006b4:	431c      	orrs	r4, r3
 80006b6:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80006b8:	f7ff ff45 	bl	8000546 <HAL_CAN_ErrorCallback>
 80006bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80006c0:	077a      	lsls	r2, r7, #29
 80006c2:	d405      	bmi.n	80006d0 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80006c4:	f017 0408 	ands.w	r4, r7, #8
 80006c8:	d105      	bne.n	80006d6 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80006ca:	f7ff ff34 	bl	8000536 <HAL_CAN_TxMailbox0AbortCallback>
 80006ce:	e757      	b.n	8000580 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80006d0:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80006d4:	e754      	b.n	8000580 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80006d6:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80006da:	e751      	b.n	8000580 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80006dc:	0579      	lsls	r1, r7, #21
 80006de:	d502      	bpl.n	80006e6 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80006e0:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80006e4:	e758      	b.n	8000598 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80006e6:	053a      	lsls	r2, r7, #20
 80006e8:	d502      	bpl.n	80006f0 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80006ea:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80006ee:	e753      	b.n	8000598 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80006f0:	4628      	mov	r0, r5
 80006f2:	f7ff ff21 	bl	8000538 <HAL_CAN_TxMailbox1AbortCallback>
 80006f6:	e74f      	b.n	8000598 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80006f8:	0379      	lsls	r1, r7, #13
 80006fa:	d502      	bpl.n	8000702 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80006fc:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000700:	e756      	b.n	80005b0 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000702:	033a      	lsls	r2, r7, #12
 8000704:	d502      	bpl.n	800070c <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000706:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800070a:	e751      	b.n	80005b0 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800070c:	4628      	mov	r0, r5
 800070e:	f7ff ff14 	bl	800053a <HAL_CAN_TxMailbox2AbortCallback>
 8000712:	e74d      	b.n	80005b0 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000714:	2b50      	cmp	r3, #80	; 0x50
 8000716:	d00f      	beq.n	8000738 <HAL_CAN_IRQHandler+0x1f0>
 8000718:	2b60      	cmp	r3, #96	; 0x60
 800071a:	d010      	beq.n	800073e <HAL_CAN_IRQHandler+0x1f6>
 800071c:	2b40      	cmp	r3, #64	; 0x40
 800071e:	d1c0      	bne.n	80006a2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000720:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000724:	e7bd      	b.n	80006a2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000726:	f044 0408 	orr.w	r4, r4, #8
            break;
 800072a:	e7ba      	b.n	80006a2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800072c:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000730:	e7b7      	b.n	80006a2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000732:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000736:	e7b4      	b.n	80006a2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000738:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 800073c:	e7b1      	b.n	80006a2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800073e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000742:	e7ae      	b.n	80006a2 <HAL_CAN_IRQHandler+0x15a>

08000744 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000746:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800074a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000752:	041b      	lsls	r3, r3, #16
 8000754:	0c1b      	lsrs	r3, r3, #16
 8000756:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800075a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800075e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000760:	60d3      	str	r3, [r2, #12]
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076a:	b530      	push	{r4, r5, lr}
 800076c:	68dc      	ldr	r4, [r3, #12]
 800076e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000772:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000776:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000778:	2b04      	cmp	r3, #4
 800077a:	bf28      	it	cs
 800077c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000784:	bf98      	it	ls
 8000786:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	fa05 f303 	lsl.w	r3, r5, r3
 800078c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000790:	bf88      	it	hi
 8000792:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4019      	ands	r1, r3
 8000796:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000798:	fa05 f404 	lsl.w	r4, r5, r4
 800079c:	3c01      	subs	r4, #1
 800079e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80007a0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a2:	ea42 0201 	orr.w	r2, r2, r1
 80007a6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	bfa9      	itett	ge
 80007ac:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	4b06      	ldrlt	r3, [pc, #24]	; (80007cc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	b2d2      	uxtbge	r2, r2
 80007b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	bfbb      	ittet	lt
 80007ba:	f000 000f 	andlt.w	r0, r0, #15
 80007be:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c4:	541a      	strblt	r2, [r3, r0]
 80007c6:	bd30      	pop	{r4, r5, pc}
 80007c8:	e000ed00 	.word	0xe000ed00
 80007cc:	e000ed14 	.word	0xe000ed14

080007d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007d0:	2800      	cmp	r0, #0
 80007d2:	db08      	blt.n	80007e6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d4:	2301      	movs	r3, #1
 80007d6:	0942      	lsrs	r2, r0, #5
 80007d8:	f000 001f 	and.w	r0, r0, #31
 80007dc:	fa03 f000 	lsl.w	r0, r3, r0
 80007e0:	4b01      	ldr	r3, [pc, #4]	; (80007e8 <HAL_NVIC_EnableIRQ+0x18>)
 80007e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80007e6:	4770      	bx	lr
 80007e8:	e000e100 	.word	0xe000e100

080007ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ec:	3801      	subs	r0, #1
 80007ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007f2:	d20a      	bcs.n	800080a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f8:	4a06      	ldr	r2, [pc, #24]	; (8000814 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000800:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000802:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000804:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e010 	.word	0xe000e010
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800081c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800081e:	4626      	mov	r6, r4
 8000820:	4b66      	ldr	r3, [pc, #408]	; (80009bc <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000822:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80009cc <HAL_GPIO_Init+0x1b4>
 8000826:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80009d0 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082a:	680a      	ldr	r2, [r1, #0]
 800082c:	fa32 f506 	lsrs.w	r5, r2, r6
 8000830:	d102      	bne.n	8000838 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000832:	b003      	add	sp, #12
 8000834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000838:	f04f 0801 	mov.w	r8, #1
 800083c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000840:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000844:	4590      	cmp	r8, r2
 8000846:	d17f      	bne.n	8000948 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000848:	684d      	ldr	r5, [r1, #4]
 800084a:	2d12      	cmp	r5, #18
 800084c:	f000 80aa 	beq.w	80009a4 <HAL_GPIO_Init+0x18c>
 8000850:	f200 8083 	bhi.w	800095a <HAL_GPIO_Init+0x142>
 8000854:	2d02      	cmp	r5, #2
 8000856:	f000 80a2 	beq.w	800099e <HAL_GPIO_Init+0x186>
 800085a:	d877      	bhi.n	800094c <HAL_GPIO_Init+0x134>
 800085c:	2d00      	cmp	r5, #0
 800085e:	f000 8089 	beq.w	8000974 <HAL_GPIO_Init+0x15c>
 8000862:	2d01      	cmp	r5, #1
 8000864:	f000 8099 	beq.w	800099a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000868:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800086c:	2aff      	cmp	r2, #255	; 0xff
 800086e:	bf93      	iteet	ls
 8000870:	4682      	movls	sl, r0
 8000872:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000876:	3d08      	subhi	r5, #8
 8000878:	f8d0 b000 	ldrls.w	fp, [r0]
 800087c:	bf92      	itee	ls
 800087e:	00b5      	lslls	r5, r6, #2
 8000880:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000884:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000886:	fa09 f805 	lsl.w	r8, r9, r5
 800088a:	ea2b 0808 	bic.w	r8, fp, r8
 800088e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000892:	bf88      	it	hi
 8000894:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000898:	ea48 0505 	orr.w	r5, r8, r5
 800089c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008a0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80008a4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80008a8:	d04e      	beq.n	8000948 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008aa:	4d45      	ldr	r5, [pc, #276]	; (80009c0 <HAL_GPIO_Init+0x1a8>)
 80008ac:	4f44      	ldr	r7, [pc, #272]	; (80009c0 <HAL_GPIO_Init+0x1a8>)
 80008ae:	69ad      	ldr	r5, [r5, #24]
 80008b0:	f026 0803 	bic.w	r8, r6, #3
 80008b4:	f045 0501 	orr.w	r5, r5, #1
 80008b8:	61bd      	str	r5, [r7, #24]
 80008ba:	69bd      	ldr	r5, [r7, #24]
 80008bc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80008c0:	f005 0501 	and.w	r5, r5, #1
 80008c4:	9501      	str	r5, [sp, #4]
 80008c6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008ca:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008ce:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008d0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80008d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008d8:	fa09 f90b 	lsl.w	r9, r9, fp
 80008dc:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008e0:	4d38      	ldr	r5, [pc, #224]	; (80009c4 <HAL_GPIO_Init+0x1ac>)
 80008e2:	42a8      	cmp	r0, r5
 80008e4:	d063      	beq.n	80009ae <HAL_GPIO_Init+0x196>
 80008e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ea:	42a8      	cmp	r0, r5
 80008ec:	d061      	beq.n	80009b2 <HAL_GPIO_Init+0x19a>
 80008ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008f2:	42a8      	cmp	r0, r5
 80008f4:	d05f      	beq.n	80009b6 <HAL_GPIO_Init+0x19e>
 80008f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008fa:	42a8      	cmp	r0, r5
 80008fc:	bf0c      	ite	eq
 80008fe:	2503      	moveq	r5, #3
 8000900:	2504      	movne	r5, #4
 8000902:	fa05 f50b 	lsl.w	r5, r5, fp
 8000906:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800090a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800090e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000910:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000914:	bf14      	ite	ne
 8000916:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000918:	4395      	biceq	r5, r2
 800091a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800091c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800091e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000922:	bf14      	ite	ne
 8000924:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000926:	4395      	biceq	r5, r2
 8000928:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800092a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800092c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000930:	bf14      	ite	ne
 8000932:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000934:	4395      	biceq	r5, r2
 8000936:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000938:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800093a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800093e:	bf14      	ite	ne
 8000940:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000942:	ea25 0202 	biceq.w	r2, r5, r2
 8000946:	60da      	str	r2, [r3, #12]
	position++;
 8000948:	3601      	adds	r6, #1
 800094a:	e76e      	b.n	800082a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800094c:	2d03      	cmp	r5, #3
 800094e:	d022      	beq.n	8000996 <HAL_GPIO_Init+0x17e>
 8000950:	2d11      	cmp	r5, #17
 8000952:	d189      	bne.n	8000868 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000954:	68cc      	ldr	r4, [r1, #12]
 8000956:	3404      	adds	r4, #4
          break;
 8000958:	e786      	b.n	8000868 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800095a:	4f1b      	ldr	r7, [pc, #108]	; (80009c8 <HAL_GPIO_Init+0x1b0>)
 800095c:	42bd      	cmp	r5, r7
 800095e:	d009      	beq.n	8000974 <HAL_GPIO_Init+0x15c>
 8000960:	d812      	bhi.n	8000988 <HAL_GPIO_Init+0x170>
 8000962:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80009d4 <HAL_GPIO_Init+0x1bc>
 8000966:	454d      	cmp	r5, r9
 8000968:	d004      	beq.n	8000974 <HAL_GPIO_Init+0x15c>
 800096a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800096e:	454d      	cmp	r5, r9
 8000970:	f47f af7a 	bne.w	8000868 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000974:	688c      	ldr	r4, [r1, #8]
 8000976:	b1c4      	cbz	r4, 80009aa <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000978:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800097a:	bf0c      	ite	eq
 800097c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000980:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000984:	2408      	movs	r4, #8
 8000986:	e76f      	b.n	8000868 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000988:	4575      	cmp	r5, lr
 800098a:	d0f3      	beq.n	8000974 <HAL_GPIO_Init+0x15c>
 800098c:	4565      	cmp	r5, ip
 800098e:	d0f1      	beq.n	8000974 <HAL_GPIO_Init+0x15c>
 8000990:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80009d8 <HAL_GPIO_Init+0x1c0>
 8000994:	e7eb      	b.n	800096e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000996:	2400      	movs	r4, #0
 8000998:	e766      	b.n	8000868 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800099a:	68cc      	ldr	r4, [r1, #12]
          break;
 800099c:	e764      	b.n	8000868 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800099e:	68cc      	ldr	r4, [r1, #12]
 80009a0:	3408      	adds	r4, #8
          break;
 80009a2:	e761      	b.n	8000868 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009a4:	68cc      	ldr	r4, [r1, #12]
 80009a6:	340c      	adds	r4, #12
          break;
 80009a8:	e75e      	b.n	8000868 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009aa:	2404      	movs	r4, #4
 80009ac:	e75c      	b.n	8000868 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009ae:	2500      	movs	r5, #0
 80009b0:	e7a7      	b.n	8000902 <HAL_GPIO_Init+0xea>
 80009b2:	2501      	movs	r5, #1
 80009b4:	e7a5      	b.n	8000902 <HAL_GPIO_Init+0xea>
 80009b6:	2502      	movs	r5, #2
 80009b8:	e7a3      	b.n	8000902 <HAL_GPIO_Init+0xea>
 80009ba:	bf00      	nop
 80009bc:	40010400 	.word	0x40010400
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010800 	.word	0x40010800
 80009c8:	10210000 	.word	0x10210000
 80009cc:	10310000 	.word	0x10310000
 80009d0:	10320000 	.word	0x10320000
 80009d4:	10110000 	.word	0x10110000
 80009d8:	10220000 	.word	0x10220000

080009dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009dc:	b10a      	cbz	r2, 80009e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009de:	6101      	str	r1, [r0, #16]
 80009e0:	4770      	bx	lr
 80009e2:	0409      	lsls	r1, r1, #16
 80009e4:	e7fb      	b.n	80009de <HAL_GPIO_WritePin+0x2>

080009e6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80009e6:	68c3      	ldr	r3, [r0, #12]
 80009e8:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009ea:	bf14      	ite	ne
 80009ec:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009ee:	6101      	streq	r1, [r0, #16]
 80009f0:	4770      	bx	lr
	...

080009f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009f8:	4605      	mov	r5, r0
 80009fa:	b908      	cbnz	r0, 8000a00 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80009fc:	2001      	movs	r0, #1
 80009fe:	e03c      	b.n	8000a7a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a00:	6803      	ldr	r3, [r0, #0]
 8000a02:	07db      	lsls	r3, r3, #31
 8000a04:	d410      	bmi.n	8000a28 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a06:	682b      	ldr	r3, [r5, #0]
 8000a08:	079f      	lsls	r7, r3, #30
 8000a0a:	d45d      	bmi.n	8000ac8 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a0c:	682b      	ldr	r3, [r5, #0]
 8000a0e:	0719      	lsls	r1, r3, #28
 8000a10:	f100 8094 	bmi.w	8000b3c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a14:	682b      	ldr	r3, [r5, #0]
 8000a16:	075a      	lsls	r2, r3, #29
 8000a18:	f100 80be 	bmi.w	8000b98 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a1c:	69e8      	ldr	r0, [r5, #28]
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	f040 812c 	bne.w	8000c7c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000a24:	2000      	movs	r0, #0
 8000a26:	e028      	b.n	8000a7a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a28:	4c8f      	ldr	r4, [pc, #572]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000a2a:	6863      	ldr	r3, [r4, #4]
 8000a2c:	f003 030c 	and.w	r3, r3, #12
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d007      	beq.n	8000a44 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a34:	6863      	ldr	r3, [r4, #4]
 8000a36:	f003 030c 	and.w	r3, r3, #12
 8000a3a:	2b08      	cmp	r3, #8
 8000a3c:	d109      	bne.n	8000a52 <HAL_RCC_OscConfig+0x5e>
 8000a3e:	6863      	ldr	r3, [r4, #4]
 8000a40:	03de      	lsls	r6, r3, #15
 8000a42:	d506      	bpl.n	8000a52 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a44:	6823      	ldr	r3, [r4, #0]
 8000a46:	039c      	lsls	r4, r3, #14
 8000a48:	d5dd      	bpl.n	8000a06 <HAL_RCC_OscConfig+0x12>
 8000a4a:	686b      	ldr	r3, [r5, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1da      	bne.n	8000a06 <HAL_RCC_OscConfig+0x12>
 8000a50:	e7d4      	b.n	80009fc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a52:	686b      	ldr	r3, [r5, #4]
 8000a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a58:	d112      	bne.n	8000a80 <HAL_RCC_OscConfig+0x8c>
 8000a5a:	6823      	ldr	r3, [r4, #0]
 8000a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a60:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a62:	f7ff fbb5 	bl	80001d0 <HAL_GetTick>
 8000a66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a68:	6823      	ldr	r3, [r4, #0]
 8000a6a:	0398      	lsls	r0, r3, #14
 8000a6c:	d4cb      	bmi.n	8000a06 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a6e:	f7ff fbaf 	bl	80001d0 <HAL_GetTick>
 8000a72:	1b80      	subs	r0, r0, r6
 8000a74:	2864      	cmp	r0, #100	; 0x64
 8000a76:	d9f7      	bls.n	8000a68 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000a78:	2003      	movs	r0, #3
}
 8000a7a:	b002      	add	sp, #8
 8000a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a80:	b99b      	cbnz	r3, 8000aaa <HAL_RCC_OscConfig+0xb6>
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a88:	6023      	str	r3, [r4, #0]
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a90:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a92:	f7ff fb9d 	bl	80001d0 <HAL_GetTick>
 8000a96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	0399      	lsls	r1, r3, #14
 8000a9c:	d5b3      	bpl.n	8000a06 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a9e:	f7ff fb97 	bl	80001d0 <HAL_GetTick>
 8000aa2:	1b80      	subs	r0, r0, r6
 8000aa4:	2864      	cmp	r0, #100	; 0x64
 8000aa6:	d9f7      	bls.n	8000a98 <HAL_RCC_OscConfig+0xa4>
 8000aa8:	e7e6      	b.n	8000a78 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	d103      	bne.n	8000aba <HAL_RCC_OscConfig+0xc6>
 8000ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab6:	6023      	str	r3, [r4, #0]
 8000ab8:	e7cf      	b.n	8000a5a <HAL_RCC_OscConfig+0x66>
 8000aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000abe:	6023      	str	r3, [r4, #0]
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ac6:	e7cb      	b.n	8000a60 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ac8:	4c67      	ldr	r4, [pc, #412]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000aca:	6863      	ldr	r3, [r4, #4]
 8000acc:	f013 0f0c 	tst.w	r3, #12
 8000ad0:	d007      	beq.n	8000ae2 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ad2:	6863      	ldr	r3, [r4, #4]
 8000ad4:	f003 030c 	and.w	r3, r3, #12
 8000ad8:	2b08      	cmp	r3, #8
 8000ada:	d110      	bne.n	8000afe <HAL_RCC_OscConfig+0x10a>
 8000adc:	6863      	ldr	r3, [r4, #4]
 8000ade:	03da      	lsls	r2, r3, #15
 8000ae0:	d40d      	bmi.n	8000afe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	079b      	lsls	r3, r3, #30
 8000ae6:	d502      	bpl.n	8000aee <HAL_RCC_OscConfig+0xfa>
 8000ae8:	692b      	ldr	r3, [r5, #16]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d186      	bne.n	80009fc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	696a      	ldr	r2, [r5, #20]
 8000af2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000af6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000afa:	6023      	str	r3, [r4, #0]
 8000afc:	e786      	b.n	8000a0c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000afe:	692a      	ldr	r2, [r5, #16]
 8000b00:	4b5a      	ldr	r3, [pc, #360]	; (8000c6c <HAL_RCC_OscConfig+0x278>)
 8000b02:	b16a      	cbz	r2, 8000b20 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000b04:	2201      	movs	r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b08:	f7ff fb62 	bl	80001d0 <HAL_GetTick>
 8000b0c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	079f      	lsls	r7, r3, #30
 8000b12:	d4ec      	bmi.n	8000aee <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b14:	f7ff fb5c 	bl	80001d0 <HAL_GetTick>
 8000b18:	1b80      	subs	r0, r0, r6
 8000b1a:	2802      	cmp	r0, #2
 8000b1c:	d9f7      	bls.n	8000b0e <HAL_RCC_OscConfig+0x11a>
 8000b1e:	e7ab      	b.n	8000a78 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000b20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b22:	f7ff fb55 	bl	80001d0 <HAL_GetTick>
 8000b26:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	0798      	lsls	r0, r3, #30
 8000b2c:	f57f af6e 	bpl.w	8000a0c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b30:	f7ff fb4e 	bl	80001d0 <HAL_GetTick>
 8000b34:	1b80      	subs	r0, r0, r6
 8000b36:	2802      	cmp	r0, #2
 8000b38:	d9f6      	bls.n	8000b28 <HAL_RCC_OscConfig+0x134>
 8000b3a:	e79d      	b.n	8000a78 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b3c:	69aa      	ldr	r2, [r5, #24]
 8000b3e:	4c4a      	ldr	r4, [pc, #296]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000b40:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <HAL_RCC_OscConfig+0x27c>)
 8000b42:	b1da      	cbz	r2, 8000b7c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000b44:	2201      	movs	r2, #1
 8000b46:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b48:	f7ff fb42 	bl	80001d0 <HAL_GetTick>
 8000b4c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b50:	079b      	lsls	r3, r3, #30
 8000b52:	d50d      	bpl.n	8000b70 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000b54:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b58:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <HAL_RCC_OscConfig+0x280>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b60:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000b62:	bf00      	nop
  }
  while (Delay --);
 8000b64:	9b01      	ldr	r3, [sp, #4]
 8000b66:	1e5a      	subs	r2, r3, #1
 8000b68:	9201      	str	r2, [sp, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1f9      	bne.n	8000b62 <HAL_RCC_OscConfig+0x16e>
 8000b6e:	e751      	b.n	8000a14 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b70:	f7ff fb2e 	bl	80001d0 <HAL_GetTick>
 8000b74:	1b80      	subs	r0, r0, r6
 8000b76:	2802      	cmp	r0, #2
 8000b78:	d9e9      	bls.n	8000b4e <HAL_RCC_OscConfig+0x15a>
 8000b7a:	e77d      	b.n	8000a78 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000b7c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b7e:	f7ff fb27 	bl	80001d0 <HAL_GetTick>
 8000b82:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b86:	079f      	lsls	r7, r3, #30
 8000b88:	f57f af44 	bpl.w	8000a14 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b8c:	f7ff fb20 	bl	80001d0 <HAL_GetTick>
 8000b90:	1b80      	subs	r0, r0, r6
 8000b92:	2802      	cmp	r0, #2
 8000b94:	d9f6      	bls.n	8000b84 <HAL_RCC_OscConfig+0x190>
 8000b96:	e76f      	b.n	8000a78 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b98:	4c33      	ldr	r4, [pc, #204]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000b9a:	69e3      	ldr	r3, [r4, #28]
 8000b9c:	00d8      	lsls	r0, r3, #3
 8000b9e:	d424      	bmi.n	8000bea <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000ba0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	69e3      	ldr	r3, [r4, #28]
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	61e3      	str	r3, [r4, #28]
 8000baa:	69e3      	ldr	r3, [r4, #28]
 8000bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bb4:	4e30      	ldr	r6, [pc, #192]	; (8000c78 <HAL_RCC_OscConfig+0x284>)
 8000bb6:	6833      	ldr	r3, [r6, #0]
 8000bb8:	05d9      	lsls	r1, r3, #23
 8000bba:	d518      	bpl.n	8000bee <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bbc:	68eb      	ldr	r3, [r5, #12]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d126      	bne.n	8000c10 <HAL_RCC_OscConfig+0x21c>
 8000bc2:	6a23      	ldr	r3, [r4, #32]
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000bca:	f7ff fb01 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bce:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000bd2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bd4:	6a23      	ldr	r3, [r4, #32]
 8000bd6:	079b      	lsls	r3, r3, #30
 8000bd8:	d53f      	bpl.n	8000c5a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000bda:	2f00      	cmp	r7, #0
 8000bdc:	f43f af1e 	beq.w	8000a1c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000be0:	69e3      	ldr	r3, [r4, #28]
 8000be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000be6:	61e3      	str	r3, [r4, #28]
 8000be8:	e718      	b.n	8000a1c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000bea:	2700      	movs	r7, #0
 8000bec:	e7e2      	b.n	8000bb4 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bee:	6833      	ldr	r3, [r6, #0]
 8000bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000bf6:	f7ff faeb 	bl	80001d0 <HAL_GetTick>
 8000bfa:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bfc:	6833      	ldr	r3, [r6, #0]
 8000bfe:	05da      	lsls	r2, r3, #23
 8000c00:	d4dc      	bmi.n	8000bbc <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c02:	f7ff fae5 	bl	80001d0 <HAL_GetTick>
 8000c06:	eba0 0008 	sub.w	r0, r0, r8
 8000c0a:	2864      	cmp	r0, #100	; 0x64
 8000c0c:	d9f6      	bls.n	8000bfc <HAL_RCC_OscConfig+0x208>
 8000c0e:	e733      	b.n	8000a78 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c10:	b9ab      	cbnz	r3, 8000c3e <HAL_RCC_OscConfig+0x24a>
 8000c12:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c14:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c18:	f023 0301 	bic.w	r3, r3, #1
 8000c1c:	6223      	str	r3, [r4, #32]
 8000c1e:	6a23      	ldr	r3, [r4, #32]
 8000c20:	f023 0304 	bic.w	r3, r3, #4
 8000c24:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c26:	f7ff fad3 	bl	80001d0 <HAL_GetTick>
 8000c2a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c2c:	6a23      	ldr	r3, [r4, #32]
 8000c2e:	0798      	lsls	r0, r3, #30
 8000c30:	d5d3      	bpl.n	8000bda <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c32:	f7ff facd 	bl	80001d0 <HAL_GetTick>
 8000c36:	1b80      	subs	r0, r0, r6
 8000c38:	4540      	cmp	r0, r8
 8000c3a:	d9f7      	bls.n	8000c2c <HAL_RCC_OscConfig+0x238>
 8000c3c:	e71c      	b.n	8000a78 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c3e:	2b05      	cmp	r3, #5
 8000c40:	6a23      	ldr	r3, [r4, #32]
 8000c42:	d103      	bne.n	8000c4c <HAL_RCC_OscConfig+0x258>
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	6223      	str	r3, [r4, #32]
 8000c4a:	e7ba      	b.n	8000bc2 <HAL_RCC_OscConfig+0x1ce>
 8000c4c:	f023 0301 	bic.w	r3, r3, #1
 8000c50:	6223      	str	r3, [r4, #32]
 8000c52:	6a23      	ldr	r3, [r4, #32]
 8000c54:	f023 0304 	bic.w	r3, r3, #4
 8000c58:	e7b6      	b.n	8000bc8 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c5a:	f7ff fab9 	bl	80001d0 <HAL_GetTick>
 8000c5e:	eba0 0008 	sub.w	r0, r0, r8
 8000c62:	42b0      	cmp	r0, r6
 8000c64:	d9b6      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x1e0>
 8000c66:	e707      	b.n	8000a78 <HAL_RCC_OscConfig+0x84>
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	42420000 	.word	0x42420000
 8000c70:	42420480 	.word	0x42420480
 8000c74:	20000008 	.word	0x20000008
 8000c78:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <HAL_RCC_OscConfig+0x334>)
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	461c      	mov	r4, r3
 8000c82:	f002 020c 	and.w	r2, r2, #12
 8000c86:	2a08      	cmp	r2, #8
 8000c88:	d03d      	beq.n	8000d06 <HAL_RCC_OscConfig+0x312>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	4e27      	ldr	r6, [pc, #156]	; (8000d2c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c8e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000c90:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c92:	d12b      	bne.n	8000cec <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000c94:	f7ff fa9c 	bl	80001d0 <HAL_GetTick>
 8000c98:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	0199      	lsls	r1, r3, #6
 8000c9e:	d41f      	bmi.n	8000ce0 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ca0:	6a2b      	ldr	r3, [r5, #32]
 8000ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ca6:	d105      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ca8:	6862      	ldr	r2, [r4, #4]
 8000caa:	68a9      	ldr	r1, [r5, #8]
 8000cac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cb4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000cb6:	6862      	ldr	r2, [r4, #4]
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fa83 	bl	80001d0 <HAL_GetTick>
 8000cca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ccc:	6823      	ldr	r3, [r4, #0]
 8000cce:	019a      	lsls	r2, r3, #6
 8000cd0:	f53f aea8 	bmi.w	8000a24 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cd4:	f7ff fa7c 	bl	80001d0 <HAL_GetTick>
 8000cd8:	1b40      	subs	r0, r0, r5
 8000cda:	2802      	cmp	r0, #2
 8000cdc:	d9f6      	bls.n	8000ccc <HAL_RCC_OscConfig+0x2d8>
 8000cde:	e6cb      	b.n	8000a78 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ce0:	f7ff fa76 	bl	80001d0 <HAL_GetTick>
 8000ce4:	1bc0      	subs	r0, r0, r7
 8000ce6:	2802      	cmp	r0, #2
 8000ce8:	d9d7      	bls.n	8000c9a <HAL_RCC_OscConfig+0x2a6>
 8000cea:	e6c5      	b.n	8000a78 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000cec:	f7ff fa70 	bl	80001d0 <HAL_GetTick>
 8000cf0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	019b      	lsls	r3, r3, #6
 8000cf6:	f57f ae95 	bpl.w	8000a24 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cfa:	f7ff fa69 	bl	80001d0 <HAL_GetTick>
 8000cfe:	1b40      	subs	r0, r0, r5
 8000d00:	2802      	cmp	r0, #2
 8000d02:	d9f6      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x2fe>
 8000d04:	e6b8      	b.n	8000a78 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d06:	2801      	cmp	r0, #1
 8000d08:	f43f aeb7 	beq.w	8000a7a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000d0c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d0e:	6a2b      	ldr	r3, [r5, #32]
 8000d10:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000d14:	429a      	cmp	r2, r3
 8000d16:	f47f ae71 	bne.w	80009fc <HAL_RCC_OscConfig+0x8>
 8000d1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d1c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000d20:	1ac0      	subs	r0, r0, r3
 8000d22:	bf18      	it	ne
 8000d24:	2001      	movne	r0, #1
 8000d26:	e6a8      	b.n	8000a7a <HAL_RCC_OscConfig+0x86>
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	42420060 	.word	0x42420060

08000d30 <HAL_RCC_GetSysClockFreq>:
{
 8000d30:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000d34:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d36:	ac02      	add	r4, sp, #8
 8000d38:	f103 0510 	add.w	r5, r3, #16
 8000d3c:	4622      	mov	r2, r4
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	6859      	ldr	r1, [r3, #4]
 8000d42:	3308      	adds	r3, #8
 8000d44:	c203      	stmia	r2!, {r0, r1}
 8000d46:	42ab      	cmp	r3, r5
 8000d48:	4614      	mov	r4, r2
 8000d4a:	d1f7      	bne.n	8000d3c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000d52:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000d54:	4911      	ldr	r1, [pc, #68]	; (8000d9c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000d56:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000d5a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000d5c:	f003 020c 	and.w	r2, r3, #12
 8000d60:	2a08      	cmp	r2, #8
 8000d62:	d117      	bne.n	8000d94 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000d64:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000d68:	a806      	add	r0, sp, #24
 8000d6a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000d6c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000d6e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000d72:	d50c      	bpl.n	8000d8e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000d74:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000d76:	480a      	ldr	r0, [pc, #40]	; (8000da0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000d78:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000d7c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000d7e:	aa06      	add	r2, sp, #24
 8000d80:	4413      	add	r3, r2
 8000d82:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000d86:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000d8a:	b007      	add	sp, #28
 8000d8c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_RCC_GetSysClockFreq+0x74>)
 8000d90:	4350      	muls	r0, r2
 8000d92:	e7fa      	b.n	8000d8a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000d96:	e7f8      	b.n	8000d8a <HAL_RCC_GetSysClockFreq+0x5a>
 8000d98:	08003ca8 	.word	0x08003ca8
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	007a1200 	.word	0x007a1200
 8000da4:	003d0900 	.word	0x003d0900

08000da8 <HAL_RCC_ClockConfig>:
{
 8000da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dac:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000dae:	4604      	mov	r4, r0
 8000db0:	b910      	cbnz	r0, 8000db8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000db2:	2001      	movs	r0, #1
 8000db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000db8:	4a45      	ldr	r2, [pc, #276]	; (8000ed0 <HAL_RCC_ClockConfig+0x128>)
 8000dba:	6813      	ldr	r3, [r2, #0]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d329      	bcc.n	8000e18 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dc4:	6821      	ldr	r1, [r4, #0]
 8000dc6:	078e      	lsls	r6, r1, #30
 8000dc8:	d431      	bmi.n	8000e2e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dca:	07ca      	lsls	r2, r1, #31
 8000dcc:	d444      	bmi.n	8000e58 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000dce:	4a40      	ldr	r2, [pc, #256]	; (8000ed0 <HAL_RCC_ClockConfig+0x128>)
 8000dd0:	6813      	ldr	r3, [r2, #0]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	429d      	cmp	r5, r3
 8000dd8:	d367      	bcc.n	8000eaa <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dda:	6822      	ldr	r2, [r4, #0]
 8000ddc:	4d3d      	ldr	r5, [pc, #244]	; (8000ed4 <HAL_RCC_ClockConfig+0x12c>)
 8000dde:	f012 0f04 	tst.w	r2, #4
 8000de2:	d16e      	bne.n	8000ec2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000de4:	0713      	lsls	r3, r2, #28
 8000de6:	d506      	bpl.n	8000df6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000de8:	686b      	ldr	r3, [r5, #4]
 8000dea:	6922      	ldr	r2, [r4, #16]
 8000dec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000df0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000df4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000df6:	f7ff ff9b 	bl	8000d30 <HAL_RCC_GetSysClockFreq>
 8000dfa:	686b      	ldr	r3, [r5, #4]
 8000dfc:	4a36      	ldr	r2, [pc, #216]	; (8000ed8 <HAL_RCC_ClockConfig+0x130>)
 8000dfe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e02:	5cd3      	ldrb	r3, [r2, r3]
 8000e04:	40d8      	lsrs	r0, r3
 8000e06:	4b35      	ldr	r3, [pc, #212]	; (8000edc <HAL_RCC_ClockConfig+0x134>)
 8000e08:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000e0a:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <HAL_RCC_ClockConfig+0x138>)
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	f7ff f99d 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000e12:	2000      	movs	r0, #0
 8000e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e18:	6813      	ldr	r3, [r2, #0]
 8000e1a:	f023 0307 	bic.w	r3, r3, #7
 8000e1e:	430b      	orrs	r3, r1
 8000e20:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e22:	6813      	ldr	r3, [r2, #0]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d1c2      	bne.n	8000db2 <HAL_RCC_ClockConfig+0xa>
 8000e2c:	e7ca      	b.n	8000dc4 <HAL_RCC_ClockConfig+0x1c>
 8000e2e:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e30:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e34:	bf1e      	ittt	ne
 8000e36:	685a      	ldrne	r2, [r3, #4]
 8000e38:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000e3c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e3e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e40:	bf42      	ittt	mi
 8000e42:	685a      	ldrmi	r2, [r3, #4]
 8000e44:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000e48:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	68a0      	ldr	r0, [r4, #8]
 8000e4e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e52:	4302      	orrs	r2, r0
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	e7b8      	b.n	8000dca <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e58:	6862      	ldr	r2, [r4, #4]
 8000e5a:	4e1e      	ldr	r6, [pc, #120]	; (8000ed4 <HAL_RCC_ClockConfig+0x12c>)
 8000e5c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5e:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e60:	d11b      	bne.n	8000e9a <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e66:	d0a4      	beq.n	8000db2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e68:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e6a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e6e:	f023 0303 	bic.w	r3, r3, #3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000e76:	f7ff f9ab 	bl	80001d0 <HAL_GetTick>
 8000e7a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e7c:	6873      	ldr	r3, [r6, #4]
 8000e7e:	6862      	ldr	r2, [r4, #4]
 8000e80:	f003 030c 	and.w	r3, r3, #12
 8000e84:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e88:	d0a1      	beq.n	8000dce <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e8a:	f7ff f9a1 	bl	80001d0 <HAL_GetTick>
 8000e8e:	1bc0      	subs	r0, r0, r7
 8000e90:	4540      	cmp	r0, r8
 8000e92:	d9f3      	bls.n	8000e7c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000e94:	2003      	movs	r0, #3
}
 8000e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e9a:	2a02      	cmp	r2, #2
 8000e9c:	d102      	bne.n	8000ea4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e9e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ea2:	e7e0      	b.n	8000e66 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea4:	f013 0f02 	tst.w	r3, #2
 8000ea8:	e7dd      	b.n	8000e66 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eaa:	6813      	ldr	r3, [r2, #0]
 8000eac:	f023 0307 	bic.w	r3, r3, #7
 8000eb0:	432b      	orrs	r3, r5
 8000eb2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eb4:	6813      	ldr	r3, [r2, #0]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	429d      	cmp	r5, r3
 8000ebc:	f47f af79 	bne.w	8000db2 <HAL_RCC_ClockConfig+0xa>
 8000ec0:	e78b      	b.n	8000dda <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ec2:	686b      	ldr	r3, [r5, #4]
 8000ec4:	68e1      	ldr	r1, [r4, #12]
 8000ec6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	606b      	str	r3, [r5, #4]
 8000ece:	e789      	b.n	8000de4 <HAL_RCC_ClockConfig+0x3c>
 8000ed0:	40022000 	.word	0x40022000
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	08003d29 	.word	0x08003d29
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ef2:	6810      	ldr	r0, [r2, #0]
}
 8000ef4:	40d8      	lsrs	r0, r3
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	08003d39 	.word	0x08003d39
 8000f00:	20000008 	.word	0x20000008

08000f04 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000f0e:	5cd3      	ldrb	r3, [r2, r3]
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f12:	6810      	ldr	r0, [r2, #0]
}
 8000f14:	40d8      	lsrs	r0, r3
 8000f16:	4770      	bx	lr
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	08003d39 	.word	0x08003d39
 8000f20:	20000008 	.word	0x20000008

08000f24 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f24:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 8000f26:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	f042 0201 	orr.w	r2, r2, #1
 8000f2e:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f36:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8000f38:	bf1e      	ittt	ne
 8000f3a:	681a      	ldrne	r2, [r3, #0]
 8000f3c:	f042 0201 	orrne.w	r2, r2, #1
 8000f40:	601a      	strne	r2, [r3, #0]
}
 8000f42:	4770      	bx	lr

08000f44 <HAL_TIM_OC_DelayElapsedCallback>:
 8000f44:	4770      	bx	lr

08000f46 <HAL_TIM_IC_CaptureCallback>:
 8000f46:	4770      	bx	lr

08000f48 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000f48:	4770      	bx	lr

08000f4a <HAL_TIM_TriggerCallback>:
 8000f4a:	4770      	bx	lr

08000f4c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f4c:	6803      	ldr	r3, [r0, #0]
{
 8000f4e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f50:	691a      	ldr	r2, [r3, #16]
{
 8000f52:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f54:	0791      	lsls	r1, r2, #30
 8000f56:	d50e      	bpl.n	8000f76 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	0792      	lsls	r2, r2, #30
 8000f5c:	d50b      	bpl.n	8000f76 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000f5e:	f06f 0202 	mvn.w	r2, #2
 8000f62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f64:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f66:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f68:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f6a:	079b      	lsls	r3, r3, #30
 8000f6c:	d077      	beq.n	800105e <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000f6e:	f7ff ffea 	bl	8000f46 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f72:	2300      	movs	r3, #0
 8000f74:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	691a      	ldr	r2, [r3, #16]
 8000f7a:	0750      	lsls	r0, r2, #29
 8000f7c:	d510      	bpl.n	8000fa0 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	0751      	lsls	r1, r2, #29
 8000f82:	d50d      	bpl.n	8000fa0 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000f84:	f06f 0204 	mvn.w	r2, #4
 8000f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f8a:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f8c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f8e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f90:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000f94:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f96:	d068      	beq.n	800106a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f98:	f7ff ffd5 	bl	8000f46 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000fa0:	6823      	ldr	r3, [r4, #0]
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	0712      	lsls	r2, r2, #28
 8000fa6:	d50f      	bpl.n	8000fc8 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	0710      	lsls	r0, r2, #28
 8000fac:	d50c      	bpl.n	8000fc8 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000fae:	f06f 0208 	mvn.w	r2, #8
 8000fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000fb4:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000fb6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000fb8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000fba:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000fbc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000fbe:	d05a      	beq.n	8001076 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fc0:	f7ff ffc1 	bl	8000f46 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	06d2      	lsls	r2, r2, #27
 8000fce:	d510      	bpl.n	8000ff2 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	06d0      	lsls	r0, r2, #27
 8000fd4:	d50d      	bpl.n	8000ff2 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000fd6:	f06f 0210 	mvn.w	r2, #16
 8000fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fdc:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fde:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fe0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fe2:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000fe6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fe8:	d04b      	beq.n	8001082 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fea:	f7ff ffac 	bl	8000f46 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	07d1      	lsls	r1, r2, #31
 8000ff8:	d508      	bpl.n	800100c <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	07d2      	lsls	r2, r2, #31
 8000ffe:	d505      	bpl.n	800100c <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001000:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001004:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001006:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001008:	f000 fde6 	bl	8001bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	0610      	lsls	r0, r2, #24
 8001012:	d508      	bpl.n	8001026 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	0611      	lsls	r1, r2, #24
 8001018:	d505      	bpl.n	8001026 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800101a:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800101e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001020:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001022:	f000 f944 	bl	80012ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	0652      	lsls	r2, r2, #25
 800102c:	d508      	bpl.n	8001040 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	0650      	lsls	r0, r2, #25
 8001032:	d505      	bpl.n	8001040 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001034:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001038:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800103a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800103c:	f7ff ff85 	bl	8000f4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	691a      	ldr	r2, [r3, #16]
 8001044:	0691      	lsls	r1, r2, #26
 8001046:	d522      	bpl.n	800108e <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	0692      	lsls	r2, r2, #26
 800104c:	d51f      	bpl.n	800108e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800104e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001052:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001058:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800105a:	f000 b927 	b.w	80012ac <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800105e:	f7ff ff71 	bl	8000f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001062:	4620      	mov	r0, r4
 8001064:	f7ff ff70 	bl	8000f48 <HAL_TIM_PWM_PulseFinishedCallback>
 8001068:	e783      	b.n	8000f72 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800106a:	f7ff ff6b 	bl	8000f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800106e:	4620      	mov	r0, r4
 8001070:	f7ff ff6a 	bl	8000f48 <HAL_TIM_PWM_PulseFinishedCallback>
 8001074:	e792      	b.n	8000f9c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001076:	f7ff ff65 	bl	8000f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff ff64 	bl	8000f48 <HAL_TIM_PWM_PulseFinishedCallback>
 8001080:	e7a0      	b.n	8000fc4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001082:	f7ff ff5f 	bl	8000f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001086:	4620      	mov	r0, r4
 8001088:	f7ff ff5e 	bl	8000f48 <HAL_TIM_PWM_PulseFinishedCallback>
 800108c:	e7af      	b.n	8000fee <HAL_TIM_IRQHandler+0xa2>
 800108e:	bd10      	pop	{r4, pc}

08001090 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001092:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001094:	4290      	cmp	r0, r2
 8001096:	d00a      	beq.n	80010ae <TIM_Base_SetConfig+0x1e>
 8001098:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800109c:	d007      	beq.n	80010ae <TIM_Base_SetConfig+0x1e>
 800109e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80010a2:	4290      	cmp	r0, r2
 80010a4:	d003      	beq.n	80010ae <TIM_Base_SetConfig+0x1e>
 80010a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010aa:	4290      	cmp	r0, r2
 80010ac:	d115      	bne.n	80010da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80010ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80010b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80010b4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <TIM_Base_SetConfig+0x6c>)
 80010b8:	4290      	cmp	r0, r2
 80010ba:	d00a      	beq.n	80010d2 <TIM_Base_SetConfig+0x42>
 80010bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80010c0:	d007      	beq.n	80010d2 <TIM_Base_SetConfig+0x42>
 80010c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80010c6:	4290      	cmp	r0, r2
 80010c8:	d003      	beq.n	80010d2 <TIM_Base_SetConfig+0x42>
 80010ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010ce:	4290      	cmp	r0, r2
 80010d0:	d103      	bne.n	80010da <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80010d2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80010d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80010d8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80010da:	694a      	ldr	r2, [r1, #20]
 80010dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010e0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80010e2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80010e4:	688b      	ldr	r3, [r1, #8]
 80010e6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80010e8:	680b      	ldr	r3, [r1, #0]
 80010ea:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <TIM_Base_SetConfig+0x6c>)
 80010ee:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80010f0:	bf04      	itt	eq
 80010f2:	690b      	ldreq	r3, [r1, #16]
 80010f4:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80010f6:	2301      	movs	r3, #1
 80010f8:	6143      	str	r3, [r0, #20]
 80010fa:	4770      	bx	lr
 80010fc:	40012c00 	.word	0x40012c00

08001100 <HAL_TIM_Base_Init>:
{
 8001100:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001102:	4604      	mov	r4, r0
 8001104:	b1a0      	cbz	r0, 8001130 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001106:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800110a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800110e:	b91b      	cbnz	r3, 8001118 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001110:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001114:	f000 fe1c 	bl	8001d50 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001118:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800111a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800111c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001120:	1d21      	adds	r1, r4, #4
 8001122:	f7ff ffb5 	bl	8001090 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001126:	2301      	movs	r3, #1
  return HAL_OK;
 8001128:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800112a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800112e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001130:	2001      	movs	r0, #1
}
 8001132:	bd10      	pop	{r4, pc}

08001134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001134:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001136:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001138:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800113a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800113e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001142:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001144:	6083      	str	r3, [r0, #8]
 8001146:	bd10      	pop	{r4, pc}

08001148 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001148:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800114c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800114e:	2b01      	cmp	r3, #1
{
 8001150:	4604      	mov	r4, r0
 8001152:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001156:	d019      	beq.n	800118c <HAL_TIM_ConfigClockSource+0x44>
 8001158:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800115a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800115e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001160:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001164:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800116a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800116e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001170:	680b      	ldr	r3, [r1, #0]
 8001172:	2b40      	cmp	r3, #64	; 0x40
 8001174:	d065      	beq.n	8001242 <HAL_TIM_ConfigClockSource+0xfa>
 8001176:	d815      	bhi.n	80011a4 <HAL_TIM_ConfigClockSource+0x5c>
 8001178:	2b10      	cmp	r3, #16
 800117a:	d00c      	beq.n	8001196 <HAL_TIM_ConfigClockSource+0x4e>
 800117c:	d807      	bhi.n	800118e <HAL_TIM_ConfigClockSource+0x46>
 800117e:	b153      	cbz	r3, 8001196 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001180:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001182:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001184:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001188:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800118c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800118e:	2b20      	cmp	r3, #32
 8001190:	d001      	beq.n	8001196 <HAL_TIM_ConfigClockSource+0x4e>
 8001192:	2b30      	cmp	r3, #48	; 0x30
 8001194:	d1f4      	bne.n	8001180 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001196:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001198:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800119c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80011a0:	4313      	orrs	r3, r2
 80011a2:	e01a      	b.n	80011da <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80011a4:	2b60      	cmp	r3, #96	; 0x60
 80011a6:	d034      	beq.n	8001212 <HAL_TIM_ConfigClockSource+0xca>
 80011a8:	d819      	bhi.n	80011de <HAL_TIM_ConfigClockSource+0x96>
 80011aa:	2b50      	cmp	r3, #80	; 0x50
 80011ac:	d1e8      	bne.n	8001180 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80011ae:	684a      	ldr	r2, [r1, #4]
 80011b0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80011b2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011b4:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80011b6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011ba:	f025 0501 	bic.w	r5, r5, #1
 80011be:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80011c0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80011c2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80011c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80011c8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80011cc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80011ce:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80011d0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80011d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80011d6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80011da:	6083      	str	r3, [r0, #8]
 80011dc:	e7d0      	b.n	8001180 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80011de:	2b70      	cmp	r3, #112	; 0x70
 80011e0:	d00c      	beq.n	80011fc <HAL_TIM_ConfigClockSource+0xb4>
 80011e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011e6:	d1cb      	bne.n	8001180 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80011e8:	68cb      	ldr	r3, [r1, #12]
 80011ea:	684a      	ldr	r2, [r1, #4]
 80011ec:	6889      	ldr	r1, [r1, #8]
 80011ee:	f7ff ffa1 	bl	8001134 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80011f2:	6822      	ldr	r2, [r4, #0]
 80011f4:	6893      	ldr	r3, [r2, #8]
 80011f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fa:	e008      	b.n	800120e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80011fc:	68cb      	ldr	r3, [r1, #12]
 80011fe:	684a      	ldr	r2, [r1, #4]
 8001200:	6889      	ldr	r1, [r1, #8]
 8001202:	f7ff ff97 	bl	8001134 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001206:	6822      	ldr	r2, [r4, #0]
 8001208:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800120a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800120e:	6093      	str	r3, [r2, #8]
      break;
 8001210:	e7b6      	b.n	8001180 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001212:	684d      	ldr	r5, [r1, #4]
 8001214:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001216:	6a01      	ldr	r1, [r0, #32]
 8001218:	f021 0110 	bic.w	r1, r1, #16
 800121c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800121e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001220:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001222:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001226:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800122a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800122e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001232:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001234:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001236:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800123c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001240:	e7cb      	b.n	80011da <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001242:	684a      	ldr	r2, [r1, #4]
 8001244:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001246:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001248:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800124a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800124e:	f025 0501 	bic.w	r5, r5, #1
 8001252:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001254:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001256:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800125c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001260:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001262:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001264:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800126a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800126e:	e7b4      	b.n	80011da <HAL_TIM_ConfigClockSource+0x92>

08001270 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001270:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001274:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001276:	2b01      	cmp	r3, #1
 8001278:	f04f 0302 	mov.w	r3, #2
 800127c:	d014      	beq.n	80012a8 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800127e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001280:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001284:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001286:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001288:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800128a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800128c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001294:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001296:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001298:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800129a:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800129c:	2301      	movs	r3, #1
 800129e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80012a2:	2300      	movs	r3, #0
 80012a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80012a8:	4618      	mov	r0, r3

  return HAL_OK;
}
 80012aa:	bd30      	pop	{r4, r5, pc}

080012ac <HAL_TIMEx_CommutCallback>:
 80012ac:	4770      	bx	lr

080012ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80012ae:	4770      	bx	lr

080012b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012b4:	6803      	ldr	r3, [r0, #0]
 80012b6:	68c1      	ldr	r1, [r0, #12]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	2419      	movs	r4, #25
 80012bc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80012c0:	430a      	orrs	r2, r1
 80012c2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012c4:	6882      	ldr	r2, [r0, #8]
 80012c6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80012c8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012ca:	4302      	orrs	r2, r0
 80012cc:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80012ce:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80012d2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012d6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80012d8:	430a      	orrs	r2, r1
 80012da:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	69a9      	ldr	r1, [r5, #24]
 80012e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80012e4:	430a      	orrs	r2, r1
 80012e6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <UART_SetConfig+0x70>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d114      	bne.n	8001318 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80012ee:	f7ff fe09 	bl	8000f04 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80012f2:	4360      	muls	r0, r4
 80012f4:	686c      	ldr	r4, [r5, #4]
 80012f6:	2264      	movs	r2, #100	; 0x64
 80012f8:	00a4      	lsls	r4, r4, #2
 80012fa:	fbb0 f0f4 	udiv	r0, r0, r4
 80012fe:	fbb0 f4f2 	udiv	r4, r0, r2
 8001302:	fb02 0314 	mls	r3, r2, r4, r0
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	3332      	adds	r3, #50	; 0x32
 800130a:	fbb3 f3f2 	udiv	r3, r3, r2
 800130e:	6829      	ldr	r1, [r5, #0]
 8001310:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001314:	608b      	str	r3, [r1, #8]
 8001316:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001318:	f7ff fde4 	bl	8000ee4 <HAL_RCC_GetPCLK1Freq>
 800131c:	e7e9      	b.n	80012f2 <UART_SetConfig+0x42>
 800131e:	bf00      	nop
 8001320:	40013800 	.word	0x40013800

08001324 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001326:	4604      	mov	r4, r0
 8001328:	460e      	mov	r6, r1
 800132a:	4617      	mov	r7, r2
 800132c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800132e:	6821      	ldr	r1, [r4, #0]
 8001330:	680b      	ldr	r3, [r1, #0]
 8001332:	ea36 0303 	bics.w	r3, r6, r3
 8001336:	d101      	bne.n	800133c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001338:	2000      	movs	r0, #0
}
 800133a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800133c:	1c6b      	adds	r3, r5, #1
 800133e:	d0f7      	beq.n	8001330 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001340:	b995      	cbnz	r5, 8001368 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001342:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001344:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800134c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800134e:	695a      	ldr	r2, [r3, #20]
 8001350:	f022 0201 	bic.w	r2, r2, #1
 8001354:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001356:	2320      	movs	r3, #32
 8001358:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800135c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001360:	2300      	movs	r3, #0
 8001362:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001368:	f7fe ff32 	bl	80001d0 <HAL_GetTick>
 800136c:	1bc0      	subs	r0, r0, r7
 800136e:	4285      	cmp	r5, r0
 8001370:	d2dd      	bcs.n	800132e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001372:	e7e6      	b.n	8001342 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001374 <HAL_UART_Init>:
{
 8001374:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001376:	4604      	mov	r4, r0
 8001378:	b340      	cbz	r0, 80013cc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800137a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800137e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001382:	b91b      	cbnz	r3, 800138c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001384:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001388:	f000 fd16 	bl	8001db8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800138c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800138e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001390:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001394:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001396:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800139c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800139e:	f7ff ff87 	bl	80012b0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013a2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013a4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013ae:	695a      	ldr	r2, [r3, #20]
 80013b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013b4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013bc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80013be:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013c0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80013c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80013c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80013ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80013cc:	2001      	movs	r0, #1
}
 80013ce:	bd10      	pop	{r4, pc}

080013d0 <HAL_UART_Transmit>:
{
 80013d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80013d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80013da:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80013dc:	2b20      	cmp	r3, #32
{
 80013de:	460d      	mov	r5, r1
 80013e0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80013e2:	d14e      	bne.n	8001482 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 80013e4:	2900      	cmp	r1, #0
 80013e6:	d049      	beq.n	800147c <HAL_UART_Transmit+0xac>
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d047      	beq.n	800147c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80013ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d046      	beq.n	8001482 <HAL_UART_Transmit+0xb2>
 80013f4:	2301      	movs	r3, #1
 80013f6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013fe:	2321      	movs	r3, #33	; 0x21
 8001400:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001404:	f7fe fee4 	bl	80001d0 <HAL_GetTick>
 8001408:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800140a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800140e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001412:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001414:	b29b      	uxth	r3, r3
 8001416:	b96b      	cbnz	r3, 8001434 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4632      	mov	r2, r6
 800141c:	2140      	movs	r1, #64	; 0x40
 800141e:	4620      	mov	r0, r4
 8001420:	f7ff ff80 	bl	8001324 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001424:	b9a8      	cbnz	r0, 8001452 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001426:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001428:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 800142c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001434:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001436:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001438:	3b01      	subs	r3, #1
 800143a:	b29b      	uxth	r3, r3
 800143c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800143e:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001440:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001446:	4620      	mov	r0, r4
 8001448:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800144a:	d10e      	bne.n	800146a <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800144c:	f7ff ff6a 	bl	8001324 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001450:	b110      	cbz	r0, 8001458 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001452:	2003      	movs	r0, #3
 8001454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001458:	882b      	ldrh	r3, [r5, #0]
 800145a:	6822      	ldr	r2, [r4, #0]
 800145c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001460:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001462:	6923      	ldr	r3, [r4, #16]
 8001464:	b943      	cbnz	r3, 8001478 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8001466:	3502      	adds	r5, #2
 8001468:	e7d3      	b.n	8001412 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800146a:	f7ff ff5b 	bl	8001324 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800146e:	2800      	cmp	r0, #0
 8001470:	d1ef      	bne.n	8001452 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	782a      	ldrb	r2, [r5, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	3501      	adds	r5, #1
 800147a:	e7ca      	b.n	8001412 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800147c:	2001      	movs	r0, #1
 800147e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001482:	2002      	movs	r0, #2
}
 8001484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001488 <display_update2>:
#include "display_prints.h"
#include <stdio.h>


void display_update2(u8g2_t *p_u8g2, struct display_screen1_data *screen_data, struct display_screen1_error_message *screen_error) {
 8001488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	4604      	mov	r4, r0
 8001490:	460d      	mov	r5, r1
 8001492:	4690      	mov	r8, r2
	char tmp_string[24];
	u8g2_FirstPage(p_u8g2);
 8001494:	f000 fd82 	bl	8001f9c <u8g2_FirstPage>

	do {
		/* boiler temperature */
		u8g2_SetFont(p_u8g2, u8g2_font_courB10_tf);
		sprintf(tmp_string, "Boiler:%s%sC", screen_data->str_boiler_value, "\xb0");
 8001498:	4f3b      	ldr	r7, [pc, #236]	; (8001588 <display_update2+0x100>)
		u8g2_DrawStr(p_u8g2, 0, 10, tmp_string);

		u8g2_SetFont(p_u8g2, u8g2_font_courR08_tf);
		/* house 1 temperature */
		sprintf(tmp_string, "t:%s %sC", screen_data->str_tempreture_value_1, "\xb0");
 800149a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80015a8 <display_update2+0x120>
		u8g2_SetFont(p_u8g2, u8g2_font_courB10_tf);
 800149e:	493b      	ldr	r1, [pc, #236]	; (800158c <display_update2+0x104>)
 80014a0:	4620      	mov	r0, r4
 80014a2:	f001 f831 	bl	8002508 <u8g2_SetFont>
		sprintf(tmp_string, "Boiler:%s%sC", screen_data->str_boiler_value, "\xb0");
 80014a6:	463b      	mov	r3, r7
 80014a8:	462a      	mov	r2, r5
 80014aa:	4939      	ldr	r1, [pc, #228]	; (8001590 <display_update2+0x108>)
 80014ac:	4668      	mov	r0, sp
 80014ae:	f001 fc6f 	bl	8002d90 <siprintf>
		u8g2_DrawStr(p_u8g2, 0, 10, tmp_string);
 80014b2:	466b      	mov	r3, sp
 80014b4:	220a      	movs	r2, #10
 80014b6:	2100      	movs	r1, #0
 80014b8:	4620      	mov	r0, r4
 80014ba:	f000 ffeb 	bl	8002494 <u8g2_DrawStr>
		sprintf(tmp_string, "t:%s %sC", screen_data->str_tempreture_value_1, "\xb0");
 80014be:	f105 060a 	add.w	r6, r5, #10
		u8g2_SetFont(p_u8g2, u8g2_font_courR08_tf);
 80014c2:	4934      	ldr	r1, [pc, #208]	; (8001594 <display_update2+0x10c>)
 80014c4:	4620      	mov	r0, r4
 80014c6:	f001 f81f 	bl	8002508 <u8g2_SetFont>
		sprintf(tmp_string, "t:%s %sC", screen_data->str_tempreture_value_1, "\xb0");
 80014ca:	463b      	mov	r3, r7
 80014cc:	4632      	mov	r2, r6
 80014ce:	4649      	mov	r1, r9
 80014d0:	4668      	mov	r0, sp
 80014d2:	f001 fc5d 	bl	8002d90 <siprintf>
		u8g2_DrawStr(p_u8g2, 0, 25, tmp_string);

		/* house 1 humidity */
		sprintf(tmp_string, "h:%s %%", screen_data->str_humidity_value_2);
 80014d6:	f105 0a28 	add.w	sl, r5, #40	; 0x28
		u8g2_DrawStr(p_u8g2, 0, 25, tmp_string);
 80014da:	466b      	mov	r3, sp
 80014dc:	2219      	movs	r2, #25
 80014de:	2100      	movs	r1, #0
 80014e0:	4620      	mov	r0, r4
 80014e2:	f000 ffd7 	bl	8002494 <u8g2_DrawStr>
		sprintf(tmp_string, "h:%s %%", screen_data->str_humidity_value_2);
 80014e6:	4652      	mov	r2, sl
 80014e8:	492b      	ldr	r1, [pc, #172]	; (8001598 <display_update2+0x110>)
 80014ea:	4668      	mov	r0, sp
 80014ec:	f001 fc50 	bl	8002d90 <siprintf>
		u8g2_DrawStr(p_u8g2, 0, 35, tmp_string);
 80014f0:	466b      	mov	r3, sp
 80014f2:	2223      	movs	r2, #35	; 0x23
 80014f4:	2100      	movs	r1, #0
 80014f6:	4620      	mov	r0, r4
 80014f8:	f000 ffcc 	bl	8002494 <u8g2_DrawStr>


		/* house 2 temperature */
		sprintf(tmp_string, "t:%s %sC", screen_data->str_tempreture_value_1, "\xb0");
 80014fc:	463b      	mov	r3, r7
 80014fe:	4632      	mov	r2, r6
 8001500:	4649      	mov	r1, r9
 8001502:	4668      	mov	r0, sp
 8001504:	f001 fc44 	bl	8002d90 <siprintf>
		u8g2_DrawStr(p_u8g2, 64, 25, tmp_string);
 8001508:	466b      	mov	r3, sp
 800150a:	2219      	movs	r2, #25
 800150c:	2140      	movs	r1, #64	; 0x40
 800150e:	4620      	mov	r0, r4
 8001510:	f000 ffc0 	bl	8002494 <u8g2_DrawStr>

		/* house 2 humidity */
		sprintf(tmp_string, "h:%s %%", screen_data->str_humidity_value_2);
 8001514:	4652      	mov	r2, sl
 8001516:	4920      	ldr	r1, [pc, #128]	; (8001598 <display_update2+0x110>)
 8001518:	4668      	mov	r0, sp
 800151a:	f001 fc39 	bl	8002d90 <siprintf>
		u8g2_DrawStr(p_u8g2, 64, 35, tmp_string);
 800151e:	466b      	mov	r3, sp
 8001520:	2223      	movs	r2, #35	; 0x23
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	4620      	mov	r0, r4
 8001526:	f000 ffb5 	bl	8002494 <u8g2_DrawStr>

		/* pump status 1 */
		sprintf(tmp_string, "pump1:%s", screen_data->str_pump_status_1);
 800152a:	f105 0232 	add.w	r2, r5, #50	; 0x32
 800152e:	491b      	ldr	r1, [pc, #108]	; (800159c <display_update2+0x114>)
 8001530:	4668      	mov	r0, sp
 8001532:	f001 fc2d 	bl	8002d90 <siprintf>
		u8g2_DrawStr(p_u8g2, 0, 45, tmp_string);
 8001536:	466b      	mov	r3, sp
 8001538:	222d      	movs	r2, #45	; 0x2d
 800153a:	2100      	movs	r1, #0
 800153c:	4620      	mov	r0, r4
 800153e:	f000 ffa9 	bl	8002494 <u8g2_DrawStr>

		/* pump status 1 */
		sprintf(tmp_string, "pump2:%s", screen_data->str_pump_status_2);
 8001542:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 8001546:	4916      	ldr	r1, [pc, #88]	; (80015a0 <display_update2+0x118>)
 8001548:	4668      	mov	r0, sp
 800154a:	f001 fc21 	bl	8002d90 <siprintf>
		u8g2_DrawStr(p_u8g2, 64, 45, tmp_string);
 800154e:	466b      	mov	r3, sp
 8001550:	222d      	movs	r2, #45	; 0x2d
 8001552:	2140      	movs	r1, #64	; 0x40
 8001554:	4620      	mov	r0, r4
 8001556:	f000 ff9d 	bl	8002494 <u8g2_DrawStr>

		if (screen_error->error_flag != ERROR_FLAG_OFF) {
 800155a:	f898 3018 	ldrb.w	r3, [r8, #24]
 800155e:	b153      	cbz	r3, 8001576 <display_update2+0xee>
			/* pump status 1 */
			sprintf(tmp_string, "Error:%s", screen_error->str_error);
 8001560:	4642      	mov	r2, r8
 8001562:	4910      	ldr	r1, [pc, #64]	; (80015a4 <display_update2+0x11c>)
 8001564:	4668      	mov	r0, sp
 8001566:	f001 fc13 	bl	8002d90 <siprintf>
			u8g2_DrawStr(p_u8g2, 0, 64, tmp_string);
 800156a:	466b      	mov	r3, sp
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	2100      	movs	r1, #0
 8001570:	4620      	mov	r0, r4
 8001572:	f000 ff8f 	bl	8002494 <u8g2_DrawStr>
		}

	 } while (u8g2_NextPage(p_u8g2));
 8001576:	4620      	mov	r0, r4
 8001578:	f000 fd1d 	bl	8001fb6 <u8g2_NextPage>
 800157c:	2800      	cmp	r0, #0
 800157e:	d18e      	bne.n	800149e <display_update2+0x16>
}
 8001580:	b006      	add	sp, #24
 8001582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001586:	bf00      	nop
 8001588:	08003cb8 	.word	0x08003cb8
 800158c:	08003d41 	.word	0x08003d41
 8001590:	08003cba 	.word	0x08003cba
 8001594:	080048d3 	.word	0x080048d3
 8001598:	08003cd0 	.word	0x08003cd0
 800159c:	08003cd8 	.word	0x08003cd8
 80015a0:	08003ce1 	.word	0x08003ce1
 80015a4:	08003cea 	.word	0x08003cea
 80015a8:	08003cc7 	.word	0x08003cc7

080015ac <u8x8_gpio_and_delay_8080>:
  return 1;
}

uint8_t u8x8_gpio_and_delay_8080(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  switch(msg)
 80015ac:	3928      	subs	r1, #40	; 0x28
{
 80015ae:	b508      	push	{r3, lr}
  switch(msg)
 80015b0:	2923      	cmp	r1, #35	; 0x23
 80015b2:	d822      	bhi.n	80015fa <u8x8_gpio_and_delay_8080+0x4e>
 80015b4:	e8df f001 	tbb	[pc, r1]
 80015b8:	21212312 	.word	0x21212312
 80015bc:	21212121 	.word	0x21212121
 80015c0:	21212121 	.word	0x21212121
 80015c4:	21212121 	.word	0x21212121
 80015c8:	21212121 	.word	0x21212121
 80015cc:	21212121 	.word	0x21212121
 80015d0:	2e2c2a25 	.word	0x2e2c2a25
 80015d4:	36343230 	.word	0x36343230
 80015d8:	413e3b38 	.word	0x413e3b38
  {
    case U8X8_MSG_GPIO_AND_DELAY_INIT:	// called once during init phase of u8g2/u8x8
    	  HAL_GPIO_WritePin(DISPLAY_RD_GPIO_Port, DISPLAY_RD_Pin, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e2:	4817      	ldr	r0, [pc, #92]	; (8001640 <u8x8_gpio_and_delay_8080+0x94>)
 80015e4:	f7ff f9fa 	bl	80009dc <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
 80015e8:	4815      	ldr	r0, [pc, #84]	; (8001640 <u8x8_gpio_and_delay_8080+0x94>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f0:	f7ff f9f4 	bl	80009dc <HAL_GPIO_WritePin>
    	  HAL_Delay(1);
 80015f4:	2001      	movs	r0, #1
    case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
      break;
    case U8X8_MSG_DELAY_10MICRO:		// delay arg_int * 10 micro seconds
      break;
    case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
    	HAL_Delay(arg_int);
 80015f6:	f7fe fdf1 	bl	80001dc <HAL_Delay>
    default:
//      u8x8_SetGPIOResult(u8x8, 1);			// default return value
      break;
  }
  return 1;
}
 80015fa:	2001      	movs	r0, #1
 80015fc:	bd08      	pop	{r3, pc}
    	HAL_Delay(arg_int);
 80015fe:	4610      	mov	r0, r2
 8001600:	e7f9      	b.n	80015f6 <u8x8_gpio_and_delay_8080+0x4a>
    	HAL_GPIO_WritePin(DISPLAY_D0_GPIO_Port, DISPLAY_D0_Pin, arg_int);
 8001602:	2101      	movs	r1, #1
    	HAL_GPIO_WritePin(DISPLAY_RESET_GPIO_Port, DISPLAY_RESET_Pin, arg_int);
 8001604:	480e      	ldr	r0, [pc, #56]	; (8001640 <u8x8_gpio_and_delay_8080+0x94>)
 8001606:	f7ff f9e9 	bl	80009dc <HAL_GPIO_WritePin>
    	break;
 800160a:	e7f6      	b.n	80015fa <u8x8_gpio_and_delay_8080+0x4e>
    	HAL_GPIO_WritePin(DISPLAY_D1_GPIO_Port, DISPLAY_D1_Pin, arg_int);
 800160c:	2102      	movs	r1, #2
 800160e:	e7f9      	b.n	8001604 <u8x8_gpio_and_delay_8080+0x58>
    	HAL_GPIO_WritePin(DISPLAY_D2_GPIO_Port, DISPLAY_D2_Pin, arg_int);
 8001610:	2104      	movs	r1, #4
 8001612:	e7f7      	b.n	8001604 <u8x8_gpio_and_delay_8080+0x58>
    	HAL_GPIO_WritePin(DISPLAY_D3_GPIO_Port, DISPLAY_D3_Pin, arg_int);
 8001614:	2108      	movs	r1, #8
 8001616:	e7f5      	b.n	8001604 <u8x8_gpio_and_delay_8080+0x58>
    	HAL_GPIO_WritePin(DISPLAY_D4_GPIO_Port, DISPLAY_D4_Pin, arg_int);
 8001618:	2110      	movs	r1, #16
 800161a:	e7f3      	b.n	8001604 <u8x8_gpio_and_delay_8080+0x58>
    	HAL_GPIO_WritePin(DISPLAY_D5_GPIO_Port, DISPLAY_D5_Pin, arg_int);
 800161c:	2120      	movs	r1, #32
 800161e:	e7f1      	b.n	8001604 <u8x8_gpio_and_delay_8080+0x58>
    	HAL_GPIO_WritePin(DISPLAY_D6_GPIO_Port, DISPLAY_D6_Pin, arg_int);
 8001620:	2140      	movs	r1, #64	; 0x40
 8001622:	e7ef      	b.n	8001604 <u8x8_gpio_and_delay_8080+0x58>
    	HAL_GPIO_WritePin(DISPLAY_D7_GPIO_Port, DISPLAY_D7_Pin, arg_int);
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	e7ed      	b.n	8001604 <u8x8_gpio_and_delay_8080+0x58>
    	HAL_GPIO_WritePin(DISPLAY_WR_GPIO_Port, DISPLAY_WR_Pin, arg_int);
 8001628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800162c:	e7ea      	b.n	8001604 <u8x8_gpio_and_delay_8080+0x58>
    	HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, arg_int);
 800162e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001632:	e7e7      	b.n	8001604 <u8x8_gpio_and_delay_8080+0x58>
    	HAL_GPIO_WritePin(DISPLAY_A0_GPIO_Port, DISPLAY_A0_Pin, arg_int);
 8001634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001638:	e7e4      	b.n	8001604 <u8x8_gpio_and_delay_8080+0x58>
    	HAL_GPIO_WritePin(DISPLAY_RESET_GPIO_Port, DISPLAY_RESET_Pin, arg_int);
 800163a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800163e:	e7e1      	b.n	8001604 <u8x8_gpio_and_delay_8080+0x58>
 8001640:	40010c00 	.word	0x40010c00

08001644 <_write>:
{
 8001644:	b510      	push	{r4, lr}
 8001646:	4614      	mov	r4, r2
 HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800164c:	b292      	uxth	r2, r2
 800164e:	4802      	ldr	r0, [pc, #8]	; (8001658 <_write+0x14>)
 8001650:	f7ff febe 	bl	80013d0 <HAL_UART_Transmit>
}
 8001654:	4620      	mov	r0, r4
 8001656:	bd10      	pop	{r4, pc}
 8001658:	20000220 	.word	0x20000220

0800165c <send_8080_data_delay_100u>:
	micro_delay_counter = delay+1;
 800165c:	3001      	adds	r0, #1
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <send_8080_data_delay_100u+0x14>)
 8001660:	b280      	uxth	r0, r0
 8001662:	8018      	strh	r0, [r3, #0]
	while(micro_delay_counter > 0) {
 8001664:	881a      	ldrh	r2, [r3, #0]
 8001666:	b292      	uxth	r2, r2
 8001668:	2a00      	cmp	r2, #0
 800166a:	d1fb      	bne.n	8001664 <send_8080_data_delay_100u+0x8>
}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000090 	.word	0x20000090

08001674 <send_8080_data>:
void send_8080_data(uint8_t arg_int, void *arg_ptr) {
 8001674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001676:	3801      	subs	r0, #1
		HAL_GPIO_WritePin(DISPLAY_D0_GPIO_Port, DISPLAY_D0_Pin, byte & 0x01);
 8001678:	4c25      	ldr	r4, [pc, #148]	; (8001710 <send_8080_data+0x9c>)
 800167a:	1e4f      	subs	r7, r1, #1
 800167c:	180e      	adds	r6, r1, r0
	for (uint8_t i = 0; i < quantity; i++) {
 800167e:	42b7      	cmp	r7, r6
 8001680:	d100      	bne.n	8001684 <send_8080_data+0x10>
}
 8001682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint8_t byte = data_buffer[i];
 8001684:	f817 5f01 	ldrb.w	r5, [r7, #1]!
		HAL_GPIO_WritePin(DISPLAY_D0_GPIO_Port, DISPLAY_D0_Pin, byte & 0x01);
 8001688:	4620      	mov	r0, r4
 800168a:	f005 0201 	and.w	r2, r5, #1
 800168e:	2101      	movs	r1, #1
 8001690:	f7ff f9a4 	bl	80009dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_D1_GPIO_Port, DISPLAY_D1_Pin, byte & 0x02);
 8001694:	f005 0202 	and.w	r2, r5, #2
 8001698:	4620      	mov	r0, r4
 800169a:	2102      	movs	r1, #2
 800169c:	f7ff f99e 	bl	80009dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_D2_GPIO_Port, DISPLAY_D2_Pin, byte & 0x04);
 80016a0:	f005 0204 	and.w	r2, r5, #4
 80016a4:	4620      	mov	r0, r4
 80016a6:	2104      	movs	r1, #4
 80016a8:	f7ff f998 	bl	80009dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_D3_GPIO_Port, DISPLAY_D3_Pin, byte & 0x08);
 80016ac:	f005 0208 	and.w	r2, r5, #8
 80016b0:	4620      	mov	r0, r4
 80016b2:	2108      	movs	r1, #8
 80016b4:	f7ff f992 	bl	80009dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_D4_GPIO_Port, DISPLAY_D4_Pin, byte & 0x10);
 80016b8:	f005 0210 	and.w	r2, r5, #16
 80016bc:	4620      	mov	r0, r4
 80016be:	2110      	movs	r1, #16
 80016c0:	f7ff f98c 	bl	80009dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_D5_GPIO_Port, DISPLAY_D5_Pin, byte & 0x20);
 80016c4:	f005 0220 	and.w	r2, r5, #32
 80016c8:	4620      	mov	r0, r4
 80016ca:	2120      	movs	r1, #32
 80016cc:	f7ff f986 	bl	80009dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_D6_GPIO_Port, DISPLAY_D6_Pin, byte & 0x40);
 80016d0:	f005 0240 	and.w	r2, r5, #64	; 0x40
 80016d4:	4620      	mov	r0, r4
 80016d6:	2140      	movs	r1, #64	; 0x40
 80016d8:	f7ff f980 	bl	80009dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_D7_GPIO_Port, DISPLAY_D7_Pin, byte & 0x80);
 80016dc:	f005 0280 	and.w	r2, r5, #128	; 0x80
 80016e0:	4620      	mov	r0, r4
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	f7ff f97a 	bl	80009dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_WR_GPIO_Port, DISPLAY_WR_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff f974 	bl	80009dc <HAL_GPIO_WritePin>
		send_8080_data_delay_100u(1);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff ffb1 	bl	800165c <send_8080_data_delay_100u>
		HAL_GPIO_WritePin(DISPLAY_WR_GPIO_Port, DISPLAY_WR_Pin, GPIO_PIN_SET);
 80016fa:	4620      	mov	r0, r4
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001702:	f7ff f96b 	bl	80009dc <HAL_GPIO_WritePin>
		send_8080_data_delay_100u(1);
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff ffa8 	bl	800165c <send_8080_data_delay_100u>
 800170c:	e7b7      	b.n	800167e <send_8080_data+0xa>
 800170e:	bf00      	nop
 8001710:	40010c00 	.word	0x40010c00

08001714 <u8x8_byte_8080>:
  switch(msg)
 8001714:	3914      	subs	r1, #20
{
 8001716:	b508      	push	{r3, lr}
  switch(msg)
 8001718:	290c      	cmp	r1, #12
 800171a:	d81a      	bhi.n	8001752 <u8x8_byte_8080+0x3e>
 800171c:	e8df f001 	tbb	[pc, r1]
 8001720:	0719190b 	.word	0x0719190b
 8001724:	19191713 	.word	0x19191713
 8001728:	19191919 	.word	0x19191919
 800172c:	0d          	.byte	0x0d
 800172d:	00          	.byte	0x00
    	send_8080_data(arg_int, arg_ptr);
 800172e:	4619      	mov	r1, r3
 8001730:	4610      	mov	r0, r2
 8001732:	f7ff ff9f 	bl	8001674 <send_8080_data>
  return 1;
 8001736:	2001      	movs	r0, #1
      break;
 8001738:	bd08      	pop	{r3, pc}
    	HAL_GPIO_WritePin(DISPLAY_A0_GPIO_Port, DISPLAY_A0_Pin, arg_int);
 800173a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    	HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <u8x8_byte_8080+0x44>)
 8001740:	f7ff f94c 	bl	80009dc <HAL_GPIO_WritePin>
 8001744:	e7f7      	b.n	8001736 <u8x8_byte_8080+0x22>
    	HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
    	HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
 8001748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800174c:	e7f7      	b.n	800173e <u8x8_byte_8080+0x2a>
 800174e:	2201      	movs	r2, #1
 8001750:	e7fa      	b.n	8001748 <u8x8_byte_8080+0x34>
      return 0;
 8001752:	2000      	movs	r0, #0
}
 8001754:	bd08      	pop	{r3, pc}
 8001756:	bf00      	nop
 8001758:	40010c00 	.word	0x40010c00

0800175c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800175c:	b530      	push	{r4, r5, lr}
 800175e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001760:	2228      	movs	r2, #40	; 0x28
 8001762:	2100      	movs	r1, #0
 8001764:	a806      	add	r0, sp, #24
 8001766:	f001 faa7 	bl	8002cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176a:	2214      	movs	r2, #20
 800176c:	2100      	movs	r1, #0
 800176e:	a801      	add	r0, sp, #4
 8001770:	f001 faa2 	bl	8002cb8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001774:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001776:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001778:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800177a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 800177c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001780:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8001782:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001784:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001786:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001788:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178a:	f7ff f933 	bl	80009f4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001790:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001794:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001796:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001798:	4629      	mov	r1, r5
 800179a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017a0:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017a4:	f7ff fb00 	bl	8000da8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80017a8:	b011      	add	sp, #68	; 0x44
 80017aa:	bd30      	pop	{r4, r5, pc}

080017ac <main>:
{
 80017ac:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80017b0:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80017b2:	f7fe fcef 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80017b6:	f7ff ffd1 	bl	800175c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	2210      	movs	r2, #16
 80017bc:	2100      	movs	r1, #0
 80017be:	a805      	add	r0, sp, #20
 80017c0:	f001 fa7a 	bl	8002cb8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c4:	4bb6      	ldr	r3, [pc, #728]	; (8001aa0 <main+0x2f4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017cc:	48b5      	ldr	r0, [pc, #724]	; (8001aa4 <main+0x2f8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	f042 0210 	orr.w	r2, r2, #16
 80017d2:	619a      	str	r2, [r3, #24]
 80017d4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(CAN_ENABLE_GPIO_Port, CAN_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d8:	f002 0210 	and.w	r2, r2, #16
 80017dc:	9200      	str	r2, [sp, #0]
 80017de:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	f042 0204 	orr.w	r2, r2, #4
 80017ea:	619a      	str	r2, [r3, #24]
 80017ec:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	f002 0204 	and.w	r2, r2, #4
 80017f6:	9201      	str	r2, [sp, #4]
 80017f8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : CAN_ENABLE_Pin */
  GPIO_InitStruct.Pin = CAN_ENABLE_Pin;
 80017fc:	f44f 7b80 	mov.w	fp, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	f042 0208 	orr.w	r2, r2, #8
 8001804:	619a      	str	r2, [r3, #24]
 8001806:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001812:	f7ff f8e3 	bl	80009dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DISPLAY_D0_Pin|DISPLAY_D1_Pin|DISPLAY_D2_Pin|BACKLIGHT_Pin
 8001816:	2200      	movs	r2, #0
 8001818:	f24f 31ff 	movw	r1, #62463	; 0xf3ff
 800181c:	48a2      	ldr	r0, [pc, #648]	; (8001aa8 <main+0x2fc>)
 800181e:	f7ff f8dd 	bl	80009dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_ENABLE_GPIO_Port, CAN_ENABLE_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001828:	48a0      	ldr	r0, [pc, #640]	; (8001aac <main+0x300>)
 800182a:	f7ff f8d7 	bl	80009dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 800182e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001832:	a905      	add	r1, sp, #20
 8001834:	489b      	ldr	r0, [pc, #620]	; (8001aa4 <main+0x2f8>)
  GPIO_InitStruct.Pin = LED_Pin;
 8001836:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001842:	f7fe ffe9 	bl	8000818 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001846:	230f      	movs	r3, #15
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	a905      	add	r1, sp, #20
 800184a:	4898      	ldr	r0, [pc, #608]	; (8001aac <main+0x300>)
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800184c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f7fe ffe1 	bl	8000818 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DISPLAY_D0_Pin|DISPLAY_D1_Pin|DISPLAY_D2_Pin|BACKLIGHT_Pin
 8001856:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	a905      	add	r1, sp, #20
 800185c:	4892      	ldr	r0, [pc, #584]	; (8001aa8 <main+0x2fc>)
  GPIO_InitStruct.Pin = DISPLAY_D0_Pin|DISPLAY_D1_Pin|DISPLAY_D2_Pin|BACKLIGHT_Pin
 800185e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f7fe ffd5 	bl	8000818 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CAN_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800186e:	a905      	add	r1, sp, #20
 8001870:	488e      	ldr	r0, [pc, #568]	; (8001aac <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = CAN_ENABLE_Pin;
 8001874:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001878:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(CAN_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001880:	f7fe ffca 	bl	8000818 <HAL_GPIO_Init>
  hcan.Init.Prescaler = 5;
 8001884:	2305      	movs	r3, #5
  hcan.Instance = CAN1;
 8001886:	4d8a      	ldr	r5, [pc, #552]	; (8001ab0 <main+0x304>)
  hcan.Init.Prescaler = 5;
 8001888:	4a8a      	ldr	r2, [pc, #552]	; (8001ab4 <main+0x308>)
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800188a:	4628      	mov	r0, r5
  hcan.Init.Prescaler = 5;
 800188c:	e885 000c 	stmia.w	r5, {r2, r3}
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001890:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001894:	60ac      	str	r4, [r5, #8]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001896:	612b      	str	r3, [r5, #16]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001898:	60ec      	str	r4, [r5, #12]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800189a:	616c      	str	r4, [r5, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800189c:	762c      	strb	r4, [r5, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800189e:	766c      	strb	r4, [r5, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80018a0:	76ac      	strb	r4, [r5, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80018a2:	76ec      	strb	r4, [r5, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80018a4:	772c      	strb	r4, [r5, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80018a6:	776c      	strb	r4, [r5, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80018a8:	f7fe fcaa 	bl	8000200 <HAL_CAN_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ac:	2210      	movs	r2, #16
 80018ae:	4621      	mov	r1, r4
 80018b0:	a805      	add	r0, sp, #20
 80018b2:	f001 fa01 	bl	8002cb8 <memset>
  htim1.Init.Prescaler = 1440;
 80018b6:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
  htim1.Instance = TIM1;
 80018ba:	4e7f      	ldr	r6, [pc, #508]	; (8001ab8 <main+0x30c>)
  htim1.Init.Prescaler = 1440;
 80018bc:	497f      	ldr	r1, [pc, #508]	; (8001abc <main+0x310>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018be:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  htim1.Init.Prescaler = 1440;
 80018c2:	e886 000a 	stmia.w	r6, {r1, r3}
  htim1.Init.Period = 50000;
 80018c6:	f24c 3350 	movw	r3, #50000	; 0xc350
  huart3.Init.BaudRate = 115200;
 80018ca:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ce:	4630      	mov	r0, r6
  htim1.Init.Period = 50000;
 80018d0:	60f3      	str	r3, [r6, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d2:	60b4      	str	r4, [r6, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d4:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 80018d6:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d8:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018da:	9403      	str	r4, [sp, #12]
 80018dc:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018de:	f7ff fc0f 	bl	8001100 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018e2:	a905      	add	r1, sp, #20
 80018e4:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e6:	f8cd a014 	str.w	sl, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018ea:	f7ff fc2d 	bl	8001148 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ee:	a903      	add	r1, sp, #12
 80018f0:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f2:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f6:	f7ff fcbb 	bl	8001270 <HAL_TIMEx_MasterConfigSynchronization>
  huart3.Instance = USART3;
 80018fa:	4871      	ldr	r0, [pc, #452]	; (8001ac0 <main+0x314>)
  huart3.Init.BaudRate = 115200;
 80018fc:	4b71      	ldr	r3, [pc, #452]	; (8001ac4 <main+0x318>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8001900:	e880 0088 	stmia.w	r0, {r3, r7}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001904:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001906:	60c4      	str	r4, [r0, #12]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001908:	6143      	str	r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 800190a:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190c:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800190e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001910:	f7ff fd30 	bl	8001374 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001914:	2210      	movs	r2, #16
 8001916:	4621      	mov	r1, r4
 8001918:	a805      	add	r0, sp, #20
 800191a:	f001 f9cd 	bl	8002cb8 <memset>
  htim2.Init.Prescaler = 40;
 800191e:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8001922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8001926:	4f68      	ldr	r7, [pc, #416]	; (8001ac8 <main+0x31c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	9403      	str	r4, [sp, #12]
  htim2.Init.Prescaler = 40;
 800192a:	e887 4008 	stmia.w	r7, {r3, lr}
  htim2.Init.Period = 10;
 800192e:	230a      	movs	r3, #10
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001930:	4638      	mov	r0, r7
  htim2.Init.Period = 10;
 8001932:	60fb      	str	r3, [r7, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	9404      	str	r4, [sp, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	60bc      	str	r4, [r7, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	613c      	str	r4, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800193c:	f7ff fbe0 	bl	8001100 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001940:	a905      	add	r1, sp, #20
 8001942:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001944:	f8cd a014 	str.w	sl, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001948:	f7ff fbfe 	bl	8001148 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800194c:	a903      	add	r1, sp, #12
 800194e:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001952:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001954:	f7ff fc8c 	bl	8001270 <HAL_TIMEx_MasterConfigSynchronization>
  sFilterConfig.SlaveStartFilterBank = 14;
 8001958:	230e      	movs	r3, #14
  sFilterConfig.FilterBank = 0;
 800195a:	495c      	ldr	r1, [pc, #368]	; (8001acc <main+0x320>)
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800195c:	4628      	mov	r0, r5
  sFilterConfig.SlaveStartFilterBank = 14;
 800195e:	624b      	str	r3, [r1, #36]	; 0x24
  sFilterConfig.FilterBank = 0;
 8001960:	614c      	str	r4, [r1, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001962:	618c      	str	r4, [r1, #24]
  sFilterConfig.FilterIdHigh = 0x0000;
 8001964:	600c      	str	r4, [r1, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8001966:	604c      	str	r4, [r1, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001968:	608c      	str	r4, [r1, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800196a:	60cc      	str	r4, [r1, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800196c:	610c      	str	r4, [r1, #16]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800196e:	f8c1 801c 	str.w	r8, [r1, #28]
  sFilterConfig.FilterActivation = ENABLE;
 8001972:	f8c1 8020 	str.w	r8, [r1, #32]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001976:	f7fe fcbe 	bl	80002f6 <HAL_CAN_ConfigFilter>
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 800197a:	4628      	mov	r0, r5
 800197c:	f7fe fd27 	bl	80003ce <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001980:	2103      	movs	r1, #3
 8001982:	4628      	mov	r0, r5
 8001984:	f7fe fdc4 	bl	8000510 <HAL_CAN_ActivateNotification>
  TxHeader.StdId = BOILER_TEMP_CAN_ID;
 8001988:	22d0      	movs	r2, #208	; 0xd0
 800198a:	4b51      	ldr	r3, [pc, #324]	; (8001ad0 <main+0x324>)
  TxData[2] = 3;
 800198c:	2103      	movs	r1, #3
  TxHeader.ExtId = 0x00;
 800198e:	e883 0014 	stmia.w	r3, {r2, r4}
  TxHeader.DLC = 4;
 8001992:	2204      	movs	r2, #4
  TxHeader.RTR = CAN_RTR_DATA;
 8001994:	60dc      	str	r4, [r3, #12]
  TxHeader.DLC = 4;
 8001996:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8001998:	609c      	str	r4, [r3, #8]
  TxHeader.TransmitGlobalTime = DISABLE;
 800199a:	751c      	strb	r4, [r3, #20]
  TxData[0] = 1;
 800199c:	4b4d      	ldr	r3, [pc, #308]	; (8001ad4 <main+0x328>)
  HAL_TIM_Base_Start_IT(&htim1);
 800199e:	4630      	mov	r0, r6
  TxData[2] = 3;
 80019a0:	7099      	strb	r1, [r3, #2]
  TxData[3] = 4;
 80019a2:	70da      	strb	r2, [r3, #3]
  TxData[0] = 1;
 80019a4:	f883 8000 	strb.w	r8, [r3]
  TxData[1] = 2;
 80019a8:	f883 9001 	strb.w	r9, [r3, #1]
  HAL_TIM_Base_Start_IT(&htim1);
 80019ac:	f7ff faba 	bl	8000f24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80019b0:	4638      	mov	r0, r7
 80019b2:	f7ff fab7 	bl	8000f24 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin, GPIO_PIN_SET);
 80019b6:	4642      	mov	r2, r8
 80019b8:	4651      	mov	r1, sl
 80019ba:	483b      	ldr	r0, [pc, #236]	; (8001aa8 <main+0x2fc>)
 80019bc:	f7ff f80e 	bl	80009dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DISPLAY_RD_GPIO_Port, DISPLAY_RD_Pin, GPIO_PIN_SET);
 80019c0:	4642      	mov	r2, r8
 80019c2:	4659      	mov	r1, fp
 80019c4:	4838      	ldr	r0, [pc, #224]	; (8001aa8 <main+0x2fc>)
 80019c6:	f7ff f809 	bl	80009dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
 80019ca:	4642      	mov	r2, r8
 80019cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d0:	4835      	ldr	r0, [pc, #212]	; (8001aa8 <main+0x2fc>)
 80019d2:	f7ff f803 	bl	80009dc <HAL_GPIO_WritePin>
    u8g2_Setup_st7565_ea_dogm128_1(&u8g2, U8G2_R2, u8x8_byte_8080, u8x8_gpio_and_delay_8080);
 80019d6:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <main+0x32c>)
 80019d8:	4a40      	ldr	r2, [pc, #256]	; (8001adc <main+0x330>)
 80019da:	4941      	ldr	r1, [pc, #260]	; (8001ae0 <main+0x334>)
 80019dc:	4841      	ldr	r0, [pc, #260]	; (8001ae4 <main+0x338>)
 80019de:	f000 fb0f 	bl	8002000 <u8g2_Setup_st7565_ea_dogm128_1>
  u8g2_InitDisplay(&u8g2);
 80019e2:	4840      	ldr	r0, [pc, #256]	; (8001ae4 <main+0x338>)
 80019e4:	f001 f8ce 	bl	8002b84 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 80019e8:	4621      	mov	r1, r4
 80019ea:	483e      	ldr	r0, [pc, #248]	; (8001ae4 <main+0x338>)
 80019ec:	f001 f8d2 	bl	8002b94 <u8x8_SetPowerSave>
  u8g2_SetContrast(&u8g2, 95);
 80019f0:	215f      	movs	r1, #95	; 0x5f
 80019f2:	483c      	ldr	r0, [pc, #240]	; (8001ae4 <main+0x338>)
 80019f4:	f001 f8d6 	bl	8002ba4 <u8x8_SetContrast>
  u8g2_FirstPage(&u8g2);
 80019f8:	483a      	ldr	r0, [pc, #232]	; (8001ae4 <main+0x338>)
 80019fa:	f000 facf 	bl	8001f9c <u8g2_FirstPage>
	    u8g2_SetFont(&u8g2, u8g2_font_luBS08_tf);
 80019fe:	4e3a      	ldr	r6, [pc, #232]	; (8001ae8 <main+0x33c>)
 8001a00:	4c38      	ldr	r4, [pc, #224]	; (8001ae4 <main+0x338>)
		u8g2_DrawStr(&u8g2, 0, 14, "Hello world ");
 8001a02:	4d3a      	ldr	r5, [pc, #232]	; (8001aec <main+0x340>)
	    u8g2_SetFont(&u8g2, u8g2_font_luBS08_tf);
 8001a04:	4631      	mov	r1, r6
 8001a06:	4620      	mov	r0, r4
 8001a08:	f000 fd7e 	bl	8002508 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 0, 14, "Hello world ");
 8001a0c:	220e      	movs	r2, #14
 8001a0e:	462b      	mov	r3, r5
 8001a10:	2100      	movs	r1, #0
 8001a12:	4620      	mov	r0, r4
 8001a14:	f000 fd3e 	bl	8002494 <u8g2_DrawStr>
	 } while (u8g2_NextPage(&u8g2));
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f000 facc 	bl	8001fb6 <u8g2_NextPage>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d1ef      	bne.n	8001a04 <main+0x258>
  HAL_GPIO_WritePin(CAN_ENABLE_GPIO_Port, CAN_ENABLE_Pin, GPIO_PIN_RESET);
 8001a24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a28:	4820      	ldr	r0, [pc, #128]	; (8001aac <main+0x300>)
 8001a2a:	f7fe ffd7 	bl	80009dc <HAL_GPIO_WritePin>
	  testCounter++;
 8001a2e:	4d30      	ldr	r5, [pc, #192]	; (8001af0 <main+0x344>)
	    HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8001a30:	4e1c      	ldr	r6, [pc, #112]	; (8001aa4 <main+0x2f8>)
	  sprintf(screen1_data.str_boiler_value, "ddd1");
 8001a32:	4c30      	ldr	r4, [pc, #192]	; (8001af4 <main+0x348>)
	  HAL_Delay(100);
 8001a34:	2064      	movs	r0, #100	; 0x64
 8001a36:	f7fe fbd1 	bl	80001dc <HAL_Delay>
	  memset(tmp_string, 0, 20);
 8001a3a:	2214      	movs	r2, #20
	  testCounter++;
 8001a3c:	682b      	ldr	r3, [r5, #0]
	  memset(tmp_string, 0, 20);
 8001a3e:	eb0d 0002 	add.w	r0, sp, r2
	  testCounter++;
 8001a42:	3301      	adds	r3, #1
	  memset(tmp_string, 0, 20);
 8001a44:	2100      	movs	r1, #0
	  testCounter++;
 8001a46:	602b      	str	r3, [r5, #0]
	  memset(tmp_string, 0, 20);
 8001a48:	f001 f936 	bl	8002cb8 <memset>
	    HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8001a4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a50:	4630      	mov	r0, r6
 8001a52:	f7fe ffc8 	bl	80009e6 <HAL_GPIO_TogglePin>
	  	 printf("OK2!\r\n");
 8001a56:	4828      	ldr	r0, [pc, #160]	; (8001af8 <main+0x34c>)
 8001a58:	f001 f992 	bl	8002d80 <puts>
	  sprintf(screen1_data.str_boiler_value, "ddd1");
 8001a5c:	4927      	ldr	r1, [pc, #156]	; (8001afc <main+0x350>)
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f001 f9ba 	bl	8002dd8 <strcpy>
	  sprintf(screen1_data.str_tempreture_value_1, "ddd2");
 8001a64:	4926      	ldr	r1, [pc, #152]	; (8001b00 <main+0x354>)
 8001a66:	4827      	ldr	r0, [pc, #156]	; (8001b04 <main+0x358>)
 8001a68:	f001 f9b6 	bl	8002dd8 <strcpy>
	  sprintf(screen1_data.str_humidity_value_1, "ddd3");
 8001a6c:	4926      	ldr	r1, [pc, #152]	; (8001b08 <main+0x35c>)
 8001a6e:	4827      	ldr	r0, [pc, #156]	; (8001b0c <main+0x360>)
 8001a70:	f001 f9b2 	bl	8002dd8 <strcpy>
	  sprintf(screen1_data.str_tempreture_value_2, "ddd4");
 8001a74:	4926      	ldr	r1, [pc, #152]	; (8001b10 <main+0x364>)
 8001a76:	4827      	ldr	r0, [pc, #156]	; (8001b14 <main+0x368>)
 8001a78:	f001 f9ae 	bl	8002dd8 <strcpy>
	  sprintf(screen1_data.str_humidity_value_2, "ddd5");
 8001a7c:	4926      	ldr	r1, [pc, #152]	; (8001b18 <main+0x36c>)
 8001a7e:	4827      	ldr	r0, [pc, #156]	; (8001b1c <main+0x370>)
 8001a80:	f001 f9aa 	bl	8002dd8 <strcpy>
	  sprintf(screen1_data.str_pump_status_1, "ddd6");
 8001a84:	4926      	ldr	r1, [pc, #152]	; (8001b20 <main+0x374>)
 8001a86:	4827      	ldr	r0, [pc, #156]	; (8001b24 <main+0x378>)
 8001a88:	f001 f9a6 	bl	8002dd8 <strcpy>
	  sprintf(screen1_data.str_pump_status_2, "ddd7");
 8001a8c:	4926      	ldr	r1, [pc, #152]	; (8001b28 <main+0x37c>)
 8001a8e:	4827      	ldr	r0, [pc, #156]	; (8001b2c <main+0x380>)
 8001a90:	f001 f9a2 	bl	8002dd8 <strcpy>
	  display_update2(&u8g2, &screen1_data, &screen1_error_holder);
 8001a94:	4a26      	ldr	r2, [pc, #152]	; (8001b30 <main+0x384>)
 8001a96:	4621      	mov	r1, r4
 8001a98:	4812      	ldr	r0, [pc, #72]	; (8001ae4 <main+0x338>)
 8001a9a:	f7ff fcf5 	bl	8001488 <display_update2>
 8001a9e:	e7c9      	b.n	8001a34 <main+0x288>
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	40010800 	.word	0x40010800
 8001ab0:	200002cc 	.word	0x200002cc
 8001ab4:	40006400 	.word	0x40006400
 8001ab8:	20000338 	.word	0x20000338
 8001abc:	40012c00 	.word	0x40012c00
 8001ac0:	20000220 	.word	0x20000220
 8001ac4:	40004800 	.word	0x40004800
 8001ac8:	200002f4 	.word	0x200002f4
 8001acc:	200001b4 	.word	0x200001b4
 8001ad0:	20000264 	.word	0x20000264
 8001ad4:	200001ac 	.word	0x200001ac
 8001ad8:	080015ad 	.word	0x080015ad
 8001adc:	08001715 	.word	0x08001715
 8001ae0:	080059ec 	.word	0x080059ec
 8001ae4:	20000098 	.word	0x20000098
 8001ae8:	080050eb 	.word	0x080050eb
 8001aec:	08003cf3 	.word	0x08003cf3
 8001af0:	20000094 	.word	0x20000094
 8001af4:	2000027c 	.word	0x2000027c
 8001af8:	08003d00 	.word	0x08003d00
 8001afc:	08003d06 	.word	0x08003d06
 8001b00:	08003d0b 	.word	0x08003d0b
 8001b04:	20000286 	.word	0x20000286
 8001b08:	08003d10 	.word	0x08003d10
 8001b0c:	20000290 	.word	0x20000290
 8001b10:	08003d15 	.word	0x08003d15
 8001b14:	2000029a 	.word	0x2000029a
 8001b18:	08003d1a 	.word	0x08003d1a
 8001b1c:	200002a4 	.word	0x200002a4
 8001b20:	08003d1f 	.word	0x08003d1f
 8001b24:	200002ae 	.word	0x200002ae
 8001b28:	08003d24 	.word	0x08003d24
 8001b2c:	200002b8 	.word	0x200002b8
 8001b30:	200001dc 	.word	0x200001dc

08001b34 <HAL_CAN_TxMailbox0CompleteCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan_)
{
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_CAN_RxFifo0MsgPendingCallback>:
}



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8001b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001b3a:	4c1b      	ldr	r4, [pc, #108]	; (8001ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001b3c:	4d1b      	ldr	r5, [pc, #108]	; (8001bac <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001b3e:	4623      	mov	r3, r4
 8001b40:	462a      	mov	r2, r5
 8001b42:	2100      	movs	r1, #0
 8001b44:	481a      	ldr	r0, [pc, #104]	; (8001bb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001b46:	f7fe fc6d 	bl	8000424 <HAL_CAN_GetRxMessage>
//	HAL_GPIO_TogglePin(GPIOC, LED_Pin);

	 uint32_t u;
	  u = RxData[0];
	  u += (uint32_t)(RxData[1] << 8);
	  u += (uint32_t)(RxData[2] << 16);
 8001b4a:	78a0      	ldrb	r0, [r4, #2]
	  u += (uint32_t)(RxData[1] << 8);
 8001b4c:	7866      	ldrb	r6, [r4, #1]
	  u = RxData[0];
 8001b4e:	7827      	ldrb	r7, [r4, #0]
	  u += (uint32_t)(RxData[2] << 16);
 8001b50:	0403      	lsls	r3, r0, #16
	  u += (uint32_t)(RxData[3] << 24);




	if(RxHeader.StdId==0xf0){
 8001b52:	682a      	ldr	r2, [r5, #0]
	  u += (uint32_t)(RxData[2] << 16);
 8001b54:	eb03 2306 	add.w	r3, r3, r6, lsl #8
	  u += (uint32_t)(RxData[3] << 24);
 8001b58:	78e1      	ldrb	r1, [r4, #3]
	  u += (uint32_t)(RxData[2] << 16);
 8001b5a:	443b      	add	r3, r7
	if(RxHeader.StdId==0xf0){
 8001b5c:	2af0      	cmp	r2, #240	; 0xf0
	  u += (uint32_t)(RxData[3] << 24);
 8001b5e:	eb03 6301 	add.w	r3, r3, r1, lsl #24
	if(RxHeader.StdId==0xf0){
 8001b62:	d102      	bne.n	8001b6a <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		pressure = u;
 8001b64:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}else if(RxHeader.StdId==0xf0+1){
 8001b6a:	2af1      	cmp	r2, #241	; 0xf1
 8001b6c:	d107      	bne.n	8001b7e <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
		temperature = u;
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001b70:	6013      	str	r3, [r2, #0]
		temperature1timeout = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001b76:	7013      	strb	r3, [r2, #0]
		temperature2timeout = 0;
 8001b78:	4a11      	ldr	r2, [pc, #68]	; (8001bc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
	}else if(RxHeader.StdId==0xf0+2){
		humidity = u;
		humidity1timeout = 0;
		humidity2timeout = 0;
 8001b7a:	7013      	strb	r3, [r2, #0]
 8001b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}else if(RxHeader.StdId==0xf0+2){
 8001b7e:	2af2      	cmp	r2, #242	; 0xf2
 8001b80:	d106      	bne.n	8001b90 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
		humidity = u;
 8001b82:	4a10      	ldr	r2, [pc, #64]	; (8001bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001b84:	6013      	str	r3, [r2, #0]
		humidity1timeout = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001b8a:	7013      	strb	r3, [r2, #0]
		humidity2timeout = 0;
 8001b8c:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001b8e:	e7f4      	b.n	8001b7a <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	}else if(RxHeader.StdId==RELAY_CONTROL_CAN_ID){
//		Control_peripheral_relays(RxData[0]);
	}else if(RxHeader.StdId==BOILER_TEMP_CAN_ID){
 8001b90:	2ad0      	cmp	r2, #208	; 0xd0
 8001b92:	d107      	bne.n	8001ba4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		input_packet_boiler_temperature = u;
		for (int i=0; i<4 ;++i) {
			((uint8_t*)&input_packet_boiler_temperature)[i] = RxData[i];
		}
		input_packet_boiler_timeout = 0;
 8001b94:	2200      	movs	r2, #0
		input_packet_boiler_temperature = u;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
			((uint8_t*)&input_packet_boiler_temperature)[i] = RxData[i];
 8001b98:	701f      	strb	r7, [r3, #0]
 8001b9a:	705e      	strb	r6, [r3, #1]
 8001b9c:	7098      	strb	r0, [r3, #2]
 8001b9e:	70d9      	strb	r1, [r3, #3]
		input_packet_boiler_timeout = 0;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8001ba2:	701a      	strb	r2, [r3, #0]
 8001ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200002c2 	.word	0x200002c2
 8001bac:	20000200 	.word	0x20000200
 8001bb0:	200002cc 	.word	0x200002cc
 8001bb4:	200001fc 	.word	0x200001fc
 8001bb8:	20000260 	.word	0x20000260
 8001bbc:	20000092 	.word	0x20000092
 8001bc0:	20000093 	.word	0x20000093
 8001bc4:	20000334 	.word	0x20000334
 8001bc8:	2000008c 	.word	0x2000008c
 8001bcc:	2000008d 	.word	0x2000008d
 8001bd0:	200001f8 	.word	0x200001f8
 8001bd4:	2000008e 	.word	0x2000008e

08001bd8 <HAL_TIM_PeriodElapsedCallback>:
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if( htim->Instance == TIM1 ){
 8001bd8:	6803      	ldr	r3, [r0, #0]
 8001bda:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x88>)
{
 8001bdc:	b530      	push	{r4, r5, lr}
  if( htim->Instance == TIM1 ){
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d132      	bne.n	8001c48 <HAL_TIM_PeriodElapsedCallback+0x70>
//	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
	++temperature1timeout;
 8001be2:	4d20      	ldr	r5, [pc, #128]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x8c>)
	++temperature2timeout;
 8001be4:	4820      	ldr	r0, [pc, #128]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x90>)
	++temperature1timeout;
 8001be6:	782b      	ldrb	r3, [r5, #0]
	++humidity1timeout;
 8001be8:	4920      	ldr	r1, [pc, #128]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x94>)
	++temperature1timeout;
 8001bea:	3301      	adds	r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	702b      	strb	r3, [r5, #0]
	++temperature2timeout;
 8001bf0:	7803      	ldrb	r3, [r0, #0]
	++humidity2timeout;
 8001bf2:	4a1f      	ldr	r2, [pc, #124]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x98>)
	++temperature2timeout;
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	7003      	strb	r3, [r0, #0]
	++humidity1timeout;
 8001bfa:	780b      	ldrb	r3, [r1, #0]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	700b      	strb	r3, [r1, #0]
	++humidity2timeout;
 8001c02:	7813      	ldrb	r3, [r2, #0]
 8001c04:	3301      	adds	r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	7013      	strb	r3, [r2, #0]
	++input_packet_boiler_timeout;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001c0c:	781c      	ldrb	r4, [r3, #0]
 8001c0e:	3401      	adds	r4, #1
 8001c10:	b2e4      	uxtb	r4, r4
 8001c12:	701c      	strb	r4, [r3, #0]

	if(temperature1timeout>= DATA_WAIT_TIMEOUT){
 8001c14:	782c      	ldrb	r4, [r5, #0]
 8001c16:	2c09      	cmp	r4, #9
		temperature1timeout = DATA_WAIT_TIMEOUT;
 8001c18:	bf84      	itt	hi
 8001c1a:	240a      	movhi	r4, #10
 8001c1c:	702c      	strbhi	r4, [r5, #0]
	}

	if(temperature2timeout>= DATA_WAIT_TIMEOUT){
 8001c1e:	7804      	ldrb	r4, [r0, #0]
 8001c20:	2c09      	cmp	r4, #9
		temperature2timeout = DATA_WAIT_TIMEOUT;
 8001c22:	bf84      	itt	hi
 8001c24:	240a      	movhi	r4, #10
 8001c26:	7004      	strbhi	r4, [r0, #0]
	}

	if(humidity1timeout>= DATA_WAIT_TIMEOUT){
 8001c28:	7808      	ldrb	r0, [r1, #0]
 8001c2a:	2809      	cmp	r0, #9
		humidity1timeout = DATA_WAIT_TIMEOUT;
 8001c2c:	bf84      	itt	hi
 8001c2e:	200a      	movhi	r0, #10
 8001c30:	7008      	strbhi	r0, [r1, #0]
	}

	if(humidity2timeout>= DATA_WAIT_TIMEOUT){
 8001c32:	7811      	ldrb	r1, [r2, #0]
 8001c34:	2909      	cmp	r1, #9
		humidity2timeout = DATA_WAIT_TIMEOUT;
 8001c36:	bf84      	itt	hi
 8001c38:	210a      	movhi	r1, #10
 8001c3a:	7011      	strbhi	r1, [r2, #0]
	}

	if(input_packet_boiler_timeout>= DATA_WAIT_TIMEOUT){
 8001c3c:	781a      	ldrb	r2, [r3, #0]
 8001c3e:	2a09      	cmp	r2, #9
 8001c40:	d90d      	bls.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x86>
		input_packet_boiler_timeout = DATA_WAIT_TIMEOUT;
 8001c42:	220a      	movs	r2, #10
 8001c44:	701a      	strb	r2, [r3, #0]
 8001c46:	bd30      	pop	{r4, r5, pc}
	}
 } else if ( htim->Instance == TIM2 ) {
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4c:	d107      	bne.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x86>
	 if (micro_delay_counter > 0 ) {
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c50:	8813      	ldrh	r3, [r2, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	b11b      	cbz	r3, 8001c5e <HAL_TIM_PeriodElapsedCallback+0x86>
		 micro_delay_counter--;
 8001c56:	8813      	ldrh	r3, [r2, #0]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	8013      	strh	r3, [r2, #0]
 8001c5e:	bd30      	pop	{r4, r5, pc}
 8001c60:	40012c00 	.word	0x40012c00
 8001c64:	20000092 	.word	0x20000092
 8001c68:	20000093 	.word	0x20000093
 8001c6c:	2000008c 	.word	0x2000008c
 8001c70:	2000008d 	.word	0x2000008d
 8001c74:	2000008e 	.word	0x2000008e
 8001c78:	20000090 	.word	0x20000090

08001c7c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_MspInit+0x3c>)
{
 8001c7e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	619a      	str	r2, [r3, #24]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	f002 0201 	and.w	r2, r2, #1
 8001c8e:	9200      	str	r2, [sp, #0]
 8001c90:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	69da      	ldr	r2, [r3, #28]
 8001c94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c98:	61da      	str	r2, [r3, #28]
 8001c9a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c9c:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ca6:	6853      	ldr	r3, [r2, #4]
 8001ca8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb2:	b002      	add	sp, #8
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010000 	.word	0x40010000

08001cc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	2100      	movs	r1, #0
 8001cca:	a802      	add	r0, sp, #8
 8001ccc:	f000 fff4 	bl	8002cb8 <memset>
  if(hcan->Instance==CAN1)
 8001cd0:	6822      	ldr	r2, [r4, #0]
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_CAN_MspInit+0x88>)
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d135      	bne.n	8001d44 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001cd8:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001cdc:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ce0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001ce4:	61da      	str	r2, [r3, #28]
 8001ce6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	4818      	ldr	r0, [pc, #96]	; (8001d4c <HAL_CAN_MspInit+0x8c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001cea:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001cee:	9200      	str	r2, [sp, #0]
 8001cf0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	699a      	ldr	r2, [r3, #24]
 8001cf4:	f042 0204 	orr.w	r2, r2, #4
 8001cf8:	619a      	str	r2, [r3, #24]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d08:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0a:	f7fe fd85 	bl	8000818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d12:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d18:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	a902      	add	r1, sp, #8
 8001d1c:	480b      	ldr	r0, [pc, #44]	; (8001d4c <HAL_CAN_MspInit+0x8c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f7fe fd7a 	bl	8000818 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2013      	movs	r0, #19
 8001d28:	4611      	mov	r1, r2
 8001d2a:	f7fe fd1d 	bl	8000768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001d2e:	2013      	movs	r0, #19
 8001d30:	f7fe fd4e 	bl	80007d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2014      	movs	r0, #20
 8001d38:	4611      	mov	r1, r2
 8001d3a:	f7fe fd15 	bl	8000768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001d3e:	2014      	movs	r0, #20
 8001d40:	f7fe fd46 	bl	80007d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d44:	b006      	add	sp, #24
 8001d46:	bd10      	pop	{r4, pc}
 8001d48:	40006400 	.word	0x40006400
 8001d4c:	40010800 	.word	0x40010800

08001d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d50:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 8001d52:	6803      	ldr	r3, [r0, #0]
 8001d54:	4a16      	ldr	r2, [pc, #88]	; (8001db0 <HAL_TIM_Base_MspInit+0x60>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d114      	bne.n	8001d84 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_TIM_Base_MspInit+0x64>)
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001d5c:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d64:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d68:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001d6a:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001d74:	f7fe fcf8 	bl	8000768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001d78:	2019      	movs	r0, #25
  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d7a:	f7fe fd29 	bl	80007d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d7e:	b003      	add	sp, #12
 8001d80:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d88:	d1f9      	bne.n	8001d7e <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d8e:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d90:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d9a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d9c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001da6:	f7fe fcdf 	bl	8000768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001daa:	201c      	movs	r0, #28
 8001dac:	e7e5      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x2a>
 8001dae:	bf00      	nop
 8001db0:	40012c00 	.word	0x40012c00
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db8:	b510      	push	{r4, lr}
 8001dba:	4604      	mov	r4, r0
 8001dbc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	a802      	add	r0, sp, #8
 8001dc4:	f000 ff78 	bl	8002cb8 <memset>
  if(huart->Instance==USART3)
 8001dc8:	6822      	ldr	r2, [r4, #0]
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_UART_MspInit+0x70>)
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d128      	bne.n	8001e22 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dd0:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001dd4:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dd8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ddc:	61da      	str	r2, [r3, #28]
 8001dde:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	4812      	ldr	r0, [pc, #72]	; (8001e2c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001de2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001de6:	9200      	str	r2, [sp, #0]
 8001de8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	f042 0208 	orr.w	r2, r2, #8
 8001df0:	619a      	str	r2, [r3, #24]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e00:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f7fe fd05 	bl	8000818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e12:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e14:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	a902      	add	r1, sp, #8
 8001e18:	4804      	ldr	r0, [pc, #16]	; (8001e2c <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1e:	f7fe fcfb 	bl	8000818 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e22:	b006      	add	sp, #24
 8001e24:	bd10      	pop	{r4, pc}
 8001e26:	bf00      	nop
 8001e28:	40004800 	.word	0x40004800
 8001e2c:	40010c00 	.word	0x40010c00

08001e30 <NMI_Handler>:
 8001e30:	4770      	bx	lr

08001e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e32:	e7fe      	b.n	8001e32 <HardFault_Handler>

08001e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler>

08001e36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e36:	e7fe      	b.n	8001e36 <BusFault_Handler>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	e7fe      	b.n	8001e38 <UsageFault_Handler>

08001e3a <SVC_Handler>:
 8001e3a:	4770      	bx	lr

08001e3c <DebugMon_Handler>:
 8001e3c:	4770      	bx	lr

08001e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3e:	4770      	bx	lr

08001e40 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e40:	f7fe b9ba 	b.w	80001b8 <HAL_IncTick>

08001e44 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001e44:	4801      	ldr	r0, [pc, #4]	; (8001e4c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8001e46:	f7fe bb7f 	b.w	8000548 <HAL_CAN_IRQHandler>
 8001e4a:	bf00      	nop
 8001e4c:	200002cc 	.word	0x200002cc

08001e50 <USB_HP_CAN1_TX_IRQHandler>:
 8001e50:	f7ff bff8 	b.w	8001e44 <USB_LP_CAN1_RX0_IRQHandler>

08001e54 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e54:	4801      	ldr	r0, [pc, #4]	; (8001e5c <TIM1_UP_IRQHandler+0x8>)
 8001e56:	f7ff b879 	b.w	8000f4c <HAL_TIM_IRQHandler>
 8001e5a:	bf00      	nop
 8001e5c:	20000338 	.word	0x20000338

08001e60 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e60:	4801      	ldr	r0, [pc, #4]	; (8001e68 <TIM2_IRQHandler+0x8>)
 8001e62:	f7ff b873 	b.w	8000f4c <HAL_TIM_IRQHandler>
 8001e66:	bf00      	nop
 8001e68:	200002f4 	.word	0x200002f4

08001e6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e6c:	b570      	push	{r4, r5, r6, lr}
 8001e6e:	460e      	mov	r6, r1
 8001e70:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e72:	460c      	mov	r4, r1
 8001e74:	1ba3      	subs	r3, r4, r6
 8001e76:	429d      	cmp	r5, r3
 8001e78:	dc01      	bgt.n	8001e7e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001e7e:	f3af 8000 	nop.w
 8001e82:	f804 0b01 	strb.w	r0, [r4], #1
 8001e86:	e7f5      	b.n	8001e74 <_read+0x8>

08001e88 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001e88:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <_sbrk+0x2c>)
{
 8001e8c:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001e8e:	6819      	ldr	r1, [r3, #0]
 8001e90:	b909      	cbnz	r1, 8001e96 <_sbrk+0xe>
		heap_end = &end;
 8001e92:	4909      	ldr	r1, [pc, #36]	; (8001eb8 <_sbrk+0x30>)
 8001e94:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001e96:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001e98:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001e9a:	4402      	add	r2, r0
 8001e9c:	428a      	cmp	r2, r1
 8001e9e:	d906      	bls.n	8001eae <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001ea0:	f000 fee0 	bl	8002c64 <__errno>
 8001ea4:	230c      	movs	r3, #12
 8001ea6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eac:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001eae:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001eb0:	bd08      	pop	{r3, pc}
 8001eb2:	bf00      	nop
 8001eb4:	2000011c 	.word	0x2000011c
 8001eb8:	2000037c 	.word	0x2000037c

08001ebc <_close>:

int _close(int file)
{
	return -1;
}
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ec0:	4770      	bx	lr

08001ec2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001ec6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001ec8:	604b      	str	r3, [r1, #4]
}
 8001eca:	4770      	bx	lr

08001ecc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001ecc:	2001      	movs	r0, #1
 8001ece:	4770      	bx	lr

08001ed0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	4770      	bx	lr

08001ed4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <SystemInit+0x40>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <SystemInit+0x44>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001eec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ef0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ef8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001f00:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f02:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f06:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <SystemInit+0x48>)
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	f8ff0000 	.word	0xf8ff0000
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001f24:	4605      	mov	r5, r0
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001f26:	2600      	movs	r6, #0
 8001f28:	6803      	ldr	r3, [r0, #0]
  src_max = u8g2->tile_buf_height;
 8001f2a:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
  dest_row = u8g2->tile_curr_row;
 8001f2e:	f890 7039 	ldrb.w	r7, [r0, #57]	; 0x39
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001f32:	f893 8011 	ldrb.w	r8, [r3, #17]
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f36:	682b      	ldr	r3, [r5, #0]
  offset = src_tile_row;
 8001f38:	b2b1      	uxth	r1, r6
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f3a:	7c1b      	ldrb	r3, [r3, #16]
 8001f3c:	b2f4      	uxtb	r4, r6
  offset *= 8;
 8001f3e:	00d8      	lsls	r0, r3, #3
 8001f40:	4341      	muls	r1, r0
  ptr += offset;
 8001f42:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001f44:	b289      	uxth	r1, r1
 8001f46:	4401      	add	r1, r0
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001f48:	193a      	adds	r2, r7, r4
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 8001f4a:	3401      	adds	r4, #1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001f4c:	9100      	str	r1, [sp, #0]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	2100      	movs	r1, #0
 8001f52:	4628      	mov	r0, r5
  } while( src_row < src_max && dest_row < dest_max );
 8001f54:	b2e4      	uxtb	r4, r4
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001f56:	f000 fdfc 	bl	8002b52 <u8x8_DrawTile>
  } while( src_row < src_max && dest_row < dest_max );
 8001f5a:	45a1      	cmp	r9, r4
 8001f5c:	d904      	bls.n	8001f68 <u8g2_send_buffer+0x48>
 8001f5e:	3601      	adds	r6, #1
 8001f60:	19bb      	adds	r3, r7, r6
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	4598      	cmp	r8, r3
 8001f66:	d8e6      	bhi.n	8001f36 <u8g2_send_buffer+0x16>
}
 8001f68:	b003      	add	sp, #12
 8001f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001f6e <u8g2_ClearBuffer>:
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f6e:	6803      	ldr	r3, [r0, #0]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001f70:	2100      	movs	r1, #0
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f72:	7c1a      	ldrb	r2, [r3, #16]
  cnt *= u8g2->tile_buf_height;
 8001f74:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001f78:	6b40      	ldr	r0, [r0, #52]	; 0x34
  cnt *= 8;
 8001f7a:	00db      	lsls	r3, r3, #3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001f7c:	435a      	muls	r2, r3
 8001f7e:	f000 be9b 	b.w	8002cb8 <memset>

08001f82 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001f82:	b510      	push	{r4, lr}
 8001f84:	4604      	mov	r4, r0
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
 8001f86:	6b03      	ldr	r3, [r0, #48]	; 0x30
  u8g2->tile_curr_row = row;
 8001f88:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001f90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f92:	4620      	mov	r0, r4
}
 8001f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2->cb->update_page_win(u8g2);
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4718      	bx	r3

08001f9c <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001f9c:	b510      	push	{r4, lr}
  if ( u8g2->is_auto_page_clear )
 8001f9e:	f890 3083 	ldrb.w	r3, [r0, #131]	; 0x83
{
 8001fa2:	4604      	mov	r4, r0
  if ( u8g2->is_auto_page_clear )
 8001fa4:	b10b      	cbz	r3, 8001faa <u8g2_FirstPage+0xe>
  {
    u8g2_ClearBuffer(u8g2);
 8001fa6:	f7ff ffe2 	bl	8001f6e <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001faa:	4620      	mov	r0, r4
}
 8001fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	f7ff bfe6 	b.w	8001f82 <u8g2_SetBufferCurrTileRow>

08001fb6 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001fb6:	b538      	push	{r3, r4, r5, lr}
 8001fb8:	4604      	mov	r4, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001fba:	f7ff ffb1 	bl	8001f20 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001fbe:	f894 5039 	ldrb.w	r5, [r4, #57]	; 0x39
  row += u8g2->tile_buf_height;
 8001fc2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001fc6:	6823      	ldr	r3, [r4, #0]
  row += u8g2->tile_buf_height;
 8001fc8:	440d      	add	r5, r1
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001fca:	7c5b      	ldrb	r3, [r3, #17]
  row += u8g2->tile_buf_height;
 8001fcc:	b2ed      	uxtb	r5, r5
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001fce:	42ab      	cmp	r3, r5
 8001fd0:	d804      	bhi.n	8001fdc <u8g2_NextPage+0x26>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f000 fdee 	bl	8002bb4 <u8x8_RefreshDisplay>
    return 0;
 8001fd8:	2000      	movs	r0, #0
 8001fda:	bd38      	pop	{r3, r4, r5, pc}
  }
  if ( u8g2->is_auto_page_clear )
 8001fdc:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
 8001fe0:	b113      	cbz	r3, 8001fe8 <u8g2_NextPage+0x32>
  {
    u8g2_ClearBuffer(u8g2);
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f7ff ffc3 	bl	8001f6e <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001fe8:	4620      	mov	r0, r4
 8001fea:	4629      	mov	r1, r5
 8001fec:	f7ff ffc9 	bl	8001f82 <u8g2_SetBufferCurrTileRow>
  return 1;
 8001ff0:	2001      	movs	r0, #1
}
 8001ff2:	bd38      	pop	{r3, r4, r5, pc}

08001ff4 <u8g2_m_16_8_1>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 1;
  return 0;
  #else
  static uint8_t buf[128];
  *page_cnt = 1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	7003      	strb	r3, [r0, #0]
  return buf;
  #endif
}
 8001ff8:	4800      	ldr	r0, [pc, #0]	; (8001ffc <u8g2_m_16_8_1+0x8>)
 8001ffa:	4770      	bx	lr
 8001ffc:	20000120 	.word	0x20000120

08002000 <u8g2_Setup_st7565_ea_dogm128_1>:
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* st7565 */
/* st7565 1 */
void u8g2_Setup_st7565_ea_dogm128_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002000:	b530      	push	{r4, r5, lr}
 8002002:	b085      	sub	sp, #20
 8002004:	460d      	mov	r5, r1
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_ea_dogm128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	4909      	ldr	r1, [pc, #36]	; (8002030 <u8g2_Setup_st7565_ea_dogm128_1+0x30>)
 800200a:	4613      	mov	r3, r2
 800200c:	4a09      	ldr	r2, [pc, #36]	; (8002034 <u8g2_Setup_st7565_ea_dogm128_1+0x34>)
{
 800200e:	4604      	mov	r4, r0
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_ea_dogm128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8002010:	f000 fdf4 	bl	8002bfc <u8x8_Setup>
  buf = u8g2_m_16_8_1(&tile_buf_height);
 8002014:	f10d 000f 	add.w	r0, sp, #15
 8002018:	f7ff ffec 	bl	8001ff4 <u8g2_m_16_8_1>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800201c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002020:	4601      	mov	r1, r0
 8002022:	9500      	str	r5, [sp, #0]
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <u8g2_Setup_st7565_ea_dogm128_1+0x38>)
 8002026:	4620      	mov	r0, r4
 8002028:	f000 fc06 	bl	8002838 <u8g2_SetupBuffer>
}
 800202c:	b005      	add	sp, #20
 800202e:	bd30      	pop	{r4, r5, pc}
 8002030:	08002a81 	.word	0x08002a81
 8002034:	08002977 	.word	0x08002977
 8002038:	0800265d 	.word	0x0800265d

0800203c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 800203c:	1842      	adds	r2, r0, r1
    pos = u8x8_pgm_read( font );
 800203e:	5c43      	ldrb	r3, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 8002040:	7850      	ldrb	r0, [r2, #1]
 8002042:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return pos;
}
 8002046:	b280      	uxth	r0, r0
 8002048:	4770      	bx	lr

0800204a <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 800204a:	2000      	movs	r0, #0
 800204c:	4770      	bx	lr

0800204e <u8g2_read_font_info>:
{
 800204e:	b538      	push	{r3, r4, r5, lr}
  return u8x8_pgm_read( font );  
 8002050:	780b      	ldrb	r3, [r1, #0]
{
 8002052:	460d      	mov	r5, r1
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8002054:	7003      	strb	r3, [r0, #0]
  return u8x8_pgm_read( font );  
 8002056:	784b      	ldrb	r3, [r1, #1]
{
 8002058:	4604      	mov	r4, r0
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800205a:	7043      	strb	r3, [r0, #1]
  return u8x8_pgm_read( font );  
 800205c:	788b      	ldrb	r3, [r1, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800205e:	7083      	strb	r3, [r0, #2]
  return u8x8_pgm_read( font );  
 8002060:	78cb      	ldrb	r3, [r1, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8002062:	70c3      	strb	r3, [r0, #3]
  return u8x8_pgm_read( font );  
 8002064:	790b      	ldrb	r3, [r1, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8002066:	7103      	strb	r3, [r0, #4]
  return u8x8_pgm_read( font );  
 8002068:	794b      	ldrb	r3, [r1, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800206a:	7143      	strb	r3, [r0, #5]
  return u8x8_pgm_read( font );  
 800206c:	798b      	ldrb	r3, [r1, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800206e:	7183      	strb	r3, [r0, #6]
  return u8x8_pgm_read( font );  
 8002070:	79cb      	ldrb	r3, [r1, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8002072:	71c3      	strb	r3, [r0, #7]
  return u8x8_pgm_read( font );  
 8002074:	7a0b      	ldrb	r3, [r1, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8002076:	7203      	strb	r3, [r0, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8002078:	7a4b      	ldrb	r3, [r1, #9]
 800207a:	7243      	strb	r3, [r0, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800207c:	7a8b      	ldrb	r3, [r1, #10]
 800207e:	7283      	strb	r3, [r0, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002080:	7acb      	ldrb	r3, [r1, #11]
 8002082:	72c3      	strb	r3, [r0, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8002084:	7b0b      	ldrb	r3, [r1, #12]
 8002086:	7303      	strb	r3, [r0, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8002088:	7b4b      	ldrb	r3, [r1, #13]
 800208a:	7343      	strb	r3, [r0, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800208c:	7b8b      	ldrb	r3, [r1, #14]
 800208e:	7383      	strb	r3, [r0, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8002090:	7bcb      	ldrb	r3, [r1, #15]
 8002092:	73c3      	strb	r3, [r0, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8002094:	7c0b      	ldrb	r3, [r1, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002096:	2111      	movs	r1, #17
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8002098:	7403      	strb	r3, [r0, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800209a:	4628      	mov	r0, r5
 800209c:	f7ff ffce 	bl	800203c <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80020a0:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80020a2:	8260      	strh	r0, [r4, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80020a4:	4628      	mov	r0, r5
 80020a6:	f7ff ffc9 	bl	800203c <u8g2_font_get_word>
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80020aa:	2115      	movs	r1, #21
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80020ac:	82a0      	strh	r0, [r4, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80020ae:	4628      	mov	r0, r5
 80020b0:	f7ff ffc4 	bl	800203c <u8g2_font_get_word>
 80020b4:	82e0      	strh	r0, [r4, #22]
 80020b6:	bd38      	pop	{r3, r4, r5, pc}

080020b8 <u8g2_font_decode_get_unsigned_bits>:
{
 80020b8:	b570      	push	{r4, r5, r6, lr}
  uint8_t bit_pos = f->decode_bit_pos;
 80020ba:	7a84      	ldrb	r4, [r0, #10]
  val = u8x8_pgm_read( f->decode_ptr );  
 80020bc:	6806      	ldr	r6, [r0, #0]
  bit_pos_plus_cnt += cnt;
 80020be:	1862      	adds	r2, r4, r1
  val >>= bit_pos;
 80020c0:	7833      	ldrb	r3, [r6, #0]
  bit_pos_plus_cnt += cnt;
 80020c2:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 80020c4:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 80020c6:	fa43 f504 	asr.w	r5, r3, r4
  if ( bit_pos_plus_cnt >= 8 )
 80020ca:	d806      	bhi.n	80020da <u8g2_font_decode_get_unsigned_bits+0x22>
  val >>= bit_pos;
 80020cc:	b2eb      	uxtb	r3, r5
  f->decode_bit_pos = bit_pos_plus_cnt;
 80020ce:	7282      	strb	r2, [r0, #10]
  val &= (1U<<cnt)-1;
 80020d0:	2001      	movs	r0, #1
 80020d2:	4088      	lsls	r0, r1
 80020d4:	3801      	subs	r0, #1
}
 80020d6:	4018      	ands	r0, r3
 80020d8:	bd70      	pop	{r4, r5, r6, pc}
    f->decode_ptr++;
 80020da:	1c73      	adds	r3, r6, #1
 80020dc:	6003      	str	r3, [r0, #0]
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80020de:	7873      	ldrb	r3, [r6, #1]
    s -= bit_pos;
 80020e0:	f1c4 0408 	rsb	r4, r4, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80020e4:	b2e4      	uxtb	r4, r4
 80020e6:	40a3      	lsls	r3, r4
 80020e8:	432b      	orrs	r3, r5
    bit_pos_plus_cnt -= 8;
 80020ea:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80020ec:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	e7ed      	b.n	80020ce <u8g2_font_decode_get_unsigned_bits+0x16>

080020f2 <u8g2_font_setup_decode>:
{
 80020f2:	b538      	push	{r3, r4, r5, lr}
  decode->decode_bit_pos = 0;
 80020f4:	2300      	movs	r3, #0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80020f6:	f100 0554 	add.w	r5, r0, #84	; 0x54
{
 80020fa:	4604      	mov	r4, r0
  decode->decode_bit_pos = 0;
 80020fc:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
  decode->decode_ptr = glyph_data;
 8002100:	6541      	str	r1, [r0, #84]	; 0x54
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8002102:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 8002106:	4628      	mov	r0, r5
 8002108:	f7ff ffd6 	bl	80020b8 <u8g2_font_decode_get_unsigned_bits>
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800210c:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8002110:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8002114:	4628      	mov	r0, r5
 8002116:	f7ff ffcf 	bl	80020b8 <u8g2_font_decode_get_unsigned_bits>
  decode->fg_color = u8g2->draw_color;
 800211a:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800211e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  decode->fg_color = u8g2->draw_color;
 8002122:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8002130:	bd38      	pop	{r3, r4, r5, pc}

08002132 <u8g2_font_decode_get_signed_bits>:
{
 8002132:	b510      	push	{r4, lr}
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8002134:	f7ff ffc0 	bl	80020b8 <u8g2_font_decode_get_unsigned_bits>
  d <<= cnt;
 8002138:	2301      	movs	r3, #1
  cnt--;
 800213a:	1e4c      	subs	r4, r1, #1
  d <<= cnt;
 800213c:	b2e4      	uxtb	r4, r4
 800213e:	40a3      	lsls	r3, r4
  v -= d;
 8002140:	1ac0      	subs	r0, r0, r3
}
 8002142:	b240      	sxtb	r0, r0
 8002144:	bd10      	pop	{r4, pc}

08002146 <u8g2_add_vector_y>:
  switch(dir)
 8002146:	2b01      	cmp	r3, #1
 8002148:	d007      	beq.n	800215a <u8g2_add_vector_y+0x14>
 800214a:	d303      	bcc.n	8002154 <u8g2_add_vector_y+0xe>
 800214c:	2b02      	cmp	r3, #2
 800214e:	d006      	beq.n	800215e <u8g2_add_vector_y+0x18>
      dy -= x;
 8002150:	1a40      	subs	r0, r0, r1
 8002152:	e000      	b.n	8002156 <u8g2_add_vector_y+0x10>
      dy += y;
 8002154:	4410      	add	r0, r2
      dy -= x;
 8002156:	b2c0      	uxtb	r0, r0
}
 8002158:	4770      	bx	lr
      dy += x;
 800215a:	4408      	add	r0, r1
 800215c:	e7fb      	b.n	8002156 <u8g2_add_vector_y+0x10>
      dy -= y;
 800215e:	1a80      	subs	r0, r0, r2
 8002160:	e7f9      	b.n	8002156 <u8g2_add_vector_y+0x10>

08002162 <u8g2_add_vector_x>:
  switch(dir)
 8002162:	2b01      	cmp	r3, #1
 8002164:	d007      	beq.n	8002176 <u8g2_add_vector_x+0x14>
 8002166:	d303      	bcc.n	8002170 <u8g2_add_vector_x+0xe>
 8002168:	2b02      	cmp	r3, #2
 800216a:	d006      	beq.n	800217a <u8g2_add_vector_x+0x18>
      dx += y;
 800216c:	4410      	add	r0, r2
 800216e:	e000      	b.n	8002172 <u8g2_add_vector_x+0x10>
      dx += x;
 8002170:	4408      	add	r0, r1
      dx += y;
 8002172:	b2c0      	uxtb	r0, r0
}
 8002174:	4770      	bx	lr
      dx -= y;
 8002176:	1a80      	subs	r0, r0, r2
 8002178:	e7fb      	b.n	8002172 <u8g2_add_vector_x+0x10>
      dx -= x;
 800217a:	1a40      	subs	r0, r0, r1
 800217c:	e7f9      	b.n	8002172 <u8g2_add_vector_x+0x10>

0800217e <u8g2_font_decode_len>:
{
 800217e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002182:	4604      	mov	r4, r0
 8002184:	460e      	mov	r6, r1
 8002186:	b087      	sub	sp, #28
  lx = decode->x;
 8002188:	f890 805a 	ldrb.w	r8, [r0, #90]	; 0x5a
  ly = decode->y;
 800218c:	f890 705b 	ldrb.w	r7, [r0, #91]	; 0x5b
{
 8002190:	9205      	str	r2, [sp, #20]
    rem = decode->glyph_width;
 8002192:	f894 505c 	ldrb.w	r5, [r4, #92]	; 0x5c
 8002196:	4633      	mov	r3, r6
    rem -= lx;
 8002198:	eba5 0508 	sub.w	r5, r5, r8
 800219c:	b2ed      	uxtb	r5, r5
 800219e:	42ae      	cmp	r6, r5
 80021a0:	bf28      	it	cs
 80021a2:	462b      	movcs	r3, r5
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80021a4:	f894 9062 	ldrb.w	r9, [r4, #98]	; 0x62
 80021a8:	9302      	str	r3, [sp, #8]
    y = decode->target_y;
 80021aa:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80021ae:	fa4f fa88 	sxtb.w	sl, r8
 80021b2:	fa4f fb87 	sxtb.w	fp, r7
    y = decode->target_y;
 80021b6:	9304      	str	r3, [sp, #16]
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80021b8:	465a      	mov	r2, fp
 80021ba:	464b      	mov	r3, r9
 80021bc:	4651      	mov	r1, sl
 80021be:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 80021c2:	f7ff ffce 	bl	8002162 <u8g2_add_vector_x>
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80021c6:	464b      	mov	r3, r9
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80021c8:	9003      	str	r0, [sp, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80021ca:	465a      	mov	r2, fp
 80021cc:	4651      	mov	r1, sl
 80021ce:	9804      	ldr	r0, [sp, #16]
 80021d0:	f7ff ffb9 	bl	8002146 <u8g2_add_vector_y>
    if ( is_foreground )
 80021d4:	9b05      	ldr	r3, [sp, #20]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80021d6:	4602      	mov	r2, r0
    if ( is_foreground )
 80021d8:	b19b      	cbz	r3, 8002202 <u8g2_font_decode_len+0x84>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80021da:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80021de:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80021e2:	f8cd 9000 	str.w	r9, [sp]
 80021e6:	9b02      	ldr	r3, [sp, #8]
 80021e8:	9903      	ldr	r1, [sp, #12]
 80021ea:	4620      	mov	r0, r4
 80021ec:	f000 f9a7 	bl	800253e <u8g2_DrawHVLine>
    if ( cnt < rem )
 80021f0:	42ae      	cmp	r6, r5
 80021f2:	d30d      	bcc.n	8002210 <u8g2_font_decode_len+0x92>
    cnt -= rem;
 80021f4:	1b76      	subs	r6, r6, r5
    ly++;
 80021f6:	3701      	adds	r7, #1
    cnt -= rem;
 80021f8:	b2f6      	uxtb	r6, r6
    ly++;
 80021fa:	b2ff      	uxtb	r7, r7
    lx = 0;
 80021fc:	f04f 0800 	mov.w	r8, #0
    rem = decode->glyph_width;
 8002200:	e7c7      	b.n	8002192 <u8g2_font_decode_len+0x14>
    else if ( decode->is_transparent == 0 )    
 8002202:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f2      	bne.n	80021f0 <u8g2_font_decode_len+0x72>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800220a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800220e:	e7e6      	b.n	80021de <u8g2_font_decode_len+0x60>
  lx += cnt;
 8002210:	4446      	add	r6, r8
  decode->x = lx;
 8002212:	f884 605a 	strb.w	r6, [r4, #90]	; 0x5a
  decode->y = ly;
 8002216:	f884 b05b 	strb.w	fp, [r4, #91]	; 0x5b
}
 800221a:	b007      	add	sp, #28
 800221c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002220 <u8g2_font_decode_glyph>:
{
 8002220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002224:	4604      	mov	r4, r0
 8002226:	b085      	sub	sp, #20
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002228:	f100 0954 	add.w	r9, r0, #84	; 0x54
  u8g2_font_setup_decode(u8g2, glyph_data);
 800222c:	f7ff ff61 	bl	80020f2 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8002230:	f994 305d 	ldrsb.w	r3, [r4, #93]	; 0x5d
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002234:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
 8002238:	4648      	mov	r0, r9
  h = u8g2->font_decode.glyph_height;
 800223a:	9302      	str	r3, [sp, #8]
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800223c:	f7ff ff79 	bl	8002132 <u8g2_font_decode_get_signed_bits>
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002240:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002244:	4683      	mov	fp, r0
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002246:	4648      	mov	r0, r9
 8002248:	f7ff ff73 	bl	8002132 <u8g2_font_decode_get_signed_bits>
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800224c:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002250:	4680      	mov	r8, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8002252:	4648      	mov	r0, r9
 8002254:	f7ff ff6d 	bl	8002132 <u8g2_font_decode_get_signed_bits>
  if ( decode->glyph_width > 0 )
 8002258:	f994 605c 	ldrsb.w	r6, [r4, #92]	; 0x5c
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800225c:	9003      	str	r0, [sp, #12]
  if ( decode->glyph_width > 0 )
 800225e:	2e00      	cmp	r6, #0
 8002260:	dd57      	ble.n	8002312 <u8g2_font_decode_glyph+0xf2>
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8002262:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8002266:	f894 a062 	ldrb.w	sl, [r4, #98]	; 0x62
 800226a:	44a8      	add	r8, r5
 800226c:	f1c8 0800 	rsb	r8, r8, #0
 8002270:	fa4f f888 	sxtb.w	r8, r8
 8002274:	4653      	mov	r3, sl
 8002276:	4642      	mov	r2, r8
 8002278:	4659      	mov	r1, fp
 800227a:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 800227e:	f7ff ff70 	bl	8002162 <u8g2_add_vector_x>
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8002282:	4653      	mov	r3, sl
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8002284:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 8002288:	4607      	mov	r7, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800228a:	4642      	mov	r2, r8
 800228c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8002290:	4659      	mov	r1, fp
 8002292:	f7ff ff58 	bl	8002146 <u8g2_add_vector_y>
 8002296:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
      switch(decode->dir)
 800229a:	f1ba 0f03 	cmp.w	sl, #3
 800229e:	d85a      	bhi.n	8002356 <u8g2_font_decode_glyph+0x136>
 80022a0:	e8df f00a 	tbb	[pc, sl]
 80022a4:	50443b02 	.word	0x50443b02
	    x1 += decode->glyph_width;
 80022a8:	19bb      	adds	r3, r7, r6
	    y1 += h;
 80022aa:	4405      	add	r5, r0
	    x1 += decode->glyph_width;
 80022ac:	b2db      	uxtb	r3, r3
	    y1 += h;
 80022ae:	b2e9      	uxtb	r1, r5
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80022b0:	9100      	str	r1, [sp, #0]
 80022b2:	4602      	mov	r2, r0
 80022b4:	4639      	mov	r1, r7
 80022b6:	4620      	mov	r0, r4
 80022b8:	f000 f9b8 	bl	800262c <u8g2_IsIntersection>
 80022bc:	b348      	cbz	r0, 8002312 <u8g2_font_decode_glyph+0xf2>
    decode->x = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
    decode->y = 0;
 80022c4:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80022c8:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
 80022cc:	4648      	mov	r0, r9
 80022ce:	f7ff fef3 	bl	80020b8 <u8g2_font_decode_get_unsigned_bits>
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80022d2:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80022d6:	4606      	mov	r6, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80022d8:	4648      	mov	r0, r9
 80022da:	f7ff feed 	bl	80020b8 <u8g2_font_decode_get_unsigned_bits>
 80022de:	4605      	mov	r5, r0
	u8g2_font_decode_len(u8g2, a, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	4631      	mov	r1, r6
 80022e4:	4620      	mov	r0, r4
 80022e6:	f7ff ff4a 	bl	800217e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80022ea:	4629      	mov	r1, r5
 80022ec:	4620      	mov	r0, r4
 80022ee:	2201      	movs	r2, #1
 80022f0:	f7ff ff45 	bl	800217e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80022f4:	2101      	movs	r1, #1
 80022f6:	4648      	mov	r0, r9
 80022f8:	f7ff fede 	bl	80020b8 <u8g2_font_decode_get_unsigned_bits>
 80022fc:	2800      	cmp	r0, #0
 80022fe:	d1ef      	bne.n	80022e0 <u8g2_font_decode_glyph+0xc0>
      if ( decode->y >= h )
 8002300:	f994 305b 	ldrsb.w	r3, [r4, #91]	; 0x5b
 8002304:	9a02      	ldr	r2, [sp, #8]
 8002306:	4293      	cmp	r3, r2
 8002308:	dbde      	blt.n	80022c8 <u8g2_font_decode_glyph+0xa8>
    u8g2->draw_color = decode->fg_color;
 800230a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800230e:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
}
 8002312:	9803      	ldr	r0, [sp, #12]
 8002314:	b005      	add	sp, #20
 8002316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800231a:	f1c5 0501 	rsb	r5, r5, #1
 800231e:	197a      	adds	r2, r7, r5
	    y1 += decode->glyph_width;
 8002320:	4406      	add	r6, r0
	    x1++;
 8002322:	3701      	adds	r7, #1
 8002324:	b2fb      	uxtb	r3, r7
	    y1 += decode->glyph_width;
 8002326:	b2f1      	uxtb	r1, r6
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002328:	b2d7      	uxtb	r7, r2
	    break;	  
 800232a:	e7c1      	b.n	80022b0 <u8g2_font_decode_glyph+0x90>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800232c:	f1c6 0601 	rsb	r6, r6, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002330:	f1c5 0501 	rsb	r5, r5, #1
	    y1++;
 8002334:	1c41      	adds	r1, r0, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002336:	19ba      	adds	r2, r7, r6
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002338:	4405      	add	r5, r0
	    x1++;
 800233a:	3701      	adds	r7, #1
 800233c:	b2fb      	uxtb	r3, r7
	    y1++;
 800233e:	b2c9      	uxtb	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002340:	b2e8      	uxtb	r0, r5
 8002342:	e7f1      	b.n	8002328 <u8g2_font_decode_glyph+0x108>
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002344:	f1c6 0601 	rsb	r6, r6, #1
	    y1++;
 8002348:	1c41      	adds	r1, r0, #1
	    x1 += h;
 800234a:	19eb      	adds	r3, r5, r7
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800234c:	4406      	add	r6, r0
	    x1 += h;
 800234e:	b2db      	uxtb	r3, r3
	    y1++;
 8002350:	b2c9      	uxtb	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002352:	b2f0      	uxtb	r0, r6
	    break;	  
 8002354:	e7ac      	b.n	80022b0 <u8g2_font_decode_glyph+0x90>
      y1 = y0;
 8002356:	4601      	mov	r1, r0
      x1 = x0;
 8002358:	463b      	mov	r3, r7
 800235a:	e7a9      	b.n	80022b0 <u8g2_font_decode_glyph+0x90>

0800235c <u8g2_font_get_glyph_data>:
  const uint8_t *font = u8g2->font;
 800235c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  if ( encoding <= 255 )
 800235e:	29ff      	cmp	r1, #255	; 0xff
{
 8002360:	b570      	push	{r4, r5, r6, lr}
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002362:	f103 0317 	add.w	r3, r3, #23
{
 8002366:	460d      	mov	r5, r1
  if ( encoding <= 255 )
 8002368:	d812      	bhi.n	8002390 <u8g2_font_get_glyph_data+0x34>
    if ( encoding >= 'a' )
 800236a:	2960      	cmp	r1, #96	; 0x60
 800236c:	d909      	bls.n	8002382 <u8g2_font_get_glyph_data+0x26>
      font += u8g2->font_info.start_pos_lower_a;
 800236e:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
      font += u8g2->font_info.start_pos_upper_A;
 8002372:	4413      	add	r3, r2
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002374:	7858      	ldrb	r0, [r3, #1]
 8002376:	b348      	cbz	r0, 80023cc <u8g2_font_get_glyph_data+0x70>
      if ( u8x8_pgm_read( font ) == encoding )
 8002378:	781a      	ldrb	r2, [r3, #0]
 800237a:	42aa      	cmp	r2, r5
 800237c:	d106      	bne.n	800238c <u8g2_font_get_glyph_data+0x30>
	return font+2;	/* skip encoding and glyph size */
 800237e:	1c98      	adds	r0, r3, #2
 8002380:	bd70      	pop	{r4, r5, r6, pc}
    else if ( encoding >= 'A' )
 8002382:	2940      	cmp	r1, #64	; 0x40
 8002384:	d9f6      	bls.n	8002374 <u8g2_font_get_glyph_data+0x18>
      font += u8g2->font_info.start_pos_upper_A;
 8002386:	f8b0 2076 	ldrh.w	r2, [r0, #118]	; 0x76
 800238a:	e7f2      	b.n	8002372 <u8g2_font_get_glyph_data+0x16>
      font += u8x8_pgm_read( font + 1 );
 800238c:	4403      	add	r3, r0
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800238e:	e7f1      	b.n	8002374 <u8g2_font_get_glyph_data+0x18>
    font += u8g2->font_info.start_pos_unicode;
 8002390:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
 8002394:	441c      	add	r4, r3
    unicode_lookup_table = font; 
 8002396:	4626      	mov	r6, r4
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002398:	2100      	movs	r1, #0
 800239a:	4630      	mov	r0, r6
 800239c:	f7ff fe4e 	bl	800203c <u8g2_font_get_word>
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80023a0:	2102      	movs	r1, #2
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80023a2:	4404      	add	r4, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80023a4:	4630      	mov	r0, r6
 80023a6:	f7ff fe49 	bl	800203c <u8g2_font_get_word>
    } while( e < encoding );
 80023aa:	4285      	cmp	r5, r0
      unicode_lookup_table+=4;
 80023ac:	f106 0604 	add.w	r6, r6, #4
    } while( e < encoding );
 80023b0:	d8f2      	bhi.n	8002398 <u8g2_font_get_glyph_data+0x3c>
      e = u8x8_pgm_read( font );
 80023b2:	7823      	ldrb	r3, [r4, #0]
      e |= u8x8_pgm_read( font + 1 );
 80023b4:	7860      	ldrb	r0, [r4, #1]
      if ( e == 0 )
 80023b6:	ea50 2303 	orrs.w	r3, r0, r3, lsl #8
 80023ba:	d006      	beq.n	80023ca <u8g2_font_get_glyph_data+0x6e>
      if ( e == encoding )
 80023bc:	429d      	cmp	r5, r3
 80023be:	d101      	bne.n	80023c4 <u8g2_font_get_glyph_data+0x68>
	return font+3;	/* skip encoding and glyph size */
 80023c0:	1ce0      	adds	r0, r4, #3
 80023c2:	bd70      	pop	{r4, r5, r6, pc}
      font += u8x8_pgm_read( font + 2 );
 80023c4:	78a3      	ldrb	r3, [r4, #2]
 80023c6:	441c      	add	r4, r3
      e = u8x8_pgm_read( font );
 80023c8:	e7f3      	b.n	80023b2 <u8g2_font_get_glyph_data+0x56>
  return NULL;
 80023ca:	4618      	mov	r0, r3
}
 80023cc:	bd70      	pop	{r4, r5, r6, pc}

080023ce <u8g2_DrawGlyph>:
{
 80023ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d0:	461f      	mov	r7, r3
  switch(u8g2->font_decode.dir)
 80023d2:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
{
 80023d6:	4604      	mov	r4, r0
 80023d8:	460e      	mov	r6, r1
 80023da:	4615      	mov	r5, r2
  switch(u8g2->font_decode.dir)
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d807      	bhi.n	80023f0 <u8g2_DrawGlyph+0x22>
 80023e0:	e8df f003 	tbb	[pc, r3]
 80023e4:	1e1a1502 	.word	0x1e1a1502
      y += u8g2->font_calc_vref(u8g2);
 80023e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80023ea:	4798      	blx	r3
 80023ec:	4405      	add	r5, r0
      y -= u8g2->font_calc_vref(u8g2);
 80023ee:	b2ed      	uxtb	r5, r5
  u8g2->font_decode.target_x = x;
 80023f0:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 80023f4:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80023f8:	4639      	mov	r1, r7
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7ff ffae 	bl	800235c <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
 8002400:	b120      	cbz	r0, 800240c <u8g2_DrawGlyph+0x3e>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002402:	4601      	mov	r1, r0
 8002404:	4620      	mov	r0, r4
 8002406:	f7ff ff0b 	bl	8002220 <u8g2_font_decode_glyph>
 800240a:	b2c0      	uxtb	r0, r0
}
 800240c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      x -= u8g2->font_calc_vref(u8g2);
 800240e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002410:	4798      	blx	r3
 8002412:	1a36      	subs	r6, r6, r0
      x += u8g2->font_calc_vref(u8g2);
 8002414:	b2f6      	uxtb	r6, r6
      break;
 8002416:	e7eb      	b.n	80023f0 <u8g2_DrawGlyph+0x22>
      y -= u8g2->font_calc_vref(u8g2);
 8002418:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800241a:	4798      	blx	r3
 800241c:	1a2d      	subs	r5, r5, r0
 800241e:	e7e6      	b.n	80023ee <u8g2_DrawGlyph+0x20>
      x += u8g2->font_calc_vref(u8g2);
 8002420:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002422:	4798      	blx	r3
 8002424:	4406      	add	r6, r0
 8002426:	e7f5      	b.n	8002414 <u8g2_DrawGlyph+0x46>

08002428 <u8g2_draw_string>:
{
 8002428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800242c:	461e      	mov	r6, r3
 800242e:	4607      	mov	r7, r0
 8002430:	460c      	mov	r4, r1
 8002432:	4615      	mov	r5, r2
  sum = 0;
 8002434:	f04f 0a00 	mov.w	sl, #0
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002438:	f000 fa26 	bl	8002888 <u8x8_utf8_init>
    if ( e == 0x0ffff )
 800243c:	f64f 78ff 	movw	r8, #65535	; 0xffff
    if ( e != 0x0fffe )
 8002440:	f64f 79fe 	movw	r9, #65534	; 0xfffe
 8002444:	3e01      	subs	r6, #1
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800244c:	4638      	mov	r0, r7
 800244e:	4798      	blx	r3
    if ( e == 0x0ffff )
 8002450:	4540      	cmp	r0, r8
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002452:	4603      	mov	r3, r0
    if ( e == 0x0ffff )
 8002454:	d01b      	beq.n	800248e <u8g2_draw_string+0x66>
    if ( e != 0x0fffe )
 8002456:	4548      	cmp	r0, r9
 8002458:	d0f5      	beq.n	8002446 <u8g2_draw_string+0x1e>
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800245a:	462a      	mov	r2, r5
 800245c:	4621      	mov	r1, r4
 800245e:	4638      	mov	r0, r7
 8002460:	f7ff ffb5 	bl	80023ce <u8g2_DrawGlyph>
      switch(u8g2->font_decode.dir)
 8002464:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8002468:	2b03      	cmp	r3, #3
 800246a:	d805      	bhi.n	8002478 <u8g2_draw_string+0x50>
 800246c:	e8df f003 	tbb	[pc, r3]
 8002470:	0d0b0802 	.word	0x0d0b0802
	  x += delta;
 8002474:	4404      	add	r4, r0
	  x -= delta;
 8002476:	b2e4      	uxtb	r4, r4
      sum += delta;    
 8002478:	4450      	add	r0, sl
 800247a:	fa5f fa80 	uxtb.w	sl, r0
 800247e:	e7e2      	b.n	8002446 <u8g2_draw_string+0x1e>
	  y += delta;
 8002480:	4405      	add	r5, r0
	  y -= delta;
 8002482:	b2ed      	uxtb	r5, r5
	  break;
 8002484:	e7f8      	b.n	8002478 <u8g2_draw_string+0x50>
	  x -= delta;
 8002486:	1a24      	subs	r4, r4, r0
 8002488:	e7f5      	b.n	8002476 <u8g2_draw_string+0x4e>
	  y -= delta;
 800248a:	1a2d      	subs	r5, r5, r0
 800248c:	e7f9      	b.n	8002482 <u8g2_draw_string+0x5a>
}
 800248e:	4650      	mov	r0, sl
 8002490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002494 <u8g2_DrawStr>:
{
 8002494:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002496:	4c02      	ldr	r4, [pc, #8]	; (80024a0 <u8g2_DrawStr+0xc>)
 8002498:	6044      	str	r4, [r0, #4]
}
 800249a:	bc10      	pop	{r4}
  return u8g2_draw_string(u8g2, x, y, str);
 800249c:	f7ff bfc4 	b.w	8002428 <u8g2_draw_string>
 80024a0:	08002879 	.word	0x08002879

080024a4 <u8g2_UpdateRefHeight>:
  if ( u8g2->font == NULL )
 80024a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 80024a6:	b510      	push	{r4, lr}
  if ( u8g2->font == NULL )
 80024a8:	b333      	cbz	r3, 80024f8 <u8g2_UpdateRefHeight+0x54>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80024aa:	f990 4071 	ldrsb.w	r4, [r0, #113]	; 0x71
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80024ae:	f990 1072 	ldrsb.w	r1, [r0, #114]	; 0x72
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80024b2:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80024b6:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80024ba:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80024be:	b1db      	cbz	r3, 80024f8 <u8g2_UpdateRefHeight+0x54>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d10c      	bne.n	80024de <u8g2_UpdateRefHeight+0x3a>
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80024c4:	f990 3073 	ldrsb.w	r3, [r0, #115]	; 0x73
 80024c8:	429c      	cmp	r4, r3
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80024ca:	bfb8      	it	lt
 80024cc:	f880 307e 	strblt.w	r3, [r0, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80024d0:	f990 3074 	ldrsb.w	r3, [r0, #116]	; 0x74
 80024d4:	4299      	cmp	r1, r3
 80024d6:	dd0f      	ble.n	80024f8 <u8g2_UpdateRefHeight+0x54>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80024d8:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
 80024dc:	bd10      	pop	{r4, pc}
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80024de:	f990 2070 	ldrsb.w	r2, [r0, #112]	; 0x70
 80024e2:	f990 306e 	ldrsb.w	r3, [r0, #110]	; 0x6e
 80024e6:	4413      	add	r3, r2
 80024e8:	429c      	cmp	r4, r3
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80024ea:	bfb8      	it	lt
 80024ec:	f880 307e 	strblt.w	r3, [r0, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80024f0:	4291      	cmp	r1, r2
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80024f2:	bfc8      	it	gt
 80024f4:	f880 207f 	strbgt.w	r2, [r0, #127]	; 0x7f
 80024f8:	bd10      	pop	{r4, pc}
	...

080024fc <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80024fc:	4b01      	ldr	r3, [pc, #4]	; (8002504 <u8g2_SetFontPosBaseline+0x8>)
 80024fe:	6503      	str	r3, [r0, #80]	; 0x50
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	0800204b 	.word	0x0800204b

08002508 <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
 8002508:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 800250a:	b510      	push	{r4, lr}
  if ( u8g2->font != font )
 800250c:	428a      	cmp	r2, r1
{
 800250e:	4604      	mov	r4, r0
  if ( u8g2->font != font )
 8002510:	d008      	beq.n	8002524 <u8g2_SetFont+0x1c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002512:	64e1      	str	r1, [r4, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002514:	3064      	adds	r0, #100	; 0x64
 8002516:	f7ff fd9a 	bl	800204e <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800251a:	4620      	mov	r0, r4
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800251c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    u8g2_UpdateRefHeight(u8g2);
 8002520:	f7ff bfc0 	b.w	80024a4 <u8g2_UpdateRefHeight>
 8002524:	bd10      	pop	{r4, pc}

08002526 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002526:	b470      	push	{r4, r5, r6}

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002528:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
{
 800252c:	f89d 600c 	ldrb.w	r6, [sp, #12]
  y -= u8g2->pixel_curr_row;
 8002530:	1b12      	subs	r2, r2, r4
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002532:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002534:	9603      	str	r6, [sp, #12]
 8002536:	46a4      	mov	ip, r4
}
 8002538:	bc70      	pop	{r4, r5, r6}
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	4760      	bx	ip

0800253e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800253e:	b470      	push	{r4, r5, r6}
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002540:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
{
 8002544:	f89d 500c 	ldrb.w	r5, [sp, #12]
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002548:	2c00      	cmp	r4, #0
 800254a:	d03a      	beq.n	80025c2 <u8g2_DrawHVLine+0x84>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800254c:	2b00      	cmp	r3, #0
 800254e:	d038      	beq.n	80025c2 <u8g2_DrawHVLine+0x84>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002550:	2b01      	cmp	r3, #1
 8002552:	d904      	bls.n	800255e <u8g2_DrawHVLine+0x20>
      {
	if ( dir == 2 )
 8002554:	2d02      	cmp	r5, #2
 8002556:	d12b      	bne.n	80025b0 <u8g2_DrawHVLine+0x72>
	{
	  x -= len;
	  x++;
 8002558:	3101      	adds	r1, #1
 800255a:	1ac9      	subs	r1, r1, r3
 800255c:	b2c9      	uxtb	r1, r1
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
 800255e:	f015 0501 	ands.w	r5, r5, #1
 8002562:	d130      	bne.n	80025c6 <u8g2_DrawHVLine+0x88>
      {
	if ( y < u8g2->user_y0 )
 8002564:	f890 4043 	ldrb.w	r4, [r0, #67]	; 0x43
 8002568:	4294      	cmp	r4, r2
 800256a:	d82a      	bhi.n	80025c2 <u8g2_DrawHVLine+0x84>
	  return;
	if ( y >= u8g2->user_y1 )
 800256c:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8002570:	4294      	cmp	r4, r2
 8002572:	d926      	bls.n	80025c2 <u8g2_DrawHVLine+0x84>
  b += *len;
 8002574:	440b      	add	r3, r1
 8002576:	b2db      	uxtb	r3, r3
  if ( a > b )
 8002578:	428b      	cmp	r3, r1
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800257a:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 800257e:	f890 4042 	ldrb.w	r4, [r0, #66]	; 0x42
  if ( a > b )
 8002582:	d21c      	bcs.n	80025be <u8g2_DrawHVLine+0x80>
    if ( a < d )
 8002584:	428c      	cmp	r4, r1
 8002586:	d919      	bls.n	80025bc <u8g2_DrawHVLine+0x7e>
      b--;
 8002588:	1e63      	subs	r3, r4, #1
 800258a:	b2db      	uxtb	r3, r3
  if ( b <= c )
 800258c:	429e      	cmp	r6, r3
 800258e:	d218      	bcs.n	80025c2 <u8g2_DrawHVLine+0x84>
 8002590:	42b1      	cmp	r1, r6
 8002592:	bf38      	it	cc
 8002594:	4631      	movcc	r1, r6
  b -= a;
 8002596:	429c      	cmp	r4, r3
 8002598:	bf94      	ite	ls
 800259a:	ebc1 0404 	rsbls	r4, r1, r4
 800259e:	ebc1 0403 	rsbhi	r4, r1, r3
 80025a2:	b2e3      	uxtb	r3, r4
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80025a4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80025a6:	9503      	str	r5, [sp, #12]
 80025a8:	68a4      	ldr	r4, [r4, #8]
 80025aa:	46a4      	mov	ip, r4
    }
}
 80025ac:	bc70      	pop	{r4, r5, r6}
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80025ae:	4760      	bx	ip
	else if ( dir == 3 )
 80025b0:	2d03      	cmp	r5, #3
	  y++;
 80025b2:	bf02      	ittt	eq
 80025b4:	3201      	addeq	r2, #1
 80025b6:	1ad2      	subeq	r2, r2, r3
 80025b8:	b2d2      	uxtbeq	r2, r2
 80025ba:	e7d0      	b.n	800255e <u8g2_DrawHVLine+0x20>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80025bc:	4631      	mov	r1, r6
  if ( a >= d )
 80025be:	428c      	cmp	r4, r1
 80025c0:	d8e4      	bhi.n	800258c <u8g2_DrawHVLine+0x4e>
}
 80025c2:	bc70      	pop	{r4, r5, r6}
 80025c4:	4770      	bx	lr
	if ( x < u8g2->user_x0 )
 80025c6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80025ca:	428c      	cmp	r4, r1
 80025cc:	d8f9      	bhi.n	80025c2 <u8g2_DrawHVLine+0x84>
	if ( x >= u8g2->user_x1 )
 80025ce:	f890 4042 	ldrb.w	r4, [r0, #66]	; 0x42
 80025d2:	428c      	cmp	r4, r1
 80025d4:	d9f5      	bls.n	80025c2 <u8g2_DrawHVLine+0x84>
  b += *len;
 80025d6:	4413      	add	r3, r2
 80025d8:	b2db      	uxtb	r3, r3
  if ( a > b )
 80025da:	4293      	cmp	r3, r2
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80025dc:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 80025e0:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
  if ( a > b )
 80025e4:	d210      	bcs.n	8002608 <u8g2_DrawHVLine+0xca>
    if ( a < d )
 80025e6:	4294      	cmp	r4, r2
 80025e8:	d90d      	bls.n	8002606 <u8g2_DrawHVLine+0xc8>
      b--;
 80025ea:	1e63      	subs	r3, r4, #1
 80025ec:	b2db      	uxtb	r3, r3
  if ( b <= c )
 80025ee:	429e      	cmp	r6, r3
 80025f0:	d2e7      	bcs.n	80025c2 <u8g2_DrawHVLine+0x84>
 80025f2:	42b2      	cmp	r2, r6
 80025f4:	bf38      	it	cc
 80025f6:	4632      	movcc	r2, r6
  b -= a;
 80025f8:	429c      	cmp	r4, r3
 80025fa:	bf94      	ite	ls
 80025fc:	ebc2 0404 	rsbls	r4, r2, r4
 8002600:	ebc2 0403 	rsbhi	r4, r2, r3
 8002604:	e7cd      	b.n	80025a2 <u8g2_DrawHVLine+0x64>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002606:	4632      	mov	r2, r6
  if ( a >= d )
 8002608:	4294      	cmp	r4, r2
 800260a:	d9da      	bls.n	80025c2 <u8g2_DrawHVLine+0x84>
 800260c:	e7ef      	b.n	80025ee <u8g2_DrawHVLine+0xb0>

0800260e <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
 800260e:	428a      	cmp	r2, r1
 8002610:	d206      	bcs.n	8002620 <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002612:	4283      	cmp	r3, r0
 8002614:	d808      	bhi.n	8002628 <u8g2_is_intersection_decision_tree+0x1a>
    {
      return 1;
 8002616:	429a      	cmp	r2, r3
 8002618:	bf94      	ite	ls
 800261a:	2000      	movls	r0, #0
 800261c:	2001      	movhi	r0, #1
 800261e:	4770      	bx	lr
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002620:	4283      	cmp	r3, r0
 8002622:	d8f8      	bhi.n	8002616 <u8g2_is_intersection_decision_tree+0x8>
	return 0;
      }
    }
    else
    {
      return 0;
 8002624:	2000      	movs	r0, #0
 8002626:	4770      	bx	lr
      return 1;
 8002628:	2001      	movs	r0, #1
    }
  }
}
 800262a:	4770      	bx	lr

0800262c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	4604      	mov	r4, r0
 8002630:	460d      	mov	r5, r1
 8002632:	461e      	mov	r6, r3
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002634:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
 8002638:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800263c:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 8002640:	f7ff ffe5 	bl	800260e <u8g2_is_intersection_decision_tree>
 8002644:	b148      	cbz	r0, 800265a <u8g2_IsIntersection+0x2e>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002646:	4633      	mov	r3, r6
 8002648:	462a      	mov	r2, r5
 800264a:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 800264e:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
}
 8002652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002656:	f7ff bfda 	b.w	800260e <u8g2_is_intersection_decision_tree>
}
 800265a:	bd70      	pop	{r4, r5, r6, pc}

0800265c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800265c:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;
 800265e:	2401      	movs	r4, #1

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 8002660:	f890 5082 	ldrb.w	r5, [r0, #130]	; 0x82
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002664:	f002 0607 	and.w	r6, r2, #7
  mask <<= bit_pos;
 8002668:	40b4      	lsls	r4, r6
  if ( u8g2->draw_color <= 1 )
 800266a:	2d01      	cmp	r5, #1
{
 800266c:	f89d 7014 	ldrb.w	r7, [sp, #20]
  mask <<= bit_pos;
 8002670:	b2e4      	uxtb	r4, r4
  if ( u8g2->draw_color <= 1 )
 8002672:	d817      	bhi.n	80026a4 <u8g2_ll_hvline_vertical_top_lsb+0x48>
    or_mask  = mask;
 8002674:	4625      	mov	r5, r4
  if ( u8g2->draw_color != 1 )
 8002676:	d017      	beq.n	80026a8 <u8g2_ll_hvline_vertical_top_lsb+0x4c>
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 8002678:	f002 0ef8 	and.w	lr, r2, #248	; 0xf8
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800267c:	6802      	ldr	r2, [r0, #0]
 800267e:	f892 c010 	ldrb.w	ip, [r2, #16]
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
 8002682:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002684:	fb0c 110e 	mla	r1, ip, lr, r1
 8002688:	4411      	add	r1, r2
  
  if ( dir == 0 )
 800268a:	b97f      	cbnz	r7, 80026ac <u8g2_ll_hvline_vertical_top_lsb+0x50>
 800268c:	3b01      	subs	r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	3301      	adds	r3, #1
 8002692:	440b      	add	r3, r1
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002694:	780a      	ldrb	r2, [r1, #0]
 8002696:	432a      	orrs	r2, r5
	*ptr ^= xor_mask;
 8002698:	4062      	eors	r2, r4
 800269a:	f801 2b01 	strb.w	r2, [r1], #1
	ptr++;
	len--;
      } while( len != 0 );
 800269e:	4299      	cmp	r1, r3
 80026a0:	d1f8      	bne.n	8002694 <u8g2_ll_hvline_vertical_top_lsb+0x38>
 80026a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  or_mask = 0;
 80026a4:	2500      	movs	r5, #0
 80026a6:	e7e7      	b.n	8002678 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
  xor_mask = 0;
 80026a8:	2400      	movs	r4, #0
 80026aa:	e7e5      	b.n	8002678 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
 80026ac:	780a      	ldrb	r2, [r1, #0]
      *ptr ^= xor_mask;
      
      bit_pos++;
 80026ae:	3601      	adds	r6, #1
      *ptr |= or_mask;
 80026b0:	432a      	orrs	r2, r5
      *ptr ^= xor_mask;
 80026b2:	4062      	eors	r2, r4
      bit_pos &= 7;

      len--;
 80026b4:	3b01      	subs	r3, #1

      if ( bit_pos == 0 )
 80026b6:	f016 0607 	ands.w	r6, r6, #7
      *ptr ^= xor_mask;
 80026ba:	700a      	strb	r2, [r1, #0]
      len--;
 80026bc:	b2db      	uxtb	r3, r3
      if ( bit_pos == 0 )
 80026be:	d10c      	bne.n	80026da <u8g2_ll_hvline_vertical_top_lsb+0x7e>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80026c0:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 80026c4:	4411      	add	r1, r2
		
	if ( u8g2->draw_color <= 1 )
 80026c6:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 80026ca:	2a01      	cmp	r2, #1
 80026cc:	d80a      	bhi.n	80026e4 <u8g2_ll_hvline_vertical_top_lsb+0x88>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
 80026ce:	d00b      	beq.n	80026e8 <u8g2_ll_hvline_vertical_top_lsb+0x8c>
	  xor_mask = 1;
 80026d0:	2401      	movs	r4, #1
	  or_mask  = 1;
 80026d2:	4625      	mov	r5, r4
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e9      	bne.n	80026ac <u8g2_ll_hvline_vertical_top_lsb+0x50>
 80026d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	or_mask <<= 1;
 80026da:	006d      	lsls	r5, r5, #1
	xor_mask <<= 1;
 80026dc:	0064      	lsls	r4, r4, #1
	or_mask <<= 1;
 80026de:	b2ed      	uxtb	r5, r5
	xor_mask <<= 1;
 80026e0:	b2e4      	uxtb	r4, r4
 80026e2:	e7f7      	b.n	80026d4 <u8g2_ll_hvline_vertical_top_lsb+0x78>
	  xor_mask = 1;
 80026e4:	2401      	movs	r4, #1
 80026e6:	e7f5      	b.n	80026d4 <u8g2_ll_hvline_vertical_top_lsb+0x78>
	  or_mask  = 1;
 80026e8:	4615      	mov	r5, r2
 80026ea:	e7f3      	b.n	80026d4 <u8g2_ll_hvline_vertical_top_lsb+0x78>

080026ec <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80026ec:	b570      	push	{r4, r5, r6, lr}
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80026ee:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80026f2:	6801      	ldr	r1, [r0, #0]
  t *= 8;
 80026f4:	00e3      	lsls	r3, r4, #3
  u8g2->pixel_buf_height = t;
 80026f6:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
  
  t = display_info->tile_width;
 80026fa:	7c0a      	ldrb	r2, [r1, #16]
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
  
  t = u8g2->tile_curr_row;
 80026fc:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 8002700:	2a1f      	cmp	r2, #31
 8002702:	bf28      	it	cs
 8002704:	221f      	movcs	r2, #31
  t *= 8;
 8002706:	00eb      	lsls	r3, r5, #3
 8002708:	b2db      	uxtb	r3, r3
  t *= 8;
 800270a:	00d2      	lsls	r2, r2, #3
  u8g2->pixel_curr_row = t;
 800270c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  u8g2->pixel_buf_width = t;
 8002710:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002714:	7c4a      	ldrb	r2, [r1, #17]
 8002716:	1966      	adds	r6, r4, r5
 8002718:	4296      	cmp	r6, r2
    t = display_info->tile_height - u8g2->tile_curr_row;
 800271a:	bfc4      	itt	gt
 800271c:	1b54      	subgt	r4, r2, r5
 800271e:	b2e4      	uxtbgt	r4, r4
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002720:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
 8002724:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002728:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800272c:	23f0      	movs	r3, #240	; 0xf0
 800272e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8002732:	8a8b      	ldrh	r3, [r1, #20]
 8002734:	2bf0      	cmp	r3, #240	; 0xf0
    u8g2->width = display_info->pixel_width;
 8002736:	bf98      	it	ls
 8002738:	f880 303f 	strbls.w	r3, [r0, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 800273c:	8acb      	ldrh	r3, [r1, #22]
 800273e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002742:	bd70      	pop	{r4, r5, r6, pc}

08002744 <u8g2_update_dimension_r2>:
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
  u8g2_update_dimension_common(u8g2);
 8002744:	f7ff bfd2 	b.w	80026ec <u8g2_update_dimension_common>

08002748 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002748:	b430      	push	{r4, r5}
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 800274a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
{
 800274e:	f89d 5008 	ldrb.w	r5, [sp, #8]
  yy -= y;
 8002752:	1aa2      	subs	r2, r4, r2
  
  xx = u8g2->width;
 8002754:	f890 403f 	ldrb.w	r4, [r0, #63]	; 0x3f
  yy -= y;
 8002758:	b2d2      	uxtb	r2, r2
  xx -= x;
 800275a:	1a61      	subs	r1, r4, r1
 800275c:	b2c9      	uxtb	r1, r1
  
  if ( dir == 0 )
 800275e:	b93d      	cbnz	r5, 8002770 <u8g2_draw_l90_r2+0x28>
  {
    yy--;
 8002760:	3a01      	subs	r2, #1
    xx -= len;
 8002762:	1ac9      	subs	r1, r1, r3
    yy--;
 8002764:	b2d2      	uxtb	r2, r2
    xx -= len;
 8002766:	b2c9      	uxtb	r1, r1
  {
    xx--;
    yy -= len;
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002768:	9502      	str	r5, [sp, #8]
}
 800276a:	bc30      	pop	{r4, r5}
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800276c:	f7ff bedb 	b.w	8002526 <u8g2_draw_hv_line_2dir>
  else if ( dir == 1 )
 8002770:	2d01      	cmp	r5, #1
    xx--;
 8002772:	bf01      	itttt	eq
 8002774:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
    yy -= len;
 8002778:	1ad2      	subeq	r2, r2, r3
    xx--;
 800277a:	b2c9      	uxtbeq	r1, r1
    yy -= len;
 800277c:	b2d2      	uxtbeq	r2, r2
 800277e:	e7f3      	b.n	8002768 <u8g2_draw_l90_r2+0x20>

08002780 <u8g2_apply_clip_window>:
{
 8002780:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002782:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 8002786:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800278a:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
 800278e:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
 8002792:	9500      	str	r5, [sp, #0]
{
 8002794:	4604      	mov	r4, r0
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002796:	f7ff ff49 	bl	800262c <u8g2_IsIntersection>
 800279a:	b918      	cbnz	r0, 80027a4 <u8g2_apply_clip_window+0x24>
    u8g2->is_page_clip_window_intersection = 0;
 800279c:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80027a0:	b003      	add	sp, #12
 80027a2:	bd30      	pop	{r4, r5, pc}
    u8g2->is_page_clip_window_intersection = 1;
 80027a4:	2301      	movs	r3, #1
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80027a6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    u8g2->is_page_clip_window_intersection = 1;
 80027aa:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80027ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80027b2:	429a      	cmp	r2, r3
      u8g2->user_x0 = u8g2->clip_x0;
 80027b4:	bf38      	it	cc
 80027b6:	f884 3041 	strbcc.w	r3, [r4, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80027ba:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80027be:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80027c2:	429a      	cmp	r2, r3
      u8g2->user_x1 = u8g2->clip_x1;
 80027c4:	bf88      	it	hi
 80027c6:	f884 3042 	strbhi.w	r3, [r4, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80027ca:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027ce:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80027d2:	429a      	cmp	r2, r3
      u8g2->user_y0 = u8g2->clip_y0;
 80027d4:	bf38      	it	cc
 80027d6:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80027da:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80027de:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80027e2:	429a      	cmp	r2, r3
      u8g2->user_y1 = u8g2->clip_y1;
 80027e4:	bf88      	it	hi
 80027e6:	f884 3044 	strbhi.w	r3, [r4, #68]	; 0x44
}
 80027ea:	e7d9      	b.n	80027a0 <u8g2_apply_clip_window+0x20>

080027ec <u8g2_update_page_win_r2>:
  u8g2->user_x0 = 0;
 80027ec:	2300      	movs	r3, #0
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 80027ee:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
  u8g2->user_y0 = 0;
 80027f2:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
  u8g2->user_x0 = 0;
 80027f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 80027fa:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  if ( u8g2->height >= u8g2->buf_y1 )
 80027fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002802:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8002806:	4293      	cmp	r3, r2
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002808:	bf24      	itt	cs
 800280a:	1a9a      	subcs	r2, r3, r2
 800280c:	f880 2043 	strbcs.w	r2, [r0, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002810:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  u8g2_apply_clip_window(u8g2);
 800281a:	f7ff bfb1 	b.w	8002780 <u8g2_apply_clip_window>

0800281e <u8g2_SetMaxClipWindow>:
  u8g2->clip_x0 = 0;
 800281e:	2200      	movs	r2, #0
 8002820:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  u8g2->clip_y0 = 0;
 8002824:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002828:	22ff      	movs	r2, #255	; 0xff
  u8g2->cb->update_page_win(u8g2);
 800282a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800282c:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002830:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  u8g2->cb->update_page_win(u8g2);
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4718      	bx	r3

08002838 <u8g2_SetupBuffer>:
{
 8002838:	b570      	push	{r4, r5, r6, lr}
  u8g2->font = NULL;
 800283a:	2500      	movs	r5, #0
  u8g2->ll_hvline = ll_hvline_cb;
 800283c:	62c3      	str	r3, [r0, #44]	; 0x2c
  u8g2->draw_color = 1;
 800283e:	2301      	movs	r3, #1
{
 8002840:	4604      	mov	r4, r0
 8002842:	9e04      	ldr	r6, [sp, #16]
  u8g2->tile_buf_height = tile_buf_height;
 8002844:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  u8g2->tile_curr_row = 0;
 8002848:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800284c:	f880 505f 	strb.w	r5, [r0, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8002850:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
  u8g2->draw_color = 1;
 8002854:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 8002858:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
  u8g2->tile_buf_ptr = buf;
 800285c:	6341      	str	r1, [r0, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 800285e:	6833      	ldr	r3, [r6, #0]
  u8g2->font = NULL;
 8002860:	64c5      	str	r5, [r0, #76]	; 0x4c
  u8g2->cb = u8g2_cb;
 8002862:	6306      	str	r6, [r0, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002864:	4798      	blx	r3
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002866:	4620      	mov	r0, r4
 8002868:	f7ff ffd9 	bl	800281e <u8g2_SetMaxClipWindow>
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800286c:	4620      	mov	r0, r4
 800286e:	f7ff fe45 	bl	80024fc <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
 8002872:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
 8002876:	bd70      	pop	{r4, r5, r6, pc}

08002878 <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002878:	b119      	cbz	r1, 8002882 <u8x8_ascii_next+0xa>
 800287a:	290a      	cmp	r1, #10
 800287c:	d001      	beq.n	8002882 <u8x8_ascii_next+0xa>
    return 0x0ffff;	/* end of string detected*/
  return b;
 800287e:	b288      	uxth	r0, r1
 8002880:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected*/
 8002882:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8002886:	4770      	bx	lr

08002888 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002888:	2300      	movs	r3, #0
 800288a:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
 800288e:	4770      	bx	lr

08002890 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002890:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002892:	6904      	ldr	r4, [r0, #16]
 8002894:	460a      	mov	r2, r1
 8002896:	46a4      	mov	ip, r4
 8002898:	2300      	movs	r3, #0
 800289a:	2120      	movs	r1, #32
}
 800289c:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800289e:	4760      	bx	ip

080028a0 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80028a0:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80028a2:	6904      	ldr	r4, [r0, #16]
 80028a4:	4613      	mov	r3, r2
 80028a6:	46a4      	mov	ip, r4
 80028a8:	460a      	mov	r2, r1
}
 80028aa:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80028ac:	2117      	movs	r1, #23
 80028ae:	4760      	bx	ip

080028b0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80028b0:	b507      	push	{r0, r1, r2, lr}
 80028b2:	aa02      	add	r2, sp, #8
 80028b4:	f802 1d01 	strb.w	r1, [r2, #-1]!
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80028b8:	2101      	movs	r1, #1
 80028ba:	f7ff fff1 	bl	80028a0 <u8x8_byte_SendBytes>
}
 80028be:	b003      	add	sp, #12
 80028c0:	f85d fb04 	ldr.w	pc, [sp], #4

080028c4 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80028c4:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80028c6:	68c4      	ldr	r4, [r0, #12]
 80028c8:	460a      	mov	r2, r1
 80028ca:	46a4      	mov	ip, r4
 80028cc:	2300      	movs	r3, #0
 80028ce:	2115      	movs	r1, #21
}
 80028d0:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80028d2:	4760      	bx	ip

080028d4 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80028d4:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80028d6:	68c4      	ldr	r4, [r0, #12]
 80028d8:	460a      	mov	r2, r1
 80028da:	46a4      	mov	ip, r4
 80028dc:	2300      	movs	r3, #0
 80028de:	2116      	movs	r1, #22
}
 80028e0:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80028e2:	4760      	bx	ip

080028e4 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80028e4:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80028e6:	68c4      	ldr	r4, [r0, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	46a4      	mov	ip, r4
 80028ec:	460a      	mov	r2, r1
}
 80028ee:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80028f0:	2117      	movs	r1, #23
 80028f2:	4760      	bx	ip

080028f4 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80028f4:	2300      	movs	r3, #0
{
 80028f6:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80028f8:	68c4      	ldr	r4, [r0, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	46a4      	mov	ip, r4
 80028fe:	2118      	movs	r1, #24
}
 8002900:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002902:	4760      	bx	ip

08002904 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002904:	2300      	movs	r3, #0
{
 8002906:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002908:	68c4      	ldr	r4, [r0, #12]
 800290a:	461a      	mov	r2, r3
 800290c:	46a4      	mov	ip, r4
 800290e:	2119      	movs	r1, #25
}
 8002910:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002912:	4760      	bx	ip

08002914 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002914:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002916:	4605      	mov	r5, r0
 8002918:	460c      	mov	r4, r1
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800291a:	7821      	ldrb	r1, [r4, #0]
    data++;
    switch( cmd )
 800291c:	2917      	cmp	r1, #23
 800291e:	d019      	beq.n	8002954 <u8x8_cad_SendSequence+0x40>
 8002920:	d803      	bhi.n	800292a <u8x8_cad_SendSequence+0x16>
 8002922:	2915      	cmp	r1, #21
 8002924:	d20d      	bcs.n	8002942 <u8x8_cad_SendSequence+0x2e>
	  break;
      default:
	return;
    }
  }
}
 8002926:	b002      	add	sp, #8
 8002928:	bd70      	pop	{r4, r5, r6, pc}
    switch( cmd )
 800292a:	2919      	cmp	r1, #25
 800292c:	d91c      	bls.n	8002968 <u8x8_cad_SendSequence+0x54>
 800292e:	29fe      	cmp	r1, #254	; 0xfe
 8002930:	d1f9      	bne.n	8002926 <u8x8_cad_SendSequence+0x12>
	  v = *data;
 8002932:	7862      	ldrb	r2, [r4, #1]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002934:	2129      	movs	r1, #41	; 0x29
 8002936:	4628      	mov	r0, r5
	  v = *data;
 8002938:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800293c:	f000 f942 	bl	8002bc4 <u8x8_gpio_call>
 8002940:	e006      	b.n	8002950 <u8x8_cad_SendSequence+0x3c>
	  v = *data;
 8002942:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002944:	68ee      	ldr	r6, [r5, #12]
	  v = *data;
 8002946:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800294a:	2300      	movs	r3, #0
 800294c:	4628      	mov	r0, r5
 800294e:	47b0      	blx	r6
	  data++;
 8002950:	3402      	adds	r4, #2
	  break;
 8002952:	e7e2      	b.n	800291a <u8x8_cad_SendSequence+0x6>
	  v = *data;
 8002954:	7863      	ldrb	r3, [r4, #1]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002956:	f10d 0207 	add.w	r2, sp, #7
 800295a:	2101      	movs	r1, #1
 800295c:	4628      	mov	r0, r5
	  v = *data;
 800295e:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002962:	f7ff ffbf 	bl	80028e4 <u8x8_cad_SendData>
 8002966:	e7f3      	b.n	8002950 <u8x8_cad_SendSequence+0x3c>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002968:	2300      	movs	r3, #0
 800296a:	68ee      	ldr	r6, [r5, #12]
 800296c:	461a      	mov	r2, r3
 800296e:	4628      	mov	r0, r5
    data++;
 8002970:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002972:	47b0      	blx	r6
	  break;
 8002974:	e7d1      	b.n	800291a <u8x8_cad_SendSequence+0x6>

08002976 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800297a:	4615      	mov	r5, r2
  switch(msg)
 800297c:	f1a1 0214 	sub.w	r2, r1, #20
{
 8002980:	4604      	mov	r4, r0
 8002982:	460e      	mov	r6, r1
 8002984:	4698      	mov	r8, r3
  switch(msg)
 8002986:	2a05      	cmp	r2, #5
 8002988:	d81a      	bhi.n	80029c0 <u8x8_cad_001+0x4a>
 800298a:	e8df f002 	tbb	[pc, r2]
 800298e:	0310      	.short	0x0310
 8002990:	10100d03 	.word	0x10100d03
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002994:	2100      	movs	r1, #0
 8002996:	f7ff ff7b 	bl	8002890 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800299a:	4629      	mov	r1, r5
 800299c:	4620      	mov	r0, r4
 800299e:	f7ff ff87 	bl	80028b0 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
 80029a2:	2001      	movs	r0, #1
      break;
 80029a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_byte_SetDC(u8x8, 1);
 80029a8:	2101      	movs	r1, #1
 80029aa:	f7ff ff71 	bl	8002890 <u8x8_byte_SetDC>
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80029ae:	6927      	ldr	r7, [r4, #16]
 80029b0:	4643      	mov	r3, r8
 80029b2:	462a      	mov	r2, r5
 80029b4:	4631      	mov	r1, r6
 80029b6:	4620      	mov	r0, r4
 80029b8:	46bc      	mov	ip, r7
}
 80029ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80029be:	4760      	bx	ip
      return 0;
 80029c0:	2000      	movs	r0, #0
}
 80029c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080029c8 <u8x8_d_st7565_common>:

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80029c8:	290e      	cmp	r1, #14
{
 80029ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ce:	4606      	mov	r6, r0
 80029d0:	4617      	mov	r7, r2
 80029d2:	4698      	mov	r8, r3
  switch(msg)
 80029d4:	d041      	beq.n	8002a5a <u8x8_d_st7565_common+0x92>
 80029d6:	290f      	cmp	r1, #15
 80029d8:	d008      	beq.n	80029ec <u8x8_d_st7565_common+0x24>
 80029da:	290b      	cmp	r1, #11
 80029dc:	d148      	bne.n	8002a70 <u8x8_d_st7565_common+0xa8>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80029de:	bbd2      	cbnz	r2, 8002a56 <u8x8_d_st7565_common+0x8e>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 80029e0:	4925      	ldr	r1, [pc, #148]	; (8002a78 <u8x8_d_st7565_common+0xb0>)
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 80029e2:	f7ff ff97 	bl	8002914 <u8x8_cad_SendSequence>
      break;
#endif
    default:
      return 0;
  }
  return 1;
 80029e6:	2001      	movs	r0, #1
 80029e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_cad_StartTransfer(u8x8);
 80029ec:	f7ff ff82 	bl	80028f4 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80029f0:	f898 3005 	ldrb.w	r3, [r8, #5]
      x += u8x8->x_offset;
 80029f4:	f896 4022 	ldrb.w	r4, [r6, #34]	; 0x22
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80029f8:	4630      	mov	r0, r6
      x += u8x8->x_offset;
 80029fa:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80029fe:	f004 04ff 	and.w	r4, r4, #255	; 0xff
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002a02:	0921      	lsrs	r1, r4, #4
 8002a04:	f041 0110 	orr.w	r1, r1, #16
 8002a08:	f7ff ff5c 	bl	80028c4 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002a0c:	f004 010f 	and.w	r1, r4, #15
 8002a10:	4630      	mov	r0, r6
 8002a12:	f7ff ff57 	bl	80028c4 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002a16:	f898 1006 	ldrb.w	r1, [r8, #6]
 8002a1a:	4630      	mov	r0, r6
 8002a1c:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 8002a20:	f7ff ff50 	bl	80028c4 <u8x8_cad_SendCmd>
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002a24:	f898 5004 	ldrb.w	r5, [r8, #4]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002a28:	f8d8 8000 	ldr.w	r8, [r8]
      c *= 8;
 8002a2c:	00ed      	lsls	r5, r5, #3
 8002a2e:	b2ed      	uxtb	r5, r5
      if ( c + x > 132u )
 8002a30:	192b      	adds	r3, r5, r4
 8002a32:	2b84      	cmp	r3, #132	; 0x84
	c -= x;
 8002a34:	bfc4      	itt	gt
 8002a36:	f1c4 0484 	rsbgt	r4, r4, #132	; 0x84
 8002a3a:	b2e5      	uxtbgt	r5, r4
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8002a3c:	4642      	mov	r2, r8
 8002a3e:	4629      	mov	r1, r5
 8002a40:	4630      	mov	r0, r6
	arg_int--;
 8002a42:	3f01      	subs	r7, #1
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8002a44:	f7ff ff4e 	bl	80028e4 <u8x8_cad_SendData>
      } while( arg_int > 0 );
 8002a48:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8002a4c:	d1f6      	bne.n	8002a3c <u8x8_d_st7565_common+0x74>
      u8x8_cad_EndTransfer(u8x8);
 8002a4e:	4630      	mov	r0, r6
 8002a50:	f7ff ff58 	bl	8002904 <u8x8_cad_EndTransfer>
 8002a54:	e7c7      	b.n	80029e6 <u8x8_d_st7565_common+0x1e>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8002a56:	4909      	ldr	r1, [pc, #36]	; (8002a7c <u8x8_d_st7565_common+0xb4>)
 8002a58:	e7c3      	b.n	80029e2 <u8x8_d_st7565_common+0x1a>
      u8x8_cad_StartTransfer(u8x8);
 8002a5a:	f7ff ff4b 	bl	80028f4 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002a5e:	2181      	movs	r1, #129	; 0x81
 8002a60:	4630      	mov	r0, r6
 8002a62:	f7ff ff2f 	bl	80028c4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002a66:	08b9      	lsrs	r1, r7, #2
 8002a68:	4630      	mov	r0, r6
 8002a6a:	f7ff ff33 	bl	80028d4 <u8x8_cad_SendArg>
 8002a6e:	e7ee      	b.n	8002a4e <u8x8_d_st7565_common+0x86>
      return 0;
 8002a70:	2000      	movs	r0, #0
}
 8002a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a76:	bf00      	nop
 8002a78:	08005a27 	.word	0x08005a27
 8002a7c:	08005a2e 	.word	0x08005a2e

08002a80 <u8x8_d_st7565_ea_dogm128>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_ea_dogm128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	4604      	mov	r4, r0
 8002a84:	460d      	mov	r5, r1
 8002a86:	4616      	mov	r6, r2
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8002a88:	f7ff ff9e 	bl	80029c8 <u8x8_d_st7565_common>
 8002a8c:	b948      	cbnz	r0, 8002aa2 <u8x8_d_st7565_ea_dogm128+0x22>
  {
    /* msg not handled, then try here */
    switch(msg)
 8002a8e:	2d0a      	cmp	r5, #10
 8002a90:	d009      	beq.n	8002aa6 <u8x8_d_st7565_ea_dogm128+0x26>
 8002a92:	2d0d      	cmp	r5, #13
 8002a94:	d00f      	beq.n	8002ab6 <u8x8_d_st7565_ea_dogm128+0x36>
 8002a96:	2d09      	cmp	r5, #9
 8002a98:	d104      	bne.n	8002aa4 <u8x8_d_st7565_ea_dogm128+0x24>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_128x64_display_info);
 8002a9a:	490f      	ldr	r1, [pc, #60]	; (8002ad8 <u8x8_d_st7565_ea_dogm128+0x58>)
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f000 f823 	bl	8002ae8 <u8x8_d_helper_display_setup_memory>
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
 8002aa2:	2001      	movs	r0, #1
}
 8002aa4:	bd70      	pop	{r4, r5, r6, pc}
	u8x8_d_helper_display_init(u8x8);
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f000 f823 	bl	8002af2 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_dogm128_init_seq);
 8002aac:	490b      	ldr	r1, [pc, #44]	; (8002adc <u8x8_d_st7565_ea_dogm128+0x5c>)
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7ff ff30 	bl	8002914 <u8x8_cad_SendSequence>
 8002ab4:	e7f5      	b.n	8002aa2 <u8x8_d_st7565_ea_dogm128+0x22>
	if ( arg_int == 0 )
 8002ab6:	b946      	cbnz	r6, 8002aca <u8x8_d_st7565_ea_dogm128+0x4a>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8002ab8:	4909      	ldr	r1, [pc, #36]	; (8002ae0 <u8x8_d_st7565_ea_dogm128+0x60>)
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff ff2a 	bl	8002914 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	7c9b      	ldrb	r3, [r3, #18]
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002ac4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8002ac8:	e7eb      	b.n	8002aa2 <u8x8_d_st7565_ea_dogm128+0x22>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8002aca:	4906      	ldr	r1, [pc, #24]	; (8002ae4 <u8x8_d_st7565_ea_dogm128+0x64>)
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7ff ff21 	bl	8002914 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	7cdb      	ldrb	r3, [r3, #19]
 8002ad6:	e7f5      	b.n	8002ac4 <u8x8_d_st7565_ea_dogm128+0x44>
 8002ad8:	08005a38 	.word	0x08005a38
 8002adc:	080059f8 	.word	0x080059f8
 8002ae0:	08005a19 	.word	0x08005a19
 8002ae4:	08005a20 	.word	0x08005a20

08002ae8 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002ae8:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002aea:	7c8b      	ldrb	r3, [r1, #18]
 8002aec:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8002af0:	4770      	bx	lr

08002af2 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002af2:	b538      	push	{r3, r4, r5, lr}
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002af4:	2300      	movs	r3, #0
 8002af6:	6945      	ldr	r5, [r0, #20]
 8002af8:	461a      	mov	r2, r3
 8002afa:	2128      	movs	r1, #40	; 0x28
{
 8002afc:	4604      	mov	r4, r0
      u8x8_gpio_Init(u8x8);
 8002afe:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);
 8002b00:	2300      	movs	r3, #0
 8002b02:	68e5      	ldr	r5, [r4, #12]
 8002b04:	461a      	mov	r2, r3
 8002b06:	2114      	movs	r1, #20
 8002b08:	4620      	mov	r0, r4
 8002b0a:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	2201      	movs	r2, #1
 8002b10:	214b      	movs	r1, #75	; 0x4b
 8002b12:	f000 f857 	bl	8002bc4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	4620      	mov	r0, r4
 8002b1a:	791a      	ldrb	r2, [r3, #4]
 8002b1c:	2129      	movs	r1, #41	; 0x29
 8002b1e:	f000 f851 	bl	8002bc4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002b22:	4620      	mov	r0, r4
 8002b24:	2200      	movs	r2, #0
 8002b26:	214b      	movs	r1, #75	; 0x4b
 8002b28:	f000 f84c 	bl	8002bc4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	4620      	mov	r0, r4
 8002b30:	791a      	ldrb	r2, [r3, #4]
 8002b32:	2129      	movs	r1, #41	; 0x29
 8002b34:	f000 f846 	bl	8002bc4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002b38:	4620      	mov	r0, r4
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	214b      	movs	r1, #75	; 0x4b
 8002b3e:	f000 f841 	bl	8002bc4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	4620      	mov	r0, r4
 8002b46:	795a      	ldrb	r2, [r3, #5]
 8002b48:	2129      	movs	r1, #41	; 0x29
}    
 8002b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002b4e:	f000 b839 	b.w	8002bc4 <u8x8_gpio_call>

08002b52 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002b52:	b513      	push	{r0, r1, r4, lr}
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
 8002b54:	f88d 2006 	strb.w	r2, [sp, #6]
  tile.cnt = cnt;
  tile.tile_ptr = tile_ptr;
 8002b58:	9a04      	ldr	r2, [sp, #16]
  tile.cnt = cnt;
 8002b5a:	f88d 3004 	strb.w	r3, [sp, #4]
  tile.tile_ptr = tile_ptr;
 8002b5e:	ab02      	add	r3, sp, #8
  tile.x_pos = x;
 8002b60:	f88d 1005 	strb.w	r1, [sp, #5]
  tile.tile_ptr = tile_ptr;
 8002b64:	f843 2d08 	str.w	r2, [r3, #-8]!
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002b68:	6884      	ldr	r4, [r0, #8]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	210f      	movs	r1, #15
 8002b6e:	47a0      	blx	r4
}
 8002b70:	b002      	add	sp, #8
 8002b72:	bd10      	pop	{r4, pc}

08002b74 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002b74:	2300      	movs	r3, #0
{
 8002b76:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002b78:	6884      	ldr	r4, [r0, #8]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	46a4      	mov	ip, r4
 8002b7e:	2109      	movs	r1, #9
}
 8002b80:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002b82:	4760      	bx	ip

08002b84 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002b84:	2300      	movs	r3, #0
{
 8002b86:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002b88:	6884      	ldr	r4, [r0, #8]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	46a4      	mov	ip, r4
 8002b8e:	210a      	movs	r1, #10
}
 8002b90:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002b92:	4760      	bx	ip

08002b94 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002b94:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002b96:	6884      	ldr	r4, [r0, #8]
 8002b98:	460a      	mov	r2, r1
 8002b9a:	46a4      	mov	ip, r4
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	210b      	movs	r1, #11
}
 8002ba0:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002ba2:	4760      	bx	ip

08002ba4 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8002ba4:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8002ba6:	6884      	ldr	r4, [r0, #8]
 8002ba8:	460a      	mov	r2, r1
 8002baa:	46a4      	mov	ip, r4
 8002bac:	2300      	movs	r3, #0
 8002bae:	210e      	movs	r1, #14
}
 8002bb0:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8002bb2:	4760      	bx	ip

08002bb4 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002bb4:	2300      	movs	r3, #0
{
 8002bb6:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002bb8:	6884      	ldr	r4, [r0, #8]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	46a4      	mov	ip, r4
 8002bbe:	2110      	movs	r1, #16
}
 8002bc0:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002bc2:	4760      	bx	ip

08002bc4 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002bc4:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002bc6:	6944      	ldr	r4, [r0, #20]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	46a4      	mov	ip, r4
}
 8002bcc:	bc10      	pop	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002bce:	4760      	bx	ip

08002bd0 <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	4770      	bx	lr

08002bd4 <u8x8_SetupDefaults>:
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	6003      	str	r3, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
    u8x8->cad_cb = u8x8_dummy_cb;
    u8x8->byte_cb = u8x8_dummy_cb;
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
 8002bd8:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002bdc:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002be0:	6183      	str	r3, [r0, #24]
    u8x8->i2c_address = 255;
 8002be2:	23ff      	movs	r3, #255	; 0xff
    u8x8->display_cb = u8x8_dummy_cb;
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <u8x8_SetupDefaults+0x24>)
    u8x8->i2c_address = 255;
 8002be6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    u8x8->display_cb = u8x8_dummy_cb;
 8002bea:	6082      	str	r2, [r0, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002bec:	60c2      	str	r2, [r0, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002bee:	6102      	str	r2, [r0, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002bf0:	6142      	str	r2, [r0, #20]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002bf2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8002bf6:	4770      	bx	lr
 8002bf8:	08002bd1 	.word	0x08002bd1

08002bfc <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	9d06      	ldr	r5, [sp, #24]
 8002c00:	4617      	mov	r7, r2
 8002c02:	461e      	mov	r6, r3
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002c04:	f7ff ffe6 	bl	8002bd4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
 8002c08:	60c7      	str	r7, [r0, #12]
  u8x8->byte_cb = byte_cb;
 8002c0a:	6106      	str	r6, [r0, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002c0c:	6145      	str	r5, [r0, #20]
  u8x8->display_cb = display_cb;
 8002c0e:	6081      	str	r1, [r0, #8]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
}
 8002c10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  u8x8_SetupMemory(u8x8);
 8002c14:	f7ff bfae 	b.w	8002b74 <u8x8_SetupMemory>

08002c18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c1a:	e003      	b.n	8002c24 <LoopCopyDataInit>

08002c1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c22:	3104      	adds	r1, #4

08002c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c24:	480a      	ldr	r0, [pc, #40]	; (8002c50 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c2c:	d3f6      	bcc.n	8002c1c <CopyDataInit>
  ldr r2, =_sbss
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c30:	e002      	b.n	8002c38 <LoopFillZerobss>

08002c32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c32:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002c34:	f842 3b04 	str.w	r3, [r2], #4

08002c38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002c3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c3c:	d3f9      	bcc.n	8002c32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c3e:	f7ff f949 	bl	8001ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c42:	f000 f815 	bl	8002c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c46:	f7fe fdb1 	bl	80017ac <main>
  bx lr
 8002c4a:	4770      	bx	lr
  ldr r3, =_sidata
 8002c4c:	08005af0 	.word	0x08005af0
  ldr r0, =_sdata
 8002c50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002c54:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002c58:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002c5c:	2000037c 	.word	0x2000037c

08002c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c60:	e7fe      	b.n	8002c60 <ADC1_2_IRQHandler>
	...

08002c64 <__errno>:
 8002c64:	4b01      	ldr	r3, [pc, #4]	; (8002c6c <__errno+0x8>)
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	2000000c 	.word	0x2000000c

08002c70 <__libc_init_array>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	2500      	movs	r5, #0
 8002c74:	4e0c      	ldr	r6, [pc, #48]	; (8002ca8 <__libc_init_array+0x38>)
 8002c76:	4c0d      	ldr	r4, [pc, #52]	; (8002cac <__libc_init_array+0x3c>)
 8002c78:	1ba4      	subs	r4, r4, r6
 8002c7a:	10a4      	asrs	r4, r4, #2
 8002c7c:	42a5      	cmp	r5, r4
 8002c7e:	d109      	bne.n	8002c94 <__libc_init_array+0x24>
 8002c80:	f001 f806 	bl	8003c90 <_init>
 8002c84:	2500      	movs	r5, #0
 8002c86:	4e0a      	ldr	r6, [pc, #40]	; (8002cb0 <__libc_init_array+0x40>)
 8002c88:	4c0a      	ldr	r4, [pc, #40]	; (8002cb4 <__libc_init_array+0x44>)
 8002c8a:	1ba4      	subs	r4, r4, r6
 8002c8c:	10a4      	asrs	r4, r4, #2
 8002c8e:	42a5      	cmp	r5, r4
 8002c90:	d105      	bne.n	8002c9e <__libc_init_array+0x2e>
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
 8002c94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c98:	4798      	blx	r3
 8002c9a:	3501      	adds	r5, #1
 8002c9c:	e7ee      	b.n	8002c7c <__libc_init_array+0xc>
 8002c9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ca2:	4798      	blx	r3
 8002ca4:	3501      	adds	r5, #1
 8002ca6:	e7f2      	b.n	8002c8e <__libc_init_array+0x1e>
 8002ca8:	08005ae8 	.word	0x08005ae8
 8002cac:	08005ae8 	.word	0x08005ae8
 8002cb0:	08005ae8 	.word	0x08005ae8
 8002cb4:	08005aec 	.word	0x08005aec

08002cb8 <memset>:
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4402      	add	r2, r0
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d100      	bne.n	8002cc2 <memset+0xa>
 8002cc0:	4770      	bx	lr
 8002cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cc6:	e7f9      	b.n	8002cbc <memset+0x4>

08002cc8 <_puts_r>:
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	460e      	mov	r6, r1
 8002ccc:	4605      	mov	r5, r0
 8002cce:	b118      	cbz	r0, 8002cd8 <_puts_r+0x10>
 8002cd0:	6983      	ldr	r3, [r0, #24]
 8002cd2:	b90b      	cbnz	r3, 8002cd8 <_puts_r+0x10>
 8002cd4:	f000 fa3a 	bl	800314c <__sinit>
 8002cd8:	69ab      	ldr	r3, [r5, #24]
 8002cda:	68ac      	ldr	r4, [r5, #8]
 8002cdc:	b913      	cbnz	r3, 8002ce4 <_puts_r+0x1c>
 8002cde:	4628      	mov	r0, r5
 8002ce0:	f000 fa34 	bl	800314c <__sinit>
 8002ce4:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <_puts_r+0xac>)
 8002ce6:	429c      	cmp	r4, r3
 8002ce8:	d117      	bne.n	8002d1a <_puts_r+0x52>
 8002cea:	686c      	ldr	r4, [r5, #4]
 8002cec:	89a3      	ldrh	r3, [r4, #12]
 8002cee:	071b      	lsls	r3, r3, #28
 8002cf0:	d51d      	bpl.n	8002d2e <_puts_r+0x66>
 8002cf2:	6923      	ldr	r3, [r4, #16]
 8002cf4:	b1db      	cbz	r3, 8002d2e <_puts_r+0x66>
 8002cf6:	3e01      	subs	r6, #1
 8002cf8:	68a3      	ldr	r3, [r4, #8]
 8002cfa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	60a3      	str	r3, [r4, #8]
 8002d02:	b9e9      	cbnz	r1, 8002d40 <_puts_r+0x78>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da2e      	bge.n	8002d66 <_puts_r+0x9e>
 8002d08:	4622      	mov	r2, r4
 8002d0a:	210a      	movs	r1, #10
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	f000 f86b 	bl	8002de8 <__swbuf_r>
 8002d12:	3001      	adds	r0, #1
 8002d14:	d011      	beq.n	8002d3a <_puts_r+0x72>
 8002d16:	200a      	movs	r0, #10
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <_puts_r+0xb0>)
 8002d1c:	429c      	cmp	r4, r3
 8002d1e:	d101      	bne.n	8002d24 <_puts_r+0x5c>
 8002d20:	68ac      	ldr	r4, [r5, #8]
 8002d22:	e7e3      	b.n	8002cec <_puts_r+0x24>
 8002d24:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <_puts_r+0xb4>)
 8002d26:	429c      	cmp	r4, r3
 8002d28:	bf08      	it	eq
 8002d2a:	68ec      	ldreq	r4, [r5, #12]
 8002d2c:	e7de      	b.n	8002cec <_puts_r+0x24>
 8002d2e:	4621      	mov	r1, r4
 8002d30:	4628      	mov	r0, r5
 8002d32:	f000 f8ab 	bl	8002e8c <__swsetup_r>
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d0dd      	beq.n	8002cf6 <_puts_r+0x2e>
 8002d3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d3e:	bd70      	pop	{r4, r5, r6, pc}
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	da04      	bge.n	8002d4e <_puts_r+0x86>
 8002d44:	69a2      	ldr	r2, [r4, #24]
 8002d46:	4293      	cmp	r3, r2
 8002d48:	db06      	blt.n	8002d58 <_puts_r+0x90>
 8002d4a:	290a      	cmp	r1, #10
 8002d4c:	d004      	beq.n	8002d58 <_puts_r+0x90>
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	6022      	str	r2, [r4, #0]
 8002d54:	7019      	strb	r1, [r3, #0]
 8002d56:	e7cf      	b.n	8002cf8 <_puts_r+0x30>
 8002d58:	4622      	mov	r2, r4
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	f000 f844 	bl	8002de8 <__swbuf_r>
 8002d60:	3001      	adds	r0, #1
 8002d62:	d1c9      	bne.n	8002cf8 <_puts_r+0x30>
 8002d64:	e7e9      	b.n	8002d3a <_puts_r+0x72>
 8002d66:	200a      	movs	r0, #10
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	6022      	str	r2, [r4, #0]
 8002d6e:	7018      	strb	r0, [r3, #0]
 8002d70:	bd70      	pop	{r4, r5, r6, pc}
 8002d72:	bf00      	nop
 8002d74:	08005a74 	.word	0x08005a74
 8002d78:	08005a94 	.word	0x08005a94
 8002d7c:	08005a54 	.word	0x08005a54

08002d80 <puts>:
 8002d80:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <puts+0xc>)
 8002d82:	4601      	mov	r1, r0
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	f7ff bf9f 	b.w	8002cc8 <_puts_r>
 8002d8a:	bf00      	nop
 8002d8c:	2000000c 	.word	0x2000000c

08002d90 <siprintf>:
 8002d90:	b40e      	push	{r1, r2, r3}
 8002d92:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002d96:	b500      	push	{lr}
 8002d98:	b09c      	sub	sp, #112	; 0x70
 8002d9a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002d9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002da2:	9104      	str	r1, [sp, #16]
 8002da4:	9107      	str	r1, [sp, #28]
 8002da6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002daa:	ab1d      	add	r3, sp, #116	; 0x74
 8002dac:	9002      	str	r0, [sp, #8]
 8002dae:	9006      	str	r0, [sp, #24]
 8002db0:	4808      	ldr	r0, [pc, #32]	; (8002dd4 <siprintf+0x44>)
 8002db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002db6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002dba:	6800      	ldr	r0, [r0, #0]
 8002dbc:	a902      	add	r1, sp, #8
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	f000 fbb8 	bl	8003534 <_svfiprintf_r>
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	9b02      	ldr	r3, [sp, #8]
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	b01c      	add	sp, #112	; 0x70
 8002dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dd0:	b003      	add	sp, #12
 8002dd2:	4770      	bx	lr
 8002dd4:	2000000c 	.word	0x2000000c

08002dd8 <strcpy>:
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dde:	f803 2b01 	strb.w	r2, [r3], #1
 8002de2:	2a00      	cmp	r2, #0
 8002de4:	d1f9      	bne.n	8002dda <strcpy+0x2>
 8002de6:	4770      	bx	lr

08002de8 <__swbuf_r>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	460e      	mov	r6, r1
 8002dec:	4614      	mov	r4, r2
 8002dee:	4605      	mov	r5, r0
 8002df0:	b118      	cbz	r0, 8002dfa <__swbuf_r+0x12>
 8002df2:	6983      	ldr	r3, [r0, #24]
 8002df4:	b90b      	cbnz	r3, 8002dfa <__swbuf_r+0x12>
 8002df6:	f000 f9a9 	bl	800314c <__sinit>
 8002dfa:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <__swbuf_r+0x98>)
 8002dfc:	429c      	cmp	r4, r3
 8002dfe:	d12a      	bne.n	8002e56 <__swbuf_r+0x6e>
 8002e00:	686c      	ldr	r4, [r5, #4]
 8002e02:	69a3      	ldr	r3, [r4, #24]
 8002e04:	60a3      	str	r3, [r4, #8]
 8002e06:	89a3      	ldrh	r3, [r4, #12]
 8002e08:	071a      	lsls	r2, r3, #28
 8002e0a:	d52e      	bpl.n	8002e6a <__swbuf_r+0x82>
 8002e0c:	6923      	ldr	r3, [r4, #16]
 8002e0e:	b363      	cbz	r3, 8002e6a <__swbuf_r+0x82>
 8002e10:	6923      	ldr	r3, [r4, #16]
 8002e12:	6820      	ldr	r0, [r4, #0]
 8002e14:	b2f6      	uxtb	r6, r6
 8002e16:	1ac0      	subs	r0, r0, r3
 8002e18:	6963      	ldr	r3, [r4, #20]
 8002e1a:	4637      	mov	r7, r6
 8002e1c:	4298      	cmp	r0, r3
 8002e1e:	db04      	blt.n	8002e2a <__swbuf_r+0x42>
 8002e20:	4621      	mov	r1, r4
 8002e22:	4628      	mov	r0, r5
 8002e24:	f000 f928 	bl	8003078 <_fflush_r>
 8002e28:	bb28      	cbnz	r0, 8002e76 <__swbuf_r+0x8e>
 8002e2a:	68a3      	ldr	r3, [r4, #8]
 8002e2c:	3001      	adds	r0, #1
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	60a3      	str	r3, [r4, #8]
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	6022      	str	r2, [r4, #0]
 8002e38:	701e      	strb	r6, [r3, #0]
 8002e3a:	6963      	ldr	r3, [r4, #20]
 8002e3c:	4298      	cmp	r0, r3
 8002e3e:	d004      	beq.n	8002e4a <__swbuf_r+0x62>
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	07db      	lsls	r3, r3, #31
 8002e44:	d519      	bpl.n	8002e7a <__swbuf_r+0x92>
 8002e46:	2e0a      	cmp	r6, #10
 8002e48:	d117      	bne.n	8002e7a <__swbuf_r+0x92>
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	f000 f913 	bl	8003078 <_fflush_r>
 8002e52:	b190      	cbz	r0, 8002e7a <__swbuf_r+0x92>
 8002e54:	e00f      	b.n	8002e76 <__swbuf_r+0x8e>
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <__swbuf_r+0x9c>)
 8002e58:	429c      	cmp	r4, r3
 8002e5a:	d101      	bne.n	8002e60 <__swbuf_r+0x78>
 8002e5c:	68ac      	ldr	r4, [r5, #8]
 8002e5e:	e7d0      	b.n	8002e02 <__swbuf_r+0x1a>
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <__swbuf_r+0xa0>)
 8002e62:	429c      	cmp	r4, r3
 8002e64:	bf08      	it	eq
 8002e66:	68ec      	ldreq	r4, [r5, #12]
 8002e68:	e7cb      	b.n	8002e02 <__swbuf_r+0x1a>
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f000 f80d 	bl	8002e8c <__swsetup_r>
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d0cc      	beq.n	8002e10 <__swbuf_r+0x28>
 8002e76:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	08005a74 	.word	0x08005a74
 8002e84:	08005a94 	.word	0x08005a94
 8002e88:	08005a54 	.word	0x08005a54

08002e8c <__swsetup_r>:
 8002e8c:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <__swsetup_r+0xcc>)
 8002e8e:	b570      	push	{r4, r5, r6, lr}
 8002e90:	681d      	ldr	r5, [r3, #0]
 8002e92:	4606      	mov	r6, r0
 8002e94:	460c      	mov	r4, r1
 8002e96:	b125      	cbz	r5, 8002ea2 <__swsetup_r+0x16>
 8002e98:	69ab      	ldr	r3, [r5, #24]
 8002e9a:	b913      	cbnz	r3, 8002ea2 <__swsetup_r+0x16>
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	f000 f955 	bl	800314c <__sinit>
 8002ea2:	4b2e      	ldr	r3, [pc, #184]	; (8002f5c <__swsetup_r+0xd0>)
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	d10f      	bne.n	8002ec8 <__swsetup_r+0x3c>
 8002ea8:	686c      	ldr	r4, [r5, #4]
 8002eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	0715      	lsls	r5, r2, #28
 8002eb2:	d42c      	bmi.n	8002f0e <__swsetup_r+0x82>
 8002eb4:	06d0      	lsls	r0, r2, #27
 8002eb6:	d411      	bmi.n	8002edc <__swsetup_r+0x50>
 8002eb8:	2209      	movs	r2, #9
 8002eba:	6032      	str	r2, [r6, #0]
 8002ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ec0:	81a3      	strh	r3, [r4, #12]
 8002ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <__swsetup_r+0xd4>)
 8002eca:	429c      	cmp	r4, r3
 8002ecc:	d101      	bne.n	8002ed2 <__swsetup_r+0x46>
 8002ece:	68ac      	ldr	r4, [r5, #8]
 8002ed0:	e7eb      	b.n	8002eaa <__swsetup_r+0x1e>
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <__swsetup_r+0xd8>)
 8002ed4:	429c      	cmp	r4, r3
 8002ed6:	bf08      	it	eq
 8002ed8:	68ec      	ldreq	r4, [r5, #12]
 8002eda:	e7e6      	b.n	8002eaa <__swsetup_r+0x1e>
 8002edc:	0751      	lsls	r1, r2, #29
 8002ede:	d512      	bpl.n	8002f06 <__swsetup_r+0x7a>
 8002ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ee2:	b141      	cbz	r1, 8002ef6 <__swsetup_r+0x6a>
 8002ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ee8:	4299      	cmp	r1, r3
 8002eea:	d002      	beq.n	8002ef2 <__swsetup_r+0x66>
 8002eec:	4630      	mov	r0, r6
 8002eee:	f000 fa1b 	bl	8003328 <_free_r>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6363      	str	r3, [r4, #52]	; 0x34
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002efc:	81a3      	strh	r3, [r4, #12]
 8002efe:	2300      	movs	r3, #0
 8002f00:	6063      	str	r3, [r4, #4]
 8002f02:	6923      	ldr	r3, [r4, #16]
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	89a3      	ldrh	r3, [r4, #12]
 8002f08:	f043 0308 	orr.w	r3, r3, #8
 8002f0c:	81a3      	strh	r3, [r4, #12]
 8002f0e:	6923      	ldr	r3, [r4, #16]
 8002f10:	b94b      	cbnz	r3, 8002f26 <__swsetup_r+0x9a>
 8002f12:	89a3      	ldrh	r3, [r4, #12]
 8002f14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1c:	d003      	beq.n	8002f26 <__swsetup_r+0x9a>
 8002f1e:	4621      	mov	r1, r4
 8002f20:	4630      	mov	r0, r6
 8002f22:	f000 f9c1 	bl	80032a8 <__smakebuf_r>
 8002f26:	89a2      	ldrh	r2, [r4, #12]
 8002f28:	f012 0301 	ands.w	r3, r2, #1
 8002f2c:	d00c      	beq.n	8002f48 <__swsetup_r+0xbc>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60a3      	str	r3, [r4, #8]
 8002f32:	6963      	ldr	r3, [r4, #20]
 8002f34:	425b      	negs	r3, r3
 8002f36:	61a3      	str	r3, [r4, #24]
 8002f38:	6923      	ldr	r3, [r4, #16]
 8002f3a:	b953      	cbnz	r3, 8002f52 <__swsetup_r+0xc6>
 8002f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f40:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002f44:	d1ba      	bne.n	8002ebc <__swsetup_r+0x30>
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	0792      	lsls	r2, r2, #30
 8002f4a:	bf58      	it	pl
 8002f4c:	6963      	ldrpl	r3, [r4, #20]
 8002f4e:	60a3      	str	r3, [r4, #8]
 8002f50:	e7f2      	b.n	8002f38 <__swsetup_r+0xac>
 8002f52:	2000      	movs	r0, #0
 8002f54:	e7f7      	b.n	8002f46 <__swsetup_r+0xba>
 8002f56:	bf00      	nop
 8002f58:	2000000c 	.word	0x2000000c
 8002f5c:	08005a74 	.word	0x08005a74
 8002f60:	08005a94 	.word	0x08005a94
 8002f64:	08005a54 	.word	0x08005a54

08002f68 <__sflush_r>:
 8002f68:	898a      	ldrh	r2, [r1, #12]
 8002f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f6e:	4605      	mov	r5, r0
 8002f70:	0710      	lsls	r0, r2, #28
 8002f72:	460c      	mov	r4, r1
 8002f74:	d45a      	bmi.n	800302c <__sflush_r+0xc4>
 8002f76:	684b      	ldr	r3, [r1, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	dc05      	bgt.n	8002f88 <__sflush_r+0x20>
 8002f7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	dc02      	bgt.n	8002f88 <__sflush_r+0x20>
 8002f82:	2000      	movs	r0, #0
 8002f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f8a:	2e00      	cmp	r6, #0
 8002f8c:	d0f9      	beq.n	8002f82 <__sflush_r+0x1a>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f94:	682f      	ldr	r7, [r5, #0]
 8002f96:	602b      	str	r3, [r5, #0]
 8002f98:	d033      	beq.n	8003002 <__sflush_r+0x9a>
 8002f9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	075a      	lsls	r2, r3, #29
 8002fa0:	d505      	bpl.n	8002fae <__sflush_r+0x46>
 8002fa2:	6863      	ldr	r3, [r4, #4]
 8002fa4:	1ac0      	subs	r0, r0, r3
 8002fa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fa8:	b10b      	cbz	r3, 8002fae <__sflush_r+0x46>
 8002faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fac:	1ac0      	subs	r0, r0, r3
 8002fae:	2300      	movs	r3, #0
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fb4:	6a21      	ldr	r1, [r4, #32]
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	47b0      	blx	r6
 8002fba:	1c43      	adds	r3, r0, #1
 8002fbc:	89a3      	ldrh	r3, [r4, #12]
 8002fbe:	d106      	bne.n	8002fce <__sflush_r+0x66>
 8002fc0:	6829      	ldr	r1, [r5, #0]
 8002fc2:	291d      	cmp	r1, #29
 8002fc4:	d84b      	bhi.n	800305e <__sflush_r+0xf6>
 8002fc6:	4a2b      	ldr	r2, [pc, #172]	; (8003074 <__sflush_r+0x10c>)
 8002fc8:	40ca      	lsrs	r2, r1
 8002fca:	07d6      	lsls	r6, r2, #31
 8002fcc:	d547      	bpl.n	800305e <__sflush_r+0xf6>
 8002fce:	2200      	movs	r2, #0
 8002fd0:	6062      	str	r2, [r4, #4]
 8002fd2:	6922      	ldr	r2, [r4, #16]
 8002fd4:	04d9      	lsls	r1, r3, #19
 8002fd6:	6022      	str	r2, [r4, #0]
 8002fd8:	d504      	bpl.n	8002fe4 <__sflush_r+0x7c>
 8002fda:	1c42      	adds	r2, r0, #1
 8002fdc:	d101      	bne.n	8002fe2 <__sflush_r+0x7a>
 8002fde:	682b      	ldr	r3, [r5, #0]
 8002fe0:	b903      	cbnz	r3, 8002fe4 <__sflush_r+0x7c>
 8002fe2:	6560      	str	r0, [r4, #84]	; 0x54
 8002fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fe6:	602f      	str	r7, [r5, #0]
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	d0ca      	beq.n	8002f82 <__sflush_r+0x1a>
 8002fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ff0:	4299      	cmp	r1, r3
 8002ff2:	d002      	beq.n	8002ffa <__sflush_r+0x92>
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	f000 f997 	bl	8003328 <_free_r>
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	6360      	str	r0, [r4, #52]	; 0x34
 8002ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003002:	6a21      	ldr	r1, [r4, #32]
 8003004:	2301      	movs	r3, #1
 8003006:	4628      	mov	r0, r5
 8003008:	47b0      	blx	r6
 800300a:	1c41      	adds	r1, r0, #1
 800300c:	d1c6      	bne.n	8002f9c <__sflush_r+0x34>
 800300e:	682b      	ldr	r3, [r5, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0c3      	beq.n	8002f9c <__sflush_r+0x34>
 8003014:	2b1d      	cmp	r3, #29
 8003016:	d001      	beq.n	800301c <__sflush_r+0xb4>
 8003018:	2b16      	cmp	r3, #22
 800301a:	d101      	bne.n	8003020 <__sflush_r+0xb8>
 800301c:	602f      	str	r7, [r5, #0]
 800301e:	e7b0      	b.n	8002f82 <__sflush_r+0x1a>
 8003020:	89a3      	ldrh	r3, [r4, #12]
 8003022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003026:	81a3      	strh	r3, [r4, #12]
 8003028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800302c:	690f      	ldr	r7, [r1, #16]
 800302e:	2f00      	cmp	r7, #0
 8003030:	d0a7      	beq.n	8002f82 <__sflush_r+0x1a>
 8003032:	0793      	lsls	r3, r2, #30
 8003034:	bf18      	it	ne
 8003036:	2300      	movne	r3, #0
 8003038:	680e      	ldr	r6, [r1, #0]
 800303a:	bf08      	it	eq
 800303c:	694b      	ldreq	r3, [r1, #20]
 800303e:	eba6 0807 	sub.w	r8, r6, r7
 8003042:	600f      	str	r7, [r1, #0]
 8003044:	608b      	str	r3, [r1, #8]
 8003046:	f1b8 0f00 	cmp.w	r8, #0
 800304a:	dd9a      	ble.n	8002f82 <__sflush_r+0x1a>
 800304c:	4643      	mov	r3, r8
 800304e:	463a      	mov	r2, r7
 8003050:	6a21      	ldr	r1, [r4, #32]
 8003052:	4628      	mov	r0, r5
 8003054:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003056:	47b0      	blx	r6
 8003058:	2800      	cmp	r0, #0
 800305a:	dc07      	bgt.n	800306c <__sflush_r+0x104>
 800305c:	89a3      	ldrh	r3, [r4, #12]
 800305e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003062:	81a3      	strh	r3, [r4, #12]
 8003064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800306c:	4407      	add	r7, r0
 800306e:	eba8 0800 	sub.w	r8, r8, r0
 8003072:	e7e8      	b.n	8003046 <__sflush_r+0xde>
 8003074:	20400001 	.word	0x20400001

08003078 <_fflush_r>:
 8003078:	b538      	push	{r3, r4, r5, lr}
 800307a:	690b      	ldr	r3, [r1, #16]
 800307c:	4605      	mov	r5, r0
 800307e:	460c      	mov	r4, r1
 8003080:	b1db      	cbz	r3, 80030ba <_fflush_r+0x42>
 8003082:	b118      	cbz	r0, 800308c <_fflush_r+0x14>
 8003084:	6983      	ldr	r3, [r0, #24]
 8003086:	b90b      	cbnz	r3, 800308c <_fflush_r+0x14>
 8003088:	f000 f860 	bl	800314c <__sinit>
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <_fflush_r+0x48>)
 800308e:	429c      	cmp	r4, r3
 8003090:	d109      	bne.n	80030a6 <_fflush_r+0x2e>
 8003092:	686c      	ldr	r4, [r5, #4]
 8003094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003098:	b17b      	cbz	r3, 80030ba <_fflush_r+0x42>
 800309a:	4621      	mov	r1, r4
 800309c:	4628      	mov	r0, r5
 800309e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030a2:	f7ff bf61 	b.w	8002f68 <__sflush_r>
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <_fflush_r+0x4c>)
 80030a8:	429c      	cmp	r4, r3
 80030aa:	d101      	bne.n	80030b0 <_fflush_r+0x38>
 80030ac:	68ac      	ldr	r4, [r5, #8]
 80030ae:	e7f1      	b.n	8003094 <_fflush_r+0x1c>
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <_fflush_r+0x50>)
 80030b2:	429c      	cmp	r4, r3
 80030b4:	bf08      	it	eq
 80030b6:	68ec      	ldreq	r4, [r5, #12]
 80030b8:	e7ec      	b.n	8003094 <_fflush_r+0x1c>
 80030ba:	2000      	movs	r0, #0
 80030bc:	bd38      	pop	{r3, r4, r5, pc}
 80030be:	bf00      	nop
 80030c0:	08005a74 	.word	0x08005a74
 80030c4:	08005a94 	.word	0x08005a94
 80030c8:	08005a54 	.word	0x08005a54

080030cc <_cleanup_r>:
 80030cc:	4901      	ldr	r1, [pc, #4]	; (80030d4 <_cleanup_r+0x8>)
 80030ce:	f000 b8a9 	b.w	8003224 <_fwalk_reent>
 80030d2:	bf00      	nop
 80030d4:	08003079 	.word	0x08003079

080030d8 <std.isra.0>:
 80030d8:	2300      	movs	r3, #0
 80030da:	b510      	push	{r4, lr}
 80030dc:	4604      	mov	r4, r0
 80030de:	6003      	str	r3, [r0, #0]
 80030e0:	6043      	str	r3, [r0, #4]
 80030e2:	6083      	str	r3, [r0, #8]
 80030e4:	8181      	strh	r1, [r0, #12]
 80030e6:	6643      	str	r3, [r0, #100]	; 0x64
 80030e8:	81c2      	strh	r2, [r0, #14]
 80030ea:	6103      	str	r3, [r0, #16]
 80030ec:	6143      	str	r3, [r0, #20]
 80030ee:	6183      	str	r3, [r0, #24]
 80030f0:	4619      	mov	r1, r3
 80030f2:	2208      	movs	r2, #8
 80030f4:	305c      	adds	r0, #92	; 0x5c
 80030f6:	f7ff fddf 	bl	8002cb8 <memset>
 80030fa:	4b05      	ldr	r3, [pc, #20]	; (8003110 <std.isra.0+0x38>)
 80030fc:	6224      	str	r4, [r4, #32]
 80030fe:	6263      	str	r3, [r4, #36]	; 0x24
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <std.isra.0+0x3c>)
 8003102:	62a3      	str	r3, [r4, #40]	; 0x28
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <std.isra.0+0x40>)
 8003106:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <std.isra.0+0x44>)
 800310a:	6323      	str	r3, [r4, #48]	; 0x30
 800310c:	bd10      	pop	{r4, pc}
 800310e:	bf00      	nop
 8003110:	08003a6d 	.word	0x08003a6d
 8003114:	08003a8f 	.word	0x08003a8f
 8003118:	08003ac7 	.word	0x08003ac7
 800311c:	08003aeb 	.word	0x08003aeb

08003120 <__sfmoreglue>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	2568      	movs	r5, #104	; 0x68
 8003124:	1e4a      	subs	r2, r1, #1
 8003126:	4355      	muls	r5, r2
 8003128:	460e      	mov	r6, r1
 800312a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800312e:	f000 f947 	bl	80033c0 <_malloc_r>
 8003132:	4604      	mov	r4, r0
 8003134:	b140      	cbz	r0, 8003148 <__sfmoreglue+0x28>
 8003136:	2100      	movs	r1, #0
 8003138:	e880 0042 	stmia.w	r0, {r1, r6}
 800313c:	300c      	adds	r0, #12
 800313e:	60a0      	str	r0, [r4, #8]
 8003140:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003144:	f7ff fdb8 	bl	8002cb8 <memset>
 8003148:	4620      	mov	r0, r4
 800314a:	bd70      	pop	{r4, r5, r6, pc}

0800314c <__sinit>:
 800314c:	6983      	ldr	r3, [r0, #24]
 800314e:	b510      	push	{r4, lr}
 8003150:	4604      	mov	r4, r0
 8003152:	bb33      	cbnz	r3, 80031a2 <__sinit+0x56>
 8003154:	6483      	str	r3, [r0, #72]	; 0x48
 8003156:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003158:	6503      	str	r3, [r0, #80]	; 0x50
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <__sinit+0x58>)
 800315c:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <__sinit+0x5c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6282      	str	r2, [r0, #40]	; 0x28
 8003162:	4298      	cmp	r0, r3
 8003164:	bf04      	itt	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	6183      	streq	r3, [r0, #24]
 800316a:	f000 f81f 	bl	80031ac <__sfp>
 800316e:	6060      	str	r0, [r4, #4]
 8003170:	4620      	mov	r0, r4
 8003172:	f000 f81b 	bl	80031ac <__sfp>
 8003176:	60a0      	str	r0, [r4, #8]
 8003178:	4620      	mov	r0, r4
 800317a:	f000 f817 	bl	80031ac <__sfp>
 800317e:	2200      	movs	r2, #0
 8003180:	60e0      	str	r0, [r4, #12]
 8003182:	2104      	movs	r1, #4
 8003184:	6860      	ldr	r0, [r4, #4]
 8003186:	f7ff ffa7 	bl	80030d8 <std.isra.0>
 800318a:	2201      	movs	r2, #1
 800318c:	2109      	movs	r1, #9
 800318e:	68a0      	ldr	r0, [r4, #8]
 8003190:	f7ff ffa2 	bl	80030d8 <std.isra.0>
 8003194:	2202      	movs	r2, #2
 8003196:	2112      	movs	r1, #18
 8003198:	68e0      	ldr	r0, [r4, #12]
 800319a:	f7ff ff9d 	bl	80030d8 <std.isra.0>
 800319e:	2301      	movs	r3, #1
 80031a0:	61a3      	str	r3, [r4, #24]
 80031a2:	bd10      	pop	{r4, pc}
 80031a4:	08005a50 	.word	0x08005a50
 80031a8:	080030cd 	.word	0x080030cd

080031ac <__sfp>:
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <__sfp+0x74>)
 80031b0:	4607      	mov	r7, r0
 80031b2:	681e      	ldr	r6, [r3, #0]
 80031b4:	69b3      	ldr	r3, [r6, #24]
 80031b6:	b913      	cbnz	r3, 80031be <__sfp+0x12>
 80031b8:	4630      	mov	r0, r6
 80031ba:	f7ff ffc7 	bl	800314c <__sinit>
 80031be:	3648      	adds	r6, #72	; 0x48
 80031c0:	68b4      	ldr	r4, [r6, #8]
 80031c2:	6873      	ldr	r3, [r6, #4]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	d503      	bpl.n	80031d0 <__sfp+0x24>
 80031c8:	6833      	ldr	r3, [r6, #0]
 80031ca:	b133      	cbz	r3, 80031da <__sfp+0x2e>
 80031cc:	6836      	ldr	r6, [r6, #0]
 80031ce:	e7f7      	b.n	80031c0 <__sfp+0x14>
 80031d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031d4:	b16d      	cbz	r5, 80031f2 <__sfp+0x46>
 80031d6:	3468      	adds	r4, #104	; 0x68
 80031d8:	e7f4      	b.n	80031c4 <__sfp+0x18>
 80031da:	2104      	movs	r1, #4
 80031dc:	4638      	mov	r0, r7
 80031de:	f7ff ff9f 	bl	8003120 <__sfmoreglue>
 80031e2:	6030      	str	r0, [r6, #0]
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d1f1      	bne.n	80031cc <__sfp+0x20>
 80031e8:	230c      	movs	r3, #12
 80031ea:	4604      	mov	r4, r0
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4620      	mov	r0, r4
 80031f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031f6:	81e3      	strh	r3, [r4, #14]
 80031f8:	2301      	movs	r3, #1
 80031fa:	6665      	str	r5, [r4, #100]	; 0x64
 80031fc:	81a3      	strh	r3, [r4, #12]
 80031fe:	6025      	str	r5, [r4, #0]
 8003200:	60a5      	str	r5, [r4, #8]
 8003202:	6065      	str	r5, [r4, #4]
 8003204:	6125      	str	r5, [r4, #16]
 8003206:	6165      	str	r5, [r4, #20]
 8003208:	61a5      	str	r5, [r4, #24]
 800320a:	2208      	movs	r2, #8
 800320c:	4629      	mov	r1, r5
 800320e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003212:	f7ff fd51 	bl	8002cb8 <memset>
 8003216:	6365      	str	r5, [r4, #52]	; 0x34
 8003218:	63a5      	str	r5, [r4, #56]	; 0x38
 800321a:	64a5      	str	r5, [r4, #72]	; 0x48
 800321c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800321e:	e7e6      	b.n	80031ee <__sfp+0x42>
 8003220:	08005a50 	.word	0x08005a50

08003224 <_fwalk_reent>:
 8003224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003228:	4680      	mov	r8, r0
 800322a:	4689      	mov	r9, r1
 800322c:	2600      	movs	r6, #0
 800322e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003232:	b914      	cbnz	r4, 800323a <_fwalk_reent+0x16>
 8003234:	4630      	mov	r0, r6
 8003236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800323a:	68a5      	ldr	r5, [r4, #8]
 800323c:	6867      	ldr	r7, [r4, #4]
 800323e:	3f01      	subs	r7, #1
 8003240:	d501      	bpl.n	8003246 <_fwalk_reent+0x22>
 8003242:	6824      	ldr	r4, [r4, #0]
 8003244:	e7f5      	b.n	8003232 <_fwalk_reent+0xe>
 8003246:	89ab      	ldrh	r3, [r5, #12]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d907      	bls.n	800325c <_fwalk_reent+0x38>
 800324c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003250:	3301      	adds	r3, #1
 8003252:	d003      	beq.n	800325c <_fwalk_reent+0x38>
 8003254:	4629      	mov	r1, r5
 8003256:	4640      	mov	r0, r8
 8003258:	47c8      	blx	r9
 800325a:	4306      	orrs	r6, r0
 800325c:	3568      	adds	r5, #104	; 0x68
 800325e:	e7ee      	b.n	800323e <_fwalk_reent+0x1a>

08003260 <__swhatbuf_r>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	460e      	mov	r6, r1
 8003264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003268:	b090      	sub	sp, #64	; 0x40
 800326a:	2900      	cmp	r1, #0
 800326c:	4614      	mov	r4, r2
 800326e:	461d      	mov	r5, r3
 8003270:	da07      	bge.n	8003282 <__swhatbuf_r+0x22>
 8003272:	2300      	movs	r3, #0
 8003274:	602b      	str	r3, [r5, #0]
 8003276:	89b3      	ldrh	r3, [r6, #12]
 8003278:	061a      	lsls	r2, r3, #24
 800327a:	d410      	bmi.n	800329e <__swhatbuf_r+0x3e>
 800327c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003280:	e00e      	b.n	80032a0 <__swhatbuf_r+0x40>
 8003282:	aa01      	add	r2, sp, #4
 8003284:	f000 fc58 	bl	8003b38 <_fstat_r>
 8003288:	2800      	cmp	r0, #0
 800328a:	dbf2      	blt.n	8003272 <__swhatbuf_r+0x12>
 800328c:	9a02      	ldr	r2, [sp, #8]
 800328e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003292:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003296:	425a      	negs	r2, r3
 8003298:	415a      	adcs	r2, r3
 800329a:	602a      	str	r2, [r5, #0]
 800329c:	e7ee      	b.n	800327c <__swhatbuf_r+0x1c>
 800329e:	2340      	movs	r3, #64	; 0x40
 80032a0:	2000      	movs	r0, #0
 80032a2:	6023      	str	r3, [r4, #0]
 80032a4:	b010      	add	sp, #64	; 0x40
 80032a6:	bd70      	pop	{r4, r5, r6, pc}

080032a8 <__smakebuf_r>:
 80032a8:	898b      	ldrh	r3, [r1, #12]
 80032aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032ac:	079d      	lsls	r5, r3, #30
 80032ae:	4606      	mov	r6, r0
 80032b0:	460c      	mov	r4, r1
 80032b2:	d507      	bpl.n	80032c4 <__smakebuf_r+0x1c>
 80032b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032b8:	6023      	str	r3, [r4, #0]
 80032ba:	6123      	str	r3, [r4, #16]
 80032bc:	2301      	movs	r3, #1
 80032be:	6163      	str	r3, [r4, #20]
 80032c0:	b002      	add	sp, #8
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	ab01      	add	r3, sp, #4
 80032c6:	466a      	mov	r2, sp
 80032c8:	f7ff ffca 	bl	8003260 <__swhatbuf_r>
 80032cc:	9900      	ldr	r1, [sp, #0]
 80032ce:	4605      	mov	r5, r0
 80032d0:	4630      	mov	r0, r6
 80032d2:	f000 f875 	bl	80033c0 <_malloc_r>
 80032d6:	b948      	cbnz	r0, 80032ec <__smakebuf_r+0x44>
 80032d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032dc:	059a      	lsls	r2, r3, #22
 80032de:	d4ef      	bmi.n	80032c0 <__smakebuf_r+0x18>
 80032e0:	f023 0303 	bic.w	r3, r3, #3
 80032e4:	f043 0302 	orr.w	r3, r3, #2
 80032e8:	81a3      	strh	r3, [r4, #12]
 80032ea:	e7e3      	b.n	80032b4 <__smakebuf_r+0xc>
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <__smakebuf_r+0x7c>)
 80032ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80032f0:	89a3      	ldrh	r3, [r4, #12]
 80032f2:	6020      	str	r0, [r4, #0]
 80032f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f8:	81a3      	strh	r3, [r4, #12]
 80032fa:	9b00      	ldr	r3, [sp, #0]
 80032fc:	6120      	str	r0, [r4, #16]
 80032fe:	6163      	str	r3, [r4, #20]
 8003300:	9b01      	ldr	r3, [sp, #4]
 8003302:	b15b      	cbz	r3, 800331c <__smakebuf_r+0x74>
 8003304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003308:	4630      	mov	r0, r6
 800330a:	f000 fc27 	bl	8003b5c <_isatty_r>
 800330e:	b128      	cbz	r0, 800331c <__smakebuf_r+0x74>
 8003310:	89a3      	ldrh	r3, [r4, #12]
 8003312:	f023 0303 	bic.w	r3, r3, #3
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	81a3      	strh	r3, [r4, #12]
 800331c:	89a3      	ldrh	r3, [r4, #12]
 800331e:	431d      	orrs	r5, r3
 8003320:	81a5      	strh	r5, [r4, #12]
 8003322:	e7cd      	b.n	80032c0 <__smakebuf_r+0x18>
 8003324:	080030cd 	.word	0x080030cd

08003328 <_free_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	4605      	mov	r5, r0
 800332c:	2900      	cmp	r1, #0
 800332e:	d043      	beq.n	80033b8 <_free_r+0x90>
 8003330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003334:	1f0c      	subs	r4, r1, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	bfb8      	it	lt
 800333a:	18e4      	addlt	r4, r4, r3
 800333c:	f000 fc63 	bl	8003c06 <__malloc_lock>
 8003340:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <_free_r+0x94>)
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	4610      	mov	r0, r2
 8003346:	b933      	cbnz	r3, 8003356 <_free_r+0x2e>
 8003348:	6063      	str	r3, [r4, #4]
 800334a:	6014      	str	r4, [r2, #0]
 800334c:	4628      	mov	r0, r5
 800334e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003352:	f000 bc59 	b.w	8003c08 <__malloc_unlock>
 8003356:	42a3      	cmp	r3, r4
 8003358:	d90b      	bls.n	8003372 <_free_r+0x4a>
 800335a:	6821      	ldr	r1, [r4, #0]
 800335c:	1862      	adds	r2, r4, r1
 800335e:	4293      	cmp	r3, r2
 8003360:	bf01      	itttt	eq
 8003362:	681a      	ldreq	r2, [r3, #0]
 8003364:	685b      	ldreq	r3, [r3, #4]
 8003366:	1852      	addeq	r2, r2, r1
 8003368:	6022      	streq	r2, [r4, #0]
 800336a:	6063      	str	r3, [r4, #4]
 800336c:	6004      	str	r4, [r0, #0]
 800336e:	e7ed      	b.n	800334c <_free_r+0x24>
 8003370:	4613      	mov	r3, r2
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	b10a      	cbz	r2, 800337a <_free_r+0x52>
 8003376:	42a2      	cmp	r2, r4
 8003378:	d9fa      	bls.n	8003370 <_free_r+0x48>
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	1858      	adds	r0, r3, r1
 800337e:	42a0      	cmp	r0, r4
 8003380:	d10b      	bne.n	800339a <_free_r+0x72>
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	4401      	add	r1, r0
 8003386:	1858      	adds	r0, r3, r1
 8003388:	4282      	cmp	r2, r0
 800338a:	6019      	str	r1, [r3, #0]
 800338c:	d1de      	bne.n	800334c <_free_r+0x24>
 800338e:	6810      	ldr	r0, [r2, #0]
 8003390:	6852      	ldr	r2, [r2, #4]
 8003392:	4401      	add	r1, r0
 8003394:	6019      	str	r1, [r3, #0]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	e7d8      	b.n	800334c <_free_r+0x24>
 800339a:	d902      	bls.n	80033a2 <_free_r+0x7a>
 800339c:	230c      	movs	r3, #12
 800339e:	602b      	str	r3, [r5, #0]
 80033a0:	e7d4      	b.n	800334c <_free_r+0x24>
 80033a2:	6820      	ldr	r0, [r4, #0]
 80033a4:	1821      	adds	r1, r4, r0
 80033a6:	428a      	cmp	r2, r1
 80033a8:	bf01      	itttt	eq
 80033aa:	6811      	ldreq	r1, [r2, #0]
 80033ac:	6852      	ldreq	r2, [r2, #4]
 80033ae:	1809      	addeq	r1, r1, r0
 80033b0:	6021      	streq	r1, [r4, #0]
 80033b2:	6062      	str	r2, [r4, #4]
 80033b4:	605c      	str	r4, [r3, #4]
 80033b6:	e7c9      	b.n	800334c <_free_r+0x24>
 80033b8:	bd38      	pop	{r3, r4, r5, pc}
 80033ba:	bf00      	nop
 80033bc:	200001a0 	.word	0x200001a0

080033c0 <_malloc_r>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	1ccd      	adds	r5, r1, #3
 80033c4:	f025 0503 	bic.w	r5, r5, #3
 80033c8:	3508      	adds	r5, #8
 80033ca:	2d0c      	cmp	r5, #12
 80033cc:	bf38      	it	cc
 80033ce:	250c      	movcc	r5, #12
 80033d0:	2d00      	cmp	r5, #0
 80033d2:	4606      	mov	r6, r0
 80033d4:	db01      	blt.n	80033da <_malloc_r+0x1a>
 80033d6:	42a9      	cmp	r1, r5
 80033d8:	d903      	bls.n	80033e2 <_malloc_r+0x22>
 80033da:	230c      	movs	r3, #12
 80033dc:	6033      	str	r3, [r6, #0]
 80033de:	2000      	movs	r0, #0
 80033e0:	bd70      	pop	{r4, r5, r6, pc}
 80033e2:	f000 fc10 	bl	8003c06 <__malloc_lock>
 80033e6:	4a23      	ldr	r2, [pc, #140]	; (8003474 <_malloc_r+0xb4>)
 80033e8:	6814      	ldr	r4, [r2, #0]
 80033ea:	4621      	mov	r1, r4
 80033ec:	b991      	cbnz	r1, 8003414 <_malloc_r+0x54>
 80033ee:	4c22      	ldr	r4, [pc, #136]	; (8003478 <_malloc_r+0xb8>)
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	b91b      	cbnz	r3, 80033fc <_malloc_r+0x3c>
 80033f4:	4630      	mov	r0, r6
 80033f6:	f000 fb29 	bl	8003a4c <_sbrk_r>
 80033fa:	6020      	str	r0, [r4, #0]
 80033fc:	4629      	mov	r1, r5
 80033fe:	4630      	mov	r0, r6
 8003400:	f000 fb24 	bl	8003a4c <_sbrk_r>
 8003404:	1c43      	adds	r3, r0, #1
 8003406:	d126      	bne.n	8003456 <_malloc_r+0x96>
 8003408:	230c      	movs	r3, #12
 800340a:	4630      	mov	r0, r6
 800340c:	6033      	str	r3, [r6, #0]
 800340e:	f000 fbfb 	bl	8003c08 <__malloc_unlock>
 8003412:	e7e4      	b.n	80033de <_malloc_r+0x1e>
 8003414:	680b      	ldr	r3, [r1, #0]
 8003416:	1b5b      	subs	r3, r3, r5
 8003418:	d41a      	bmi.n	8003450 <_malloc_r+0x90>
 800341a:	2b0b      	cmp	r3, #11
 800341c:	d90f      	bls.n	800343e <_malloc_r+0x7e>
 800341e:	600b      	str	r3, [r1, #0]
 8003420:	18cc      	adds	r4, r1, r3
 8003422:	50cd      	str	r5, [r1, r3]
 8003424:	4630      	mov	r0, r6
 8003426:	f000 fbef 	bl	8003c08 <__malloc_unlock>
 800342a:	f104 000b 	add.w	r0, r4, #11
 800342e:	1d23      	adds	r3, r4, #4
 8003430:	f020 0007 	bic.w	r0, r0, #7
 8003434:	1ac3      	subs	r3, r0, r3
 8003436:	d01b      	beq.n	8003470 <_malloc_r+0xb0>
 8003438:	425a      	negs	r2, r3
 800343a:	50e2      	str	r2, [r4, r3]
 800343c:	bd70      	pop	{r4, r5, r6, pc}
 800343e:	428c      	cmp	r4, r1
 8003440:	bf0b      	itete	eq
 8003442:	6863      	ldreq	r3, [r4, #4]
 8003444:	684b      	ldrne	r3, [r1, #4]
 8003446:	6013      	streq	r3, [r2, #0]
 8003448:	6063      	strne	r3, [r4, #4]
 800344a:	bf18      	it	ne
 800344c:	460c      	movne	r4, r1
 800344e:	e7e9      	b.n	8003424 <_malloc_r+0x64>
 8003450:	460c      	mov	r4, r1
 8003452:	6849      	ldr	r1, [r1, #4]
 8003454:	e7ca      	b.n	80033ec <_malloc_r+0x2c>
 8003456:	1cc4      	adds	r4, r0, #3
 8003458:	f024 0403 	bic.w	r4, r4, #3
 800345c:	42a0      	cmp	r0, r4
 800345e:	d005      	beq.n	800346c <_malloc_r+0xac>
 8003460:	1a21      	subs	r1, r4, r0
 8003462:	4630      	mov	r0, r6
 8003464:	f000 faf2 	bl	8003a4c <_sbrk_r>
 8003468:	3001      	adds	r0, #1
 800346a:	d0cd      	beq.n	8003408 <_malloc_r+0x48>
 800346c:	6025      	str	r5, [r4, #0]
 800346e:	e7d9      	b.n	8003424 <_malloc_r+0x64>
 8003470:	bd70      	pop	{r4, r5, r6, pc}
 8003472:	bf00      	nop
 8003474:	200001a0 	.word	0x200001a0
 8003478:	200001a4 	.word	0x200001a4

0800347c <__ssputs_r>:
 800347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003480:	688e      	ldr	r6, [r1, #8]
 8003482:	4682      	mov	sl, r0
 8003484:	429e      	cmp	r6, r3
 8003486:	460c      	mov	r4, r1
 8003488:	4691      	mov	r9, r2
 800348a:	4698      	mov	r8, r3
 800348c:	d835      	bhi.n	80034fa <__ssputs_r+0x7e>
 800348e:	898a      	ldrh	r2, [r1, #12]
 8003490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003494:	d031      	beq.n	80034fa <__ssputs_r+0x7e>
 8003496:	2302      	movs	r3, #2
 8003498:	6825      	ldr	r5, [r4, #0]
 800349a:	6909      	ldr	r1, [r1, #16]
 800349c:	1a6f      	subs	r7, r5, r1
 800349e:	6965      	ldr	r5, [r4, #20]
 80034a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80034a8:	f108 0301 	add.w	r3, r8, #1
 80034ac:	443b      	add	r3, r7
 80034ae:	429d      	cmp	r5, r3
 80034b0:	bf38      	it	cc
 80034b2:	461d      	movcc	r5, r3
 80034b4:	0553      	lsls	r3, r2, #21
 80034b6:	d531      	bpl.n	800351c <__ssputs_r+0xa0>
 80034b8:	4629      	mov	r1, r5
 80034ba:	f7ff ff81 	bl	80033c0 <_malloc_r>
 80034be:	4606      	mov	r6, r0
 80034c0:	b950      	cbnz	r0, 80034d8 <__ssputs_r+0x5c>
 80034c2:	230c      	movs	r3, #12
 80034c4:	f8ca 3000 	str.w	r3, [sl]
 80034c8:	89a3      	ldrh	r3, [r4, #12]
 80034ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034d2:	81a3      	strh	r3, [r4, #12]
 80034d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d8:	463a      	mov	r2, r7
 80034da:	6921      	ldr	r1, [r4, #16]
 80034dc:	f000 fb6e 	bl	8003bbc <memcpy>
 80034e0:	89a3      	ldrh	r3, [r4, #12]
 80034e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ea:	81a3      	strh	r3, [r4, #12]
 80034ec:	6126      	str	r6, [r4, #16]
 80034ee:	443e      	add	r6, r7
 80034f0:	6026      	str	r6, [r4, #0]
 80034f2:	4646      	mov	r6, r8
 80034f4:	6165      	str	r5, [r4, #20]
 80034f6:	1bed      	subs	r5, r5, r7
 80034f8:	60a5      	str	r5, [r4, #8]
 80034fa:	4546      	cmp	r6, r8
 80034fc:	bf28      	it	cs
 80034fe:	4646      	movcs	r6, r8
 8003500:	4649      	mov	r1, r9
 8003502:	4632      	mov	r2, r6
 8003504:	6820      	ldr	r0, [r4, #0]
 8003506:	f000 fb64 	bl	8003bd2 <memmove>
 800350a:	68a3      	ldr	r3, [r4, #8]
 800350c:	2000      	movs	r0, #0
 800350e:	1b9b      	subs	r3, r3, r6
 8003510:	60a3      	str	r3, [r4, #8]
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	441e      	add	r6, r3
 8003516:	6026      	str	r6, [r4, #0]
 8003518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351c:	462a      	mov	r2, r5
 800351e:	f000 fb74 	bl	8003c0a <_realloc_r>
 8003522:	4606      	mov	r6, r0
 8003524:	2800      	cmp	r0, #0
 8003526:	d1e1      	bne.n	80034ec <__ssputs_r+0x70>
 8003528:	6921      	ldr	r1, [r4, #16]
 800352a:	4650      	mov	r0, sl
 800352c:	f7ff fefc 	bl	8003328 <_free_r>
 8003530:	e7c7      	b.n	80034c2 <__ssputs_r+0x46>
	...

08003534 <_svfiprintf_r>:
 8003534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003538:	b09d      	sub	sp, #116	; 0x74
 800353a:	9303      	str	r3, [sp, #12]
 800353c:	898b      	ldrh	r3, [r1, #12]
 800353e:	4680      	mov	r8, r0
 8003540:	061c      	lsls	r4, r3, #24
 8003542:	460d      	mov	r5, r1
 8003544:	4616      	mov	r6, r2
 8003546:	d50f      	bpl.n	8003568 <_svfiprintf_r+0x34>
 8003548:	690b      	ldr	r3, [r1, #16]
 800354a:	b96b      	cbnz	r3, 8003568 <_svfiprintf_r+0x34>
 800354c:	2140      	movs	r1, #64	; 0x40
 800354e:	f7ff ff37 	bl	80033c0 <_malloc_r>
 8003552:	6028      	str	r0, [r5, #0]
 8003554:	6128      	str	r0, [r5, #16]
 8003556:	b928      	cbnz	r0, 8003564 <_svfiprintf_r+0x30>
 8003558:	230c      	movs	r3, #12
 800355a:	f8c8 3000 	str.w	r3, [r8]
 800355e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003562:	e0c4      	b.n	80036ee <_svfiprintf_r+0x1ba>
 8003564:	2340      	movs	r3, #64	; 0x40
 8003566:	616b      	str	r3, [r5, #20]
 8003568:	2300      	movs	r3, #0
 800356a:	9309      	str	r3, [sp, #36]	; 0x24
 800356c:	2320      	movs	r3, #32
 800356e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003572:	2330      	movs	r3, #48	; 0x30
 8003574:	f04f 0b01 	mov.w	fp, #1
 8003578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800357c:	4637      	mov	r7, r6
 800357e:	463c      	mov	r4, r7
 8003580:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d13c      	bne.n	8003602 <_svfiprintf_r+0xce>
 8003588:	ebb7 0a06 	subs.w	sl, r7, r6
 800358c:	d00b      	beq.n	80035a6 <_svfiprintf_r+0x72>
 800358e:	4653      	mov	r3, sl
 8003590:	4632      	mov	r2, r6
 8003592:	4629      	mov	r1, r5
 8003594:	4640      	mov	r0, r8
 8003596:	f7ff ff71 	bl	800347c <__ssputs_r>
 800359a:	3001      	adds	r0, #1
 800359c:	f000 80a2 	beq.w	80036e4 <_svfiprintf_r+0x1b0>
 80035a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035a2:	4453      	add	r3, sl
 80035a4:	9309      	str	r3, [sp, #36]	; 0x24
 80035a6:	783b      	ldrb	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 809b 	beq.w	80036e4 <_svfiprintf_r+0x1b0>
 80035ae:	2300      	movs	r3, #0
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035b4:	9304      	str	r3, [sp, #16]
 80035b6:	9307      	str	r3, [sp, #28]
 80035b8:	9205      	str	r2, [sp, #20]
 80035ba:	9306      	str	r3, [sp, #24]
 80035bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035c0:	931a      	str	r3, [sp, #104]	; 0x68
 80035c2:	2205      	movs	r2, #5
 80035c4:	7821      	ldrb	r1, [r4, #0]
 80035c6:	4850      	ldr	r0, [pc, #320]	; (8003708 <_svfiprintf_r+0x1d4>)
 80035c8:	f000 faea 	bl	8003ba0 <memchr>
 80035cc:	1c67      	adds	r7, r4, #1
 80035ce:	9b04      	ldr	r3, [sp, #16]
 80035d0:	b9d8      	cbnz	r0, 800360a <_svfiprintf_r+0xd6>
 80035d2:	06d9      	lsls	r1, r3, #27
 80035d4:	bf44      	itt	mi
 80035d6:	2220      	movmi	r2, #32
 80035d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035dc:	071a      	lsls	r2, r3, #28
 80035de:	bf44      	itt	mi
 80035e0:	222b      	movmi	r2, #43	; 0x2b
 80035e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035e6:	7822      	ldrb	r2, [r4, #0]
 80035e8:	2a2a      	cmp	r2, #42	; 0x2a
 80035ea:	d016      	beq.n	800361a <_svfiprintf_r+0xe6>
 80035ec:	2100      	movs	r1, #0
 80035ee:	200a      	movs	r0, #10
 80035f0:	9a07      	ldr	r2, [sp, #28]
 80035f2:	4627      	mov	r7, r4
 80035f4:	783b      	ldrb	r3, [r7, #0]
 80035f6:	3401      	adds	r4, #1
 80035f8:	3b30      	subs	r3, #48	; 0x30
 80035fa:	2b09      	cmp	r3, #9
 80035fc:	d950      	bls.n	80036a0 <_svfiprintf_r+0x16c>
 80035fe:	b1c9      	cbz	r1, 8003634 <_svfiprintf_r+0x100>
 8003600:	e011      	b.n	8003626 <_svfiprintf_r+0xf2>
 8003602:	2b25      	cmp	r3, #37	; 0x25
 8003604:	d0c0      	beq.n	8003588 <_svfiprintf_r+0x54>
 8003606:	4627      	mov	r7, r4
 8003608:	e7b9      	b.n	800357e <_svfiprintf_r+0x4a>
 800360a:	4a3f      	ldr	r2, [pc, #252]	; (8003708 <_svfiprintf_r+0x1d4>)
 800360c:	463c      	mov	r4, r7
 800360e:	1a80      	subs	r0, r0, r2
 8003610:	fa0b f000 	lsl.w	r0, fp, r0
 8003614:	4318      	orrs	r0, r3
 8003616:	9004      	str	r0, [sp, #16]
 8003618:	e7d3      	b.n	80035c2 <_svfiprintf_r+0x8e>
 800361a:	9a03      	ldr	r2, [sp, #12]
 800361c:	1d11      	adds	r1, r2, #4
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	9103      	str	r1, [sp, #12]
 8003622:	2a00      	cmp	r2, #0
 8003624:	db01      	blt.n	800362a <_svfiprintf_r+0xf6>
 8003626:	9207      	str	r2, [sp, #28]
 8003628:	e004      	b.n	8003634 <_svfiprintf_r+0x100>
 800362a:	4252      	negs	r2, r2
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	9207      	str	r2, [sp, #28]
 8003632:	9304      	str	r3, [sp, #16]
 8003634:	783b      	ldrb	r3, [r7, #0]
 8003636:	2b2e      	cmp	r3, #46	; 0x2e
 8003638:	d10d      	bne.n	8003656 <_svfiprintf_r+0x122>
 800363a:	787b      	ldrb	r3, [r7, #1]
 800363c:	1c79      	adds	r1, r7, #1
 800363e:	2b2a      	cmp	r3, #42	; 0x2a
 8003640:	d132      	bne.n	80036a8 <_svfiprintf_r+0x174>
 8003642:	9b03      	ldr	r3, [sp, #12]
 8003644:	3702      	adds	r7, #2
 8003646:	1d1a      	adds	r2, r3, #4
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	9203      	str	r2, [sp, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	bfb8      	it	lt
 8003650:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003654:	9305      	str	r3, [sp, #20]
 8003656:	4c2d      	ldr	r4, [pc, #180]	; (800370c <_svfiprintf_r+0x1d8>)
 8003658:	2203      	movs	r2, #3
 800365a:	7839      	ldrb	r1, [r7, #0]
 800365c:	4620      	mov	r0, r4
 800365e:	f000 fa9f 	bl	8003ba0 <memchr>
 8003662:	b138      	cbz	r0, 8003674 <_svfiprintf_r+0x140>
 8003664:	2340      	movs	r3, #64	; 0x40
 8003666:	1b00      	subs	r0, r0, r4
 8003668:	fa03 f000 	lsl.w	r0, r3, r0
 800366c:	9b04      	ldr	r3, [sp, #16]
 800366e:	3701      	adds	r7, #1
 8003670:	4303      	orrs	r3, r0
 8003672:	9304      	str	r3, [sp, #16]
 8003674:	7839      	ldrb	r1, [r7, #0]
 8003676:	2206      	movs	r2, #6
 8003678:	4825      	ldr	r0, [pc, #148]	; (8003710 <_svfiprintf_r+0x1dc>)
 800367a:	1c7e      	adds	r6, r7, #1
 800367c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003680:	f000 fa8e 	bl	8003ba0 <memchr>
 8003684:	2800      	cmp	r0, #0
 8003686:	d035      	beq.n	80036f4 <_svfiprintf_r+0x1c0>
 8003688:	4b22      	ldr	r3, [pc, #136]	; (8003714 <_svfiprintf_r+0x1e0>)
 800368a:	b9fb      	cbnz	r3, 80036cc <_svfiprintf_r+0x198>
 800368c:	9b03      	ldr	r3, [sp, #12]
 800368e:	3307      	adds	r3, #7
 8003690:	f023 0307 	bic.w	r3, r3, #7
 8003694:	3308      	adds	r3, #8
 8003696:	9303      	str	r3, [sp, #12]
 8003698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800369a:	444b      	add	r3, r9
 800369c:	9309      	str	r3, [sp, #36]	; 0x24
 800369e:	e76d      	b.n	800357c <_svfiprintf_r+0x48>
 80036a0:	fb00 3202 	mla	r2, r0, r2, r3
 80036a4:	2101      	movs	r1, #1
 80036a6:	e7a4      	b.n	80035f2 <_svfiprintf_r+0xbe>
 80036a8:	2300      	movs	r3, #0
 80036aa:	240a      	movs	r4, #10
 80036ac:	4618      	mov	r0, r3
 80036ae:	9305      	str	r3, [sp, #20]
 80036b0:	460f      	mov	r7, r1
 80036b2:	783a      	ldrb	r2, [r7, #0]
 80036b4:	3101      	adds	r1, #1
 80036b6:	3a30      	subs	r2, #48	; 0x30
 80036b8:	2a09      	cmp	r2, #9
 80036ba:	d903      	bls.n	80036c4 <_svfiprintf_r+0x190>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ca      	beq.n	8003656 <_svfiprintf_r+0x122>
 80036c0:	9005      	str	r0, [sp, #20]
 80036c2:	e7c8      	b.n	8003656 <_svfiprintf_r+0x122>
 80036c4:	fb04 2000 	mla	r0, r4, r0, r2
 80036c8:	2301      	movs	r3, #1
 80036ca:	e7f1      	b.n	80036b0 <_svfiprintf_r+0x17c>
 80036cc:	ab03      	add	r3, sp, #12
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	462a      	mov	r2, r5
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <_svfiprintf_r+0x1e4>)
 80036d4:	a904      	add	r1, sp, #16
 80036d6:	4640      	mov	r0, r8
 80036d8:	f3af 8000 	nop.w
 80036dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80036e0:	4681      	mov	r9, r0
 80036e2:	d1d9      	bne.n	8003698 <_svfiprintf_r+0x164>
 80036e4:	89ab      	ldrh	r3, [r5, #12]
 80036e6:	065b      	lsls	r3, r3, #25
 80036e8:	f53f af39 	bmi.w	800355e <_svfiprintf_r+0x2a>
 80036ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036ee:	b01d      	add	sp, #116	; 0x74
 80036f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f4:	ab03      	add	r3, sp, #12
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	462a      	mov	r2, r5
 80036fa:	4b07      	ldr	r3, [pc, #28]	; (8003718 <_svfiprintf_r+0x1e4>)
 80036fc:	a904      	add	r1, sp, #16
 80036fe:	4640      	mov	r0, r8
 8003700:	f000 f884 	bl	800380c <_printf_i>
 8003704:	e7ea      	b.n	80036dc <_svfiprintf_r+0x1a8>
 8003706:	bf00      	nop
 8003708:	08005ab4 	.word	0x08005ab4
 800370c:	08005aba 	.word	0x08005aba
 8003710:	08005abe 	.word	0x08005abe
 8003714:	00000000 	.word	0x00000000
 8003718:	0800347d 	.word	0x0800347d

0800371c <_printf_common>:
 800371c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003720:	4691      	mov	r9, r2
 8003722:	461f      	mov	r7, r3
 8003724:	688a      	ldr	r2, [r1, #8]
 8003726:	690b      	ldr	r3, [r1, #16]
 8003728:	4606      	mov	r6, r0
 800372a:	4293      	cmp	r3, r2
 800372c:	bfb8      	it	lt
 800372e:	4613      	movlt	r3, r2
 8003730:	f8c9 3000 	str.w	r3, [r9]
 8003734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003738:	460c      	mov	r4, r1
 800373a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800373e:	b112      	cbz	r2, 8003746 <_printf_common+0x2a>
 8003740:	3301      	adds	r3, #1
 8003742:	f8c9 3000 	str.w	r3, [r9]
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	0699      	lsls	r1, r3, #26
 800374a:	bf42      	ittt	mi
 800374c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003750:	3302      	addmi	r3, #2
 8003752:	f8c9 3000 	strmi.w	r3, [r9]
 8003756:	6825      	ldr	r5, [r4, #0]
 8003758:	f015 0506 	ands.w	r5, r5, #6
 800375c:	d107      	bne.n	800376e <_printf_common+0x52>
 800375e:	f104 0a19 	add.w	sl, r4, #25
 8003762:	68e3      	ldr	r3, [r4, #12]
 8003764:	f8d9 2000 	ldr.w	r2, [r9]
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	429d      	cmp	r5, r3
 800376c:	db2a      	blt.n	80037c4 <_printf_common+0xa8>
 800376e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003772:	6822      	ldr	r2, [r4, #0]
 8003774:	3300      	adds	r3, #0
 8003776:	bf18      	it	ne
 8003778:	2301      	movne	r3, #1
 800377a:	0692      	lsls	r2, r2, #26
 800377c:	d42f      	bmi.n	80037de <_printf_common+0xc2>
 800377e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003782:	4639      	mov	r1, r7
 8003784:	4630      	mov	r0, r6
 8003786:	47c0      	blx	r8
 8003788:	3001      	adds	r0, #1
 800378a:	d022      	beq.n	80037d2 <_printf_common+0xb6>
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	68e5      	ldr	r5, [r4, #12]
 8003790:	f003 0306 	and.w	r3, r3, #6
 8003794:	2b04      	cmp	r3, #4
 8003796:	bf18      	it	ne
 8003798:	2500      	movne	r5, #0
 800379a:	f8d9 2000 	ldr.w	r2, [r9]
 800379e:	f04f 0900 	mov.w	r9, #0
 80037a2:	bf08      	it	eq
 80037a4:	1aad      	subeq	r5, r5, r2
 80037a6:	68a3      	ldr	r3, [r4, #8]
 80037a8:	6922      	ldr	r2, [r4, #16]
 80037aa:	bf08      	it	eq
 80037ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037b0:	4293      	cmp	r3, r2
 80037b2:	bfc4      	itt	gt
 80037b4:	1a9b      	subgt	r3, r3, r2
 80037b6:	18ed      	addgt	r5, r5, r3
 80037b8:	341a      	adds	r4, #26
 80037ba:	454d      	cmp	r5, r9
 80037bc:	d11b      	bne.n	80037f6 <_printf_common+0xda>
 80037be:	2000      	movs	r0, #0
 80037c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c4:	2301      	movs	r3, #1
 80037c6:	4652      	mov	r2, sl
 80037c8:	4639      	mov	r1, r7
 80037ca:	4630      	mov	r0, r6
 80037cc:	47c0      	blx	r8
 80037ce:	3001      	adds	r0, #1
 80037d0:	d103      	bne.n	80037da <_printf_common+0xbe>
 80037d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037da:	3501      	adds	r5, #1
 80037dc:	e7c1      	b.n	8003762 <_printf_common+0x46>
 80037de:	2030      	movs	r0, #48	; 0x30
 80037e0:	18e1      	adds	r1, r4, r3
 80037e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037ec:	4422      	add	r2, r4
 80037ee:	3302      	adds	r3, #2
 80037f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037f4:	e7c3      	b.n	800377e <_printf_common+0x62>
 80037f6:	2301      	movs	r3, #1
 80037f8:	4622      	mov	r2, r4
 80037fa:	4639      	mov	r1, r7
 80037fc:	4630      	mov	r0, r6
 80037fe:	47c0      	blx	r8
 8003800:	3001      	adds	r0, #1
 8003802:	d0e6      	beq.n	80037d2 <_printf_common+0xb6>
 8003804:	f109 0901 	add.w	r9, r9, #1
 8003808:	e7d7      	b.n	80037ba <_printf_common+0x9e>
	...

0800380c <_printf_i>:
 800380c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003810:	4617      	mov	r7, r2
 8003812:	7e0a      	ldrb	r2, [r1, #24]
 8003814:	b085      	sub	sp, #20
 8003816:	2a6e      	cmp	r2, #110	; 0x6e
 8003818:	4698      	mov	r8, r3
 800381a:	4606      	mov	r6, r0
 800381c:	460c      	mov	r4, r1
 800381e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003820:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003824:	f000 80bc 	beq.w	80039a0 <_printf_i+0x194>
 8003828:	d81a      	bhi.n	8003860 <_printf_i+0x54>
 800382a:	2a63      	cmp	r2, #99	; 0x63
 800382c:	d02e      	beq.n	800388c <_printf_i+0x80>
 800382e:	d80a      	bhi.n	8003846 <_printf_i+0x3a>
 8003830:	2a00      	cmp	r2, #0
 8003832:	f000 80c8 	beq.w	80039c6 <_printf_i+0x1ba>
 8003836:	2a58      	cmp	r2, #88	; 0x58
 8003838:	f000 808a 	beq.w	8003950 <_printf_i+0x144>
 800383c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003840:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003844:	e02a      	b.n	800389c <_printf_i+0x90>
 8003846:	2a64      	cmp	r2, #100	; 0x64
 8003848:	d001      	beq.n	800384e <_printf_i+0x42>
 800384a:	2a69      	cmp	r2, #105	; 0x69
 800384c:	d1f6      	bne.n	800383c <_printf_i+0x30>
 800384e:	6821      	ldr	r1, [r4, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003856:	d023      	beq.n	80038a0 <_printf_i+0x94>
 8003858:	1d11      	adds	r1, r2, #4
 800385a:	6019      	str	r1, [r3, #0]
 800385c:	6813      	ldr	r3, [r2, #0]
 800385e:	e027      	b.n	80038b0 <_printf_i+0xa4>
 8003860:	2a73      	cmp	r2, #115	; 0x73
 8003862:	f000 80b4 	beq.w	80039ce <_printf_i+0x1c2>
 8003866:	d808      	bhi.n	800387a <_printf_i+0x6e>
 8003868:	2a6f      	cmp	r2, #111	; 0x6f
 800386a:	d02a      	beq.n	80038c2 <_printf_i+0xb6>
 800386c:	2a70      	cmp	r2, #112	; 0x70
 800386e:	d1e5      	bne.n	800383c <_printf_i+0x30>
 8003870:	680a      	ldr	r2, [r1, #0]
 8003872:	f042 0220 	orr.w	r2, r2, #32
 8003876:	600a      	str	r2, [r1, #0]
 8003878:	e003      	b.n	8003882 <_printf_i+0x76>
 800387a:	2a75      	cmp	r2, #117	; 0x75
 800387c:	d021      	beq.n	80038c2 <_printf_i+0xb6>
 800387e:	2a78      	cmp	r2, #120	; 0x78
 8003880:	d1dc      	bne.n	800383c <_printf_i+0x30>
 8003882:	2278      	movs	r2, #120	; 0x78
 8003884:	496f      	ldr	r1, [pc, #444]	; (8003a44 <_printf_i+0x238>)
 8003886:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800388a:	e064      	b.n	8003956 <_printf_i+0x14a>
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003892:	1d11      	adds	r1, r2, #4
 8003894:	6019      	str	r1, [r3, #0]
 8003896:	6813      	ldr	r3, [r2, #0]
 8003898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800389c:	2301      	movs	r3, #1
 800389e:	e0a3      	b.n	80039e8 <_printf_i+0x1dc>
 80038a0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80038a4:	f102 0104 	add.w	r1, r2, #4
 80038a8:	6019      	str	r1, [r3, #0]
 80038aa:	d0d7      	beq.n	800385c <_printf_i+0x50>
 80038ac:	f9b2 3000 	ldrsh.w	r3, [r2]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	da03      	bge.n	80038bc <_printf_i+0xb0>
 80038b4:	222d      	movs	r2, #45	; 0x2d
 80038b6:	425b      	negs	r3, r3
 80038b8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80038bc:	4962      	ldr	r1, [pc, #392]	; (8003a48 <_printf_i+0x23c>)
 80038be:	220a      	movs	r2, #10
 80038c0:	e017      	b.n	80038f2 <_printf_i+0xe6>
 80038c2:	6820      	ldr	r0, [r4, #0]
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80038ca:	d003      	beq.n	80038d4 <_printf_i+0xc8>
 80038cc:	1d08      	adds	r0, r1, #4
 80038ce:	6018      	str	r0, [r3, #0]
 80038d0:	680b      	ldr	r3, [r1, #0]
 80038d2:	e006      	b.n	80038e2 <_printf_i+0xd6>
 80038d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038d8:	f101 0004 	add.w	r0, r1, #4
 80038dc:	6018      	str	r0, [r3, #0]
 80038de:	d0f7      	beq.n	80038d0 <_printf_i+0xc4>
 80038e0:	880b      	ldrh	r3, [r1, #0]
 80038e2:	2a6f      	cmp	r2, #111	; 0x6f
 80038e4:	bf14      	ite	ne
 80038e6:	220a      	movne	r2, #10
 80038e8:	2208      	moveq	r2, #8
 80038ea:	4957      	ldr	r1, [pc, #348]	; (8003a48 <_printf_i+0x23c>)
 80038ec:	2000      	movs	r0, #0
 80038ee:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80038f2:	6865      	ldr	r5, [r4, #4]
 80038f4:	2d00      	cmp	r5, #0
 80038f6:	60a5      	str	r5, [r4, #8]
 80038f8:	f2c0 809c 	blt.w	8003a34 <_printf_i+0x228>
 80038fc:	6820      	ldr	r0, [r4, #0]
 80038fe:	f020 0004 	bic.w	r0, r0, #4
 8003902:	6020      	str	r0, [r4, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d13f      	bne.n	8003988 <_printf_i+0x17c>
 8003908:	2d00      	cmp	r5, #0
 800390a:	f040 8095 	bne.w	8003a38 <_printf_i+0x22c>
 800390e:	4675      	mov	r5, lr
 8003910:	2a08      	cmp	r2, #8
 8003912:	d10b      	bne.n	800392c <_printf_i+0x120>
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	07da      	lsls	r2, r3, #31
 8003918:	d508      	bpl.n	800392c <_printf_i+0x120>
 800391a:	6923      	ldr	r3, [r4, #16]
 800391c:	6862      	ldr	r2, [r4, #4]
 800391e:	429a      	cmp	r2, r3
 8003920:	bfde      	ittt	le
 8003922:	2330      	movle	r3, #48	; 0x30
 8003924:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003928:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800392c:	ebae 0305 	sub.w	r3, lr, r5
 8003930:	6123      	str	r3, [r4, #16]
 8003932:	f8cd 8000 	str.w	r8, [sp]
 8003936:	463b      	mov	r3, r7
 8003938:	aa03      	add	r2, sp, #12
 800393a:	4621      	mov	r1, r4
 800393c:	4630      	mov	r0, r6
 800393e:	f7ff feed 	bl	800371c <_printf_common>
 8003942:	3001      	adds	r0, #1
 8003944:	d155      	bne.n	80039f2 <_printf_i+0x1e6>
 8003946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800394a:	b005      	add	sp, #20
 800394c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003950:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003954:	493c      	ldr	r1, [pc, #240]	; (8003a48 <_printf_i+0x23c>)
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800395e:	f100 0504 	add.w	r5, r0, #4
 8003962:	601d      	str	r5, [r3, #0]
 8003964:	d001      	beq.n	800396a <_printf_i+0x15e>
 8003966:	6803      	ldr	r3, [r0, #0]
 8003968:	e002      	b.n	8003970 <_printf_i+0x164>
 800396a:	0655      	lsls	r5, r2, #25
 800396c:	d5fb      	bpl.n	8003966 <_printf_i+0x15a>
 800396e:	8803      	ldrh	r3, [r0, #0]
 8003970:	07d0      	lsls	r0, r2, #31
 8003972:	bf44      	itt	mi
 8003974:	f042 0220 	orrmi.w	r2, r2, #32
 8003978:	6022      	strmi	r2, [r4, #0]
 800397a:	b91b      	cbnz	r3, 8003984 <_printf_i+0x178>
 800397c:	6822      	ldr	r2, [r4, #0]
 800397e:	f022 0220 	bic.w	r2, r2, #32
 8003982:	6022      	str	r2, [r4, #0]
 8003984:	2210      	movs	r2, #16
 8003986:	e7b1      	b.n	80038ec <_printf_i+0xe0>
 8003988:	4675      	mov	r5, lr
 800398a:	fbb3 f0f2 	udiv	r0, r3, r2
 800398e:	fb02 3310 	mls	r3, r2, r0, r3
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003998:	4603      	mov	r3, r0
 800399a:	2800      	cmp	r0, #0
 800399c:	d1f5      	bne.n	800398a <_printf_i+0x17e>
 800399e:	e7b7      	b.n	8003910 <_printf_i+0x104>
 80039a0:	6808      	ldr	r0, [r1, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80039a8:	6949      	ldr	r1, [r1, #20]
 80039aa:	d004      	beq.n	80039b6 <_printf_i+0x1aa>
 80039ac:	1d10      	adds	r0, r2, #4
 80039ae:	6018      	str	r0, [r3, #0]
 80039b0:	6813      	ldr	r3, [r2, #0]
 80039b2:	6019      	str	r1, [r3, #0]
 80039b4:	e007      	b.n	80039c6 <_printf_i+0x1ba>
 80039b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039ba:	f102 0004 	add.w	r0, r2, #4
 80039be:	6018      	str	r0, [r3, #0]
 80039c0:	6813      	ldr	r3, [r2, #0]
 80039c2:	d0f6      	beq.n	80039b2 <_printf_i+0x1a6>
 80039c4:	8019      	strh	r1, [r3, #0]
 80039c6:	2300      	movs	r3, #0
 80039c8:	4675      	mov	r5, lr
 80039ca:	6123      	str	r3, [r4, #16]
 80039cc:	e7b1      	b.n	8003932 <_printf_i+0x126>
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	1d11      	adds	r1, r2, #4
 80039d2:	6019      	str	r1, [r3, #0]
 80039d4:	6815      	ldr	r5, [r2, #0]
 80039d6:	2100      	movs	r1, #0
 80039d8:	6862      	ldr	r2, [r4, #4]
 80039da:	4628      	mov	r0, r5
 80039dc:	f000 f8e0 	bl	8003ba0 <memchr>
 80039e0:	b108      	cbz	r0, 80039e6 <_printf_i+0x1da>
 80039e2:	1b40      	subs	r0, r0, r5
 80039e4:	6060      	str	r0, [r4, #4]
 80039e6:	6863      	ldr	r3, [r4, #4]
 80039e8:	6123      	str	r3, [r4, #16]
 80039ea:	2300      	movs	r3, #0
 80039ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039f0:	e79f      	b.n	8003932 <_printf_i+0x126>
 80039f2:	6923      	ldr	r3, [r4, #16]
 80039f4:	462a      	mov	r2, r5
 80039f6:	4639      	mov	r1, r7
 80039f8:	4630      	mov	r0, r6
 80039fa:	47c0      	blx	r8
 80039fc:	3001      	adds	r0, #1
 80039fe:	d0a2      	beq.n	8003946 <_printf_i+0x13a>
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	079b      	lsls	r3, r3, #30
 8003a04:	d507      	bpl.n	8003a16 <_printf_i+0x20a>
 8003a06:	2500      	movs	r5, #0
 8003a08:	f104 0919 	add.w	r9, r4, #25
 8003a0c:	68e3      	ldr	r3, [r4, #12]
 8003a0e:	9a03      	ldr	r2, [sp, #12]
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	429d      	cmp	r5, r3
 8003a14:	db05      	blt.n	8003a22 <_printf_i+0x216>
 8003a16:	68e0      	ldr	r0, [r4, #12]
 8003a18:	9b03      	ldr	r3, [sp, #12]
 8003a1a:	4298      	cmp	r0, r3
 8003a1c:	bfb8      	it	lt
 8003a1e:	4618      	movlt	r0, r3
 8003a20:	e793      	b.n	800394a <_printf_i+0x13e>
 8003a22:	2301      	movs	r3, #1
 8003a24:	464a      	mov	r2, r9
 8003a26:	4639      	mov	r1, r7
 8003a28:	4630      	mov	r0, r6
 8003a2a:	47c0      	blx	r8
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	d08a      	beq.n	8003946 <_printf_i+0x13a>
 8003a30:	3501      	adds	r5, #1
 8003a32:	e7eb      	b.n	8003a0c <_printf_i+0x200>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1a7      	bne.n	8003988 <_printf_i+0x17c>
 8003a38:	780b      	ldrb	r3, [r1, #0]
 8003a3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a42:	e765      	b.n	8003910 <_printf_i+0x104>
 8003a44:	08005ad6 	.word	0x08005ad6
 8003a48:	08005ac5 	.word	0x08005ac5

08003a4c <_sbrk_r>:
 8003a4c:	b538      	push	{r3, r4, r5, lr}
 8003a4e:	2300      	movs	r3, #0
 8003a50:	4c05      	ldr	r4, [pc, #20]	; (8003a68 <_sbrk_r+0x1c>)
 8003a52:	4605      	mov	r5, r0
 8003a54:	4608      	mov	r0, r1
 8003a56:	6023      	str	r3, [r4, #0]
 8003a58:	f7fe fa16 	bl	8001e88 <_sbrk>
 8003a5c:	1c43      	adds	r3, r0, #1
 8003a5e:	d102      	bne.n	8003a66 <_sbrk_r+0x1a>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	b103      	cbz	r3, 8003a66 <_sbrk_r+0x1a>
 8003a64:	602b      	str	r3, [r5, #0]
 8003a66:	bd38      	pop	{r3, r4, r5, pc}
 8003a68:	20000378 	.word	0x20000378

08003a6c <__sread>:
 8003a6c:	b510      	push	{r4, lr}
 8003a6e:	460c      	mov	r4, r1
 8003a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a74:	f000 f8f0 	bl	8003c58 <_read_r>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	bfab      	itete	ge
 8003a7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8003a80:	181b      	addge	r3, r3, r0
 8003a82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a86:	bfac      	ite	ge
 8003a88:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a8a:	81a3      	strhlt	r3, [r4, #12]
 8003a8c:	bd10      	pop	{r4, pc}

08003a8e <__swrite>:
 8003a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a92:	461f      	mov	r7, r3
 8003a94:	898b      	ldrh	r3, [r1, #12]
 8003a96:	4605      	mov	r5, r0
 8003a98:	05db      	lsls	r3, r3, #23
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	4616      	mov	r6, r2
 8003a9e:	d505      	bpl.n	8003aac <__swrite+0x1e>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa8:	f000 f868 	bl	8003b7c <_lseek_r>
 8003aac:	89a3      	ldrh	r3, [r4, #12]
 8003aae:	4632      	mov	r2, r6
 8003ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ab4:	81a3      	strh	r3, [r4, #12]
 8003ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aba:	463b      	mov	r3, r7
 8003abc:	4628      	mov	r0, r5
 8003abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ac2:	f000 b817 	b.w	8003af4 <_write_r>

08003ac6 <__sseek>:
 8003ac6:	b510      	push	{r4, lr}
 8003ac8:	460c      	mov	r4, r1
 8003aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ace:	f000 f855 	bl	8003b7c <_lseek_r>
 8003ad2:	1c43      	adds	r3, r0, #1
 8003ad4:	89a3      	ldrh	r3, [r4, #12]
 8003ad6:	bf15      	itete	ne
 8003ad8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ae2:	81a3      	strheq	r3, [r4, #12]
 8003ae4:	bf18      	it	ne
 8003ae6:	81a3      	strhne	r3, [r4, #12]
 8003ae8:	bd10      	pop	{r4, pc}

08003aea <__sclose>:
 8003aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aee:	f000 b813 	b.w	8003b18 <_close_r>
	...

08003af4 <_write_r>:
 8003af4:	b538      	push	{r3, r4, r5, lr}
 8003af6:	4605      	mov	r5, r0
 8003af8:	4608      	mov	r0, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	2200      	movs	r2, #0
 8003afe:	4c05      	ldr	r4, [pc, #20]	; (8003b14 <_write_r+0x20>)
 8003b00:	6022      	str	r2, [r4, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f7fd fd9e 	bl	8001644 <_write>
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	d102      	bne.n	8003b12 <_write_r+0x1e>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	b103      	cbz	r3, 8003b12 <_write_r+0x1e>
 8003b10:	602b      	str	r3, [r5, #0]
 8003b12:	bd38      	pop	{r3, r4, r5, pc}
 8003b14:	20000378 	.word	0x20000378

08003b18 <_close_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	4c05      	ldr	r4, [pc, #20]	; (8003b34 <_close_r+0x1c>)
 8003b1e:	4605      	mov	r5, r0
 8003b20:	4608      	mov	r0, r1
 8003b22:	6023      	str	r3, [r4, #0]
 8003b24:	f7fe f9ca 	bl	8001ebc <_close>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	d102      	bne.n	8003b32 <_close_r+0x1a>
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	b103      	cbz	r3, 8003b32 <_close_r+0x1a>
 8003b30:	602b      	str	r3, [r5, #0]
 8003b32:	bd38      	pop	{r3, r4, r5, pc}
 8003b34:	20000378 	.word	0x20000378

08003b38 <_fstat_r>:
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	4c06      	ldr	r4, [pc, #24]	; (8003b58 <_fstat_r+0x20>)
 8003b3e:	4605      	mov	r5, r0
 8003b40:	4608      	mov	r0, r1
 8003b42:	4611      	mov	r1, r2
 8003b44:	6023      	str	r3, [r4, #0]
 8003b46:	f7fe f9bc 	bl	8001ec2 <_fstat>
 8003b4a:	1c43      	adds	r3, r0, #1
 8003b4c:	d102      	bne.n	8003b54 <_fstat_r+0x1c>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	b103      	cbz	r3, 8003b54 <_fstat_r+0x1c>
 8003b52:	602b      	str	r3, [r5, #0]
 8003b54:	bd38      	pop	{r3, r4, r5, pc}
 8003b56:	bf00      	nop
 8003b58:	20000378 	.word	0x20000378

08003b5c <_isatty_r>:
 8003b5c:	b538      	push	{r3, r4, r5, lr}
 8003b5e:	2300      	movs	r3, #0
 8003b60:	4c05      	ldr	r4, [pc, #20]	; (8003b78 <_isatty_r+0x1c>)
 8003b62:	4605      	mov	r5, r0
 8003b64:	4608      	mov	r0, r1
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	f7fe f9b0 	bl	8001ecc <_isatty>
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	d102      	bne.n	8003b76 <_isatty_r+0x1a>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	b103      	cbz	r3, 8003b76 <_isatty_r+0x1a>
 8003b74:	602b      	str	r3, [r5, #0]
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
 8003b78:	20000378 	.word	0x20000378

08003b7c <_lseek_r>:
 8003b7c:	b538      	push	{r3, r4, r5, lr}
 8003b7e:	4605      	mov	r5, r0
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	2200      	movs	r2, #0
 8003b86:	4c05      	ldr	r4, [pc, #20]	; (8003b9c <_lseek_r+0x20>)
 8003b88:	6022      	str	r2, [r4, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f7fe f9a0 	bl	8001ed0 <_lseek>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d102      	bne.n	8003b9a <_lseek_r+0x1e>
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	b103      	cbz	r3, 8003b9a <_lseek_r+0x1e>
 8003b98:	602b      	str	r3, [r5, #0]
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	20000378 	.word	0x20000378

08003ba0 <memchr>:
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	b2c9      	uxtb	r1, r1
 8003ba4:	4402      	add	r2, r0
 8003ba6:	4290      	cmp	r0, r2
 8003ba8:	4603      	mov	r3, r0
 8003baa:	d101      	bne.n	8003bb0 <memchr+0x10>
 8003bac:	2000      	movs	r0, #0
 8003bae:	bd10      	pop	{r4, pc}
 8003bb0:	781c      	ldrb	r4, [r3, #0]
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	428c      	cmp	r4, r1
 8003bb6:	d1f6      	bne.n	8003ba6 <memchr+0x6>
 8003bb8:	4618      	mov	r0, r3
 8003bba:	bd10      	pop	{r4, pc}

08003bbc <memcpy>:
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	1e43      	subs	r3, r0, #1
 8003bc0:	440a      	add	r2, r1
 8003bc2:	4291      	cmp	r1, r2
 8003bc4:	d100      	bne.n	8003bc8 <memcpy+0xc>
 8003bc6:	bd10      	pop	{r4, pc}
 8003bc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bd0:	e7f7      	b.n	8003bc2 <memcpy+0x6>

08003bd2 <memmove>:
 8003bd2:	4288      	cmp	r0, r1
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	eb01 0302 	add.w	r3, r1, r2
 8003bda:	d803      	bhi.n	8003be4 <memmove+0x12>
 8003bdc:	1e42      	subs	r2, r0, #1
 8003bde:	4299      	cmp	r1, r3
 8003be0:	d10c      	bne.n	8003bfc <memmove+0x2a>
 8003be2:	bd10      	pop	{r4, pc}
 8003be4:	4298      	cmp	r0, r3
 8003be6:	d2f9      	bcs.n	8003bdc <memmove+0xa>
 8003be8:	1881      	adds	r1, r0, r2
 8003bea:	1ad2      	subs	r2, r2, r3
 8003bec:	42d3      	cmn	r3, r2
 8003bee:	d100      	bne.n	8003bf2 <memmove+0x20>
 8003bf0:	bd10      	pop	{r4, pc}
 8003bf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bf6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003bfa:	e7f7      	b.n	8003bec <memmove+0x1a>
 8003bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c00:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c04:	e7eb      	b.n	8003bde <memmove+0xc>

08003c06 <__malloc_lock>:
 8003c06:	4770      	bx	lr

08003c08 <__malloc_unlock>:
 8003c08:	4770      	bx	lr

08003c0a <_realloc_r>:
 8003c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0c:	4607      	mov	r7, r0
 8003c0e:	4614      	mov	r4, r2
 8003c10:	460e      	mov	r6, r1
 8003c12:	b921      	cbnz	r1, 8003c1e <_realloc_r+0x14>
 8003c14:	4611      	mov	r1, r2
 8003c16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c1a:	f7ff bbd1 	b.w	80033c0 <_malloc_r>
 8003c1e:	b922      	cbnz	r2, 8003c2a <_realloc_r+0x20>
 8003c20:	f7ff fb82 	bl	8003328 <_free_r>
 8003c24:	4625      	mov	r5, r4
 8003c26:	4628      	mov	r0, r5
 8003c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c2a:	f000 f827 	bl	8003c7c <_malloc_usable_size_r>
 8003c2e:	4284      	cmp	r4, r0
 8003c30:	d90f      	bls.n	8003c52 <_realloc_r+0x48>
 8003c32:	4621      	mov	r1, r4
 8003c34:	4638      	mov	r0, r7
 8003c36:	f7ff fbc3 	bl	80033c0 <_malloc_r>
 8003c3a:	4605      	mov	r5, r0
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d0f2      	beq.n	8003c26 <_realloc_r+0x1c>
 8003c40:	4631      	mov	r1, r6
 8003c42:	4622      	mov	r2, r4
 8003c44:	f7ff ffba 	bl	8003bbc <memcpy>
 8003c48:	4631      	mov	r1, r6
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	f7ff fb6c 	bl	8003328 <_free_r>
 8003c50:	e7e9      	b.n	8003c26 <_realloc_r+0x1c>
 8003c52:	4635      	mov	r5, r6
 8003c54:	e7e7      	b.n	8003c26 <_realloc_r+0x1c>
	...

08003c58 <_read_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4605      	mov	r5, r0
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	4611      	mov	r1, r2
 8003c60:	2200      	movs	r2, #0
 8003c62:	4c05      	ldr	r4, [pc, #20]	; (8003c78 <_read_r+0x20>)
 8003c64:	6022      	str	r2, [r4, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f7fe f900 	bl	8001e6c <_read>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d102      	bne.n	8003c76 <_read_r+0x1e>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	b103      	cbz	r3, 8003c76 <_read_r+0x1e>
 8003c74:	602b      	str	r3, [r5, #0]
 8003c76:	bd38      	pop	{r3, r4, r5, pc}
 8003c78:	20000378 	.word	0x20000378

08003c7c <_malloc_usable_size_r>:
 8003c7c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003c80:	2800      	cmp	r0, #0
 8003c82:	f1a0 0004 	sub.w	r0, r0, #4
 8003c86:	bfbc      	itt	lt
 8003c88:	580b      	ldrlt	r3, [r1, r0]
 8003c8a:	18c0      	addlt	r0, r0, r3
 8003c8c:	4770      	bx	lr
	...

08003c90 <_init>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr

08003c9c <_fini>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	bf00      	nop
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr
